=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd

  class BraintreeAuthCaptureRequest
    attr_accessor :type

    # {\"description\":\"ID of the BillForward Account with which you would like to associate the created payment method.<br>If omitted, BillForward will associate the created PaymentMethod with a newly-created Account, whose Profile details will be populated using billing information from the funding instrument.\",\"verbs\":[\"POST\"]}
    attr_accessor :account_id

    # {\"description\":\"The gateway with which your funding instrument has been vaulted.\",\"verbs\":[\"POST\"]}
    attr_accessor :gateway

    # {\"description\":\"The name of the company of the customer from whose card a PaymentMethod is being produced. If provided: this metadata will be used to populate a Profile &mdash; should a BillForward Account be created by this request.\",\"verbs\":[\"POST\"]}
    attr_accessor :company_name

    # {\"description\":\"The email address of the customer from whose card a PaymentMethod is being produced. If provided: this metadata will be used to populate a Profile &mdash; should a BillForward Account be created by this request.\",\"verbs\":[\"POST\"]}
    attr_accessor :email

    # {\"description\":\"The first name of the customer from whose card a PaymentMethod is being produced. If provided: this metadata will be used to populate a Profile &mdash; should a BillForward Account be created by this request.\",\"verbs\":[\"POST\"]}
    attr_accessor :first_name

    # {\"description\":\"The last name of the customer from whose card a PaymentMethod is being produced. If provided: this metadata will be used to populate a Profile &mdash; should a BillForward Account be created by this request.\",\"verbs\":[\"POST\"]}
    attr_accessor :last_name

    # {\"description\":\"The mobile phone number of the customer from whose card a PaymentMethod is being produced. If provided: this metadata will be used to populate a Profile &mdash; should a BillForward Account be created by this request.\",\"verbs\":[\"POST\"]}
    attr_accessor :mobile

    # {\"default\":false,\"description\":\"Whether the PaymentMethod produced by this request should be elected as the 'default' payment method for the concerned BillForward Account. Whichever PaymentMethod is elected as an Account's default payment method, will be consulted whenever payment is demanded of that Account (i.e. upon the execution of any of the Account's invoices).\",\"verbs\":[\"POST\"]}
    attr_accessor :default_payment_method

    # {\"description\":\"ID of the BillForward Organization within which the requested PaymentMethod should be created. If omitted, this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\"]}
    attr_accessor :organization_id

    # {\"description\":\"One-use cryptographic nonce <a href=\\\"https://developers.braintreepayments.com/javascript+node/start/overview\\\">provided by Braintree's client-side card capture SDK</a>, in response to your capturing a card into the Braintree vault. This nonce will be used by BillForward to find the tokenized card within the Braintree vault &mdash; precursory to linking a BillForward PaymentMethod to that tokenized card\",\"verbs\":[\"POST\"]}
    attr_accessor :payment_method_nonce

    # {\"description\":\"(Required when vaulting a PayPal payment method; otherwise optional)<br>A JSON string providing information about the device your customer used to fill out the card capture form. This information is inserted into your form by <a href=\\\"https://developers.braintreepayments.com/javascript+node/guides/advanced-fraud-tools/client-side\\\">braintree-data.js</a> &mdash; if and only if you use Braintree's drop-in form integrations. You should ideally provide it if you have one (it aids with fraud detection), but it is only mandatory in the case of PayPal payment method vaulting.\",\"verbs\":[\"POST\"]}
    attr_accessor :device_data

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'type' => :'@type',
        :'account_id' => :'accountID',
        :'gateway' => :'gateway',
        :'company_name' => :'companyName',
        :'email' => :'email',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'mobile' => :'mobile',
        :'default_payment_method' => :'defaultPaymentMethod',
        :'organization_id' => :'organizationID',
        :'payment_method_nonce' => :'paymentMethodNonce',
        :'device_data' => :'deviceData'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'type' => :'String',
        :'account_id' => :'String',
        :'gateway' => :'String',
        :'company_name' => :'String',
        :'email' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'mobile' => :'String',
        :'default_payment_method' => :'BOOLEAN',
        :'organization_id' => :'String',
        :'payment_method_nonce' => :'String',
        :'device_data' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'@type')
        self.type = attributes[:'@type']
      end

      if attributes.has_key?(:'accountID')
        self.account_id = attributes[:'accountID']
      end

      if attributes.has_key?(:'gateway')
        self.gateway = attributes[:'gateway']
      end

      if attributes.has_key?(:'companyName')
        self.company_name = attributes[:'companyName']
      end

      if attributes.has_key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.has_key?(:'firstName')
        self.first_name = attributes[:'firstName']
      end

      if attributes.has_key?(:'lastName')
        self.last_name = attributes[:'lastName']
      end

      if attributes.has_key?(:'mobile')
        self.mobile = attributes[:'mobile']
      end

      if attributes.has_key?(:'defaultPaymentMethod')
        self.default_payment_method = attributes[:'defaultPaymentMethod']
      else
        self.default_payment_method = false
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'paymentMethodNonce')
        self.payment_method_nonce = attributes[:'paymentMethodNonce']
      end

      if attributes.has_key?(:'deviceData')
        self.device_data = attributes[:'deviceData']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @payment_method_nonce.nil?
        invalid_properties.push("invalid value for 'payment_method_nonce', payment_method_nonce cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["StripeAuthCaptureRequest"])
      return false unless type_validator.valid?(@type)
      gateway_validator = EnumAttributeValidator.new('String', ["Balanced", "Braintree", "Cybersource", "Paypal", "Stripe", "AuthorizeNet", "Spreedly", "SagePay", "TrustCommerce", "Payvision", "Kash"])
      return false unless gateway_validator.valid?(@gateway)
      return false if @payment_method_nonce.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["StripeAuthCaptureRequest"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gateway Object to be assigned
    def gateway=(gateway)
      validator = EnumAttributeValidator.new('String', ["Balanced", "Braintree", "Cybersource", "Paypal", "Stripe", "AuthorizeNet", "Spreedly", "SagePay", "TrustCommerce", "Payvision", "Kash"])
      unless validator.valid?(gateway)
        fail ArgumentError, "invalid value for 'gateway', must be one of #{validator.allowable_values}."
      end
      @gateway = gateway
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          type == o.type &&
          account_id == o.account_id &&
          gateway == o.gateway &&
          company_name == o.company_name &&
          email == o.email &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          mobile == o.mobile &&
          default_payment_method == o.default_payment_method &&
          organization_id == o.organization_id &&
          payment_method_nonce == o.payment_method_nonce &&
          device_data == o.device_data
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [type, account_id, gateway, company_name, email, first_name, last_name, mobile, default_payment_method, organization_id, payment_method_nonce, device_data].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
