=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # FixedTerm
  class FixedTerm
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # id
    attr_accessor :id

    # { \"description\" : \"subscriptionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :subscription_id

    # { \"description\" : \"The ID of the organization associated with the amendment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :organization_id

    # { \"description\" : \"fixedTermDefinitionID\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :fixed_term_definition_id

    attr_accessor :fixed_term_definition

    # fixedTermExpiryBehaviour
    attr_accessor :expiry_behaviour

    # state
    attr_accessor :state

    # productRatePlanAsOfTime
    attr_accessor :product_rate_plan_as_of_time

    # { \"description\" : \"compoundUplift\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }The proportional INCREASE in price applied every time the fixed terms recur. e.g. 0.03 is a 3% increase. -0.5 is a 50% decrease. 3 is a 300% increase
    attr_accessor :compound_uplift

    # start_time
    attr_accessor :start_time

    # expiry_time
    attr_accessor :expiry_time

    # { \"description\" : \"The number of billing periods that this fixed term lasts for.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :periods

    # { \"description\" : \"The number of sequential fixed terms previous to this one for the subscription (i.e. zero indexed 'fixedTermCount').\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :fixed_term_number

    # { \"description\" : \"Is the fixedTerm deleted.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :deleted

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'id' => :'id',
        :'subscription_id' => :'subscriptionID',
        :'organization_id' => :'organizationID',
        :'fixed_term_definition_id' => :'fixedTermDefinitionID',
        :'fixed_term_definition' => :'fixedTermDefinition',
        :'expiry_behaviour' => :'expiryBehaviour',
        :'state' => :'state',
        :'product_rate_plan_as_of_time' => :'productRatePlanAsOfTime',
        :'compound_uplift' => :'compoundUplift',
        :'start_time' => :'startTime',
        :'expiry_time' => :'expiryTime',
        :'periods' => :'periods',
        :'fixed_term_number' => :'fixedTermNumber',
        :'deleted' => :'deleted'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'id' => :'String',
        :'subscription_id' => :'String',
        :'organization_id' => :'String',
        :'fixed_term_definition_id' => :'String',
        :'fixed_term_definition' => :'MutableBillingEntity',
        :'expiry_behaviour' => :'String',
        :'state' => :'String',
        :'product_rate_plan_as_of_time' => :'DateTime',
        :'compound_uplift' => :'Float',
        :'start_time' => :'DateTime',
        :'expiry_time' => :'DateTime',
        :'periods' => :'Integer',
        :'fixed_term_number' => :'Integer',
        :'deleted' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'subscriptionID')
        self.subscription_id = attributes[:'subscriptionID']
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'fixedTermDefinitionID')
        self.fixed_term_definition_id = attributes[:'fixedTermDefinitionID']
      end

      if attributes.has_key?(:'fixedTermDefinition')
        self.fixed_term_definition = attributes[:'fixedTermDefinition']
      end

      if attributes.has_key?(:'expiryBehaviour')
        self.expiry_behaviour = attributes[:'expiryBehaviour']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'productRatePlanAsOfTime')
        self.product_rate_plan_as_of_time = attributes[:'productRatePlanAsOfTime']
      end

      if attributes.has_key?(:'compoundUplift')
        self.compound_uplift = attributes[:'compoundUplift']
      end

      if attributes.has_key?(:'startTime')
        self.start_time = attributes[:'startTime']
      end

      if attributes.has_key?(:'expiryTime')
        self.expiry_time = attributes[:'expiryTime']
      end

      if attributes.has_key?(:'periods')
        self.periods = attributes[:'periods']
      end

      if attributes.has_key?(:'fixedTermNumber')
        self.fixed_term_number = attributes[:'fixedTermNumber']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      else
        self.deleted = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @subscription_id.nil?
        invalid_properties.push("invalid value for 'subscription_id', subscription_id cannot be nil.")
      end

      if @organization_id.nil?
        invalid_properties.push("invalid value for 'organization_id', organization_id cannot be nil.")
      end

      if @fixed_term_definition_id.nil?
        invalid_properties.push("invalid value for 'fixed_term_definition_id', fixed_term_definition_id cannot be nil.")
      end

      if @fixed_term_definition.nil?
        invalid_properties.push("invalid value for 'fixed_term_definition', fixed_term_definition cannot be nil.")
      end

      if @expiry_behaviour.nil?
        invalid_properties.push("invalid value for 'expiry_behaviour', expiry_behaviour cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @product_rate_plan_as_of_time.nil?
        invalid_properties.push("invalid value for 'product_rate_plan_as_of_time', product_rate_plan_as_of_time cannot be nil.")
      end

      if @compound_uplift.nil?
        invalid_properties.push("invalid value for 'compound_uplift', compound_uplift cannot be nil.")
      end

      if @start_time.nil?
        invalid_properties.push("invalid value for 'start_time', start_time cannot be nil.")
      end

      if @expiry_time.nil?
        invalid_properties.push("invalid value for 'expiry_time', expiry_time cannot be nil.")
      end

      if @periods.nil?
        invalid_properties.push("invalid value for 'periods', periods cannot be nil.")
      end

      if @fixed_term_number.nil?
        invalid_properties.push("invalid value for 'fixed_term_number', fixed_term_number cannot be nil.")
      end

      if @deleted.nil?
        invalid_properties.push("invalid value for 'deleted', deleted cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @subscription_id.nil?
      return false if @organization_id.nil?
      return false if @fixed_term_definition_id.nil?
      return false if @fixed_term_definition.nil?
      return false if @expiry_behaviour.nil?
      expiry_behaviour_validator = EnumAttributeValidator.new('String', ["ExpireSubscription", "EvergreenSubscription", "RecurUplift", "RecurLatestPricing"])
      return false unless expiry_behaviour_validator.valid?(@expiry_behaviour)
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["NeedsAmendments", "Active", "Expired"])
      return false unless state_validator.valid?(@state)
      return false if @product_rate_plan_as_of_time.nil?
      return false if @compound_uplift.nil?
      return false if @start_time.nil?
      return false if @expiry_time.nil?
      return false if @periods.nil?
      return false if @fixed_term_number.nil?
      return false if @deleted.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] expiry_behaviour Object to be assigned
    def expiry_behaviour=(expiry_behaviour)
      validator = EnumAttributeValidator.new('String', ["ExpireSubscription", "EvergreenSubscription", "RecurUplift", "RecurLatestPricing"])
      unless validator.valid?(expiry_behaviour)
        fail ArgumentError, "invalid value for 'expiry_behaviour', must be one of #{validator.allowable_values}."
      end
      @expiry_behaviour = expiry_behaviour
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["NeedsAmendments", "Active", "Expired"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          id == o.id &&
          subscription_id == o.subscription_id &&
          organization_id == o.organization_id &&
          fixed_term_definition_id == o.fixed_term_definition_id &&
          fixed_term_definition == o.fixed_term_definition &&
          expiry_behaviour == o.expiry_behaviour &&
          state == o.state &&
          product_rate_plan_as_of_time == o.product_rate_plan_as_of_time &&
          compound_uplift == o.compound_uplift &&
          start_time == o.start_time &&
          expiry_time == o.expiry_time &&
          periods == o.periods &&
          fixed_term_number == o.fixed_term_number &&
          deleted == o.deleted
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, id, subscription_id, organization_id, fixed_term_definition_id, fixed_term_definition, expiry_behaviour, state, product_rate_plan_as_of_time, compound_uplift, start_time, expiry_time, periods, fixed_term_number, deleted].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
