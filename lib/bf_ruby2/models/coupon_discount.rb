=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # <p> A coupon discount specifies how and what will be deducted from the subscription's invoices. The target of a discount, i.e. an Unit of Measure, Pricing Component or the Invoice itself, depends on the information received: </p><dl class=\"dl-horizontal\"><dt>Pricing Component</dt><dd>One value must be defined between the name and the identifier of the pricing component. </dd><dt>Unit of Measure</dt><dd>One value must be defined between the name and the identifier of the unit of measure but no values for the pricing component.</dd><dt>Invoice</dt> If no values are defined.
  class CouponDiscount
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # { \"description\" : \"Name or ID of the pricing component to apply the discount to. If not set blank discount is applied at the invoice level.\", \"verbs\":[\"POST\"] }
    attr_accessor :pricing_component

    # { \"description\" : \"\", \"verbs\":[\"GET\"] }
    attr_accessor :pricing_component_name

    # { \"description\" : \"\", \"verbs\":[\"GET\"] }
    attr_accessor :pricing_component_id

    attr_accessor :unit_of_measure_name

    attr_accessor :unit_of_measure_id

    # { \"description\" : \"Number of units that are free for a pricing-component.\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :units_free

    # { \"description\" : \"Percentage to be discounted\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :percentage_discount

    # { \"description\" : \"Fixed monetary amount to be discounted\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :cash_discount


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'pricing_component' => :'pricingComponent',
        :'pricing_component_name' => :'pricingComponentName',
        :'pricing_component_id' => :'pricingComponentID',
        :'unit_of_measure_name' => :'unitOfMeasureName',
        :'unit_of_measure_id' => :'unitOfMeasureID',
        :'units_free' => :'unitsFree',
        :'percentage_discount' => :'percentageDiscount',
        :'cash_discount' => :'cashDiscount'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'pricing_component' => :'String',
        :'pricing_component_name' => :'String',
        :'pricing_component_id' => :'String',
        :'unit_of_measure_name' => :'String',
        :'unit_of_measure_id' => :'String',
        :'units_free' => :'Integer',
        :'percentage_discount' => :'Float',
        :'cash_discount' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'pricingComponent')
        self.pricing_component = attributes[:'pricingComponent']
      end

      if attributes.has_key?(:'pricingComponentName')
        self.pricing_component_name = attributes[:'pricingComponentName']
      end

      if attributes.has_key?(:'pricingComponentID')
        self.pricing_component_id = attributes[:'pricingComponentID']
      end

      if attributes.has_key?(:'unitOfMeasureName')
        self.unit_of_measure_name = attributes[:'unitOfMeasureName']
      end

      if attributes.has_key?(:'unitOfMeasureID')
        self.unit_of_measure_id = attributes[:'unitOfMeasureID']
      end

      if attributes.has_key?(:'unitsFree')
        self.units_free = attributes[:'unitsFree']
      end

      if attributes.has_key?(:'percentageDiscount')
        self.percentage_discount = attributes[:'percentageDiscount']
      end

      if attributes.has_key?(:'cashDiscount')
        self.cash_discount = attributes[:'cashDiscount']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          pricing_component == o.pricing_component &&
          pricing_component_name == o.pricing_component_name &&
          pricing_component_id == o.pricing_component_id &&
          unit_of_measure_name == o.unit_of_measure_name &&
          unit_of_measure_id == o.unit_of_measure_id &&
          units_free == o.units_free &&
          percentage_discount == o.percentage_discount &&
          cash_discount == o.cash_discount
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, pricing_component, pricing_component_name, pricing_component_id, unit_of_measure_name, unit_of_measure_id, units_free, percentage_discount, cash_discount].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
