=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # An InvoiceLinePayment specifies the amount of a particular invoice payment used to pay part of &mdash; or the entirety of &mdash; the outstanding balance of the associated invoice line.
  class InvoiceLinePayment
    # {\"description\":\"PeriodStart of the charge with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :period_start

    # {\"description\":\"PeriodEnd of the charge with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :period_end

    # {\"description\":\"The date when the associated payment was received.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :payment_received

    # {\"description\":\"The date when the associated payment was refunded.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :refund_received

    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # {\"description\":\"ID of the InvoiceLinePayment.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :id

    # {\"description\":\"ID of the organization associated with the InvoiceLinePayment.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :organization_id

    # {\"description\":\"ID of the Payment used upon this InvoiceLinePayment's invoice line.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :payment_id

    # {\"description\":\"Reference with which the original payment transaction can be looked up in its gateway.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :gateway_original_payment_reference

    # {\"description\":\"Reference with which the refund transaction for the payment can be looked up in its gateway.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :gateway_refund_payment_reference

    # {\"description\":\"ID of the invoice to which this InvoiceLinePayment's invoice line belongs.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :aggregated_invoice_id

    # {\"description\":\"ID of the invoice line toward which this InvoiceLinePayment contributes payment.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :aggregated_invoice_line_id

    # {\"description\":\"ID of the InvoicePayment with which this InvoiceLinePayment is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :invoice_payment_id

    # {\"description\":\"The currency of the payment &mdash; specified by a three-character ISO 4217 currency code.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :currency

    # {\"description\":\"Payment gateway through which the payment was made.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :gateway

    # {\"description\":\"The amount paid &mdash; through credit or otherwise &mdash; toward this invoice line.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :nominal_amount

    # {\"description\":\"The amount paid &mdash; through real money &mdash; toward this invoice line.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :actual_amount

    # {\"description\":\"The monetary amount refunded toward this invoice line.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :refunded_amount

    # {\"description\":\"ID of the PricingComponent with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :pricing_component_id

    # {\"description\":\"Name of the PricingComponent with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :pricing_component_name

    # {\"description\":\"ID of the ProductRatePlan with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_rate_plan_id

    # {\"description\":\"Internal name of the ProductRatePlan with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_rate_plan_name

    # {\"description\":\"Public name of the ProductRatePlan with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_rate_plan_name_public

    # {\"description\":\"ID of the Product with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_id

    # {\"description\":\"Internal name of the Product with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_name

    # {\"description\":\"Public name of the Product with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :product_name_public

    # {\"description\":\"ID of the Subscription with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :subscription_id

    # {\"description\":\"ID of the Account with which this InvoiceLinePayment's invoice line is associated.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :account_id

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'period_start' => :'periodStart',
        :'period_end' => :'periodEnd',
        :'payment_received' => :'paymentReceived',
        :'refund_received' => :'refundReceived',
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'id' => :'id',
        :'organization_id' => :'organizationID',
        :'payment_id' => :'paymentID',
        :'gateway_original_payment_reference' => :'gatewayOriginalPaymentReference',
        :'gateway_refund_payment_reference' => :'gatewayRefundPaymentReference',
        :'aggregated_invoice_id' => :'aggregatedInvoiceID',
        :'aggregated_invoice_line_id' => :'aggregatedInvoiceLineID',
        :'invoice_payment_id' => :'invoicePaymentID',
        :'currency' => :'currency',
        :'gateway' => :'gateway',
        :'nominal_amount' => :'nominalAmount',
        :'actual_amount' => :'actualAmount',
        :'refunded_amount' => :'refundedAmount',
        :'pricing_component_id' => :'pricingComponentID',
        :'pricing_component_name' => :'pricingComponentName',
        :'product_rate_plan_id' => :'productRatePlanID',
        :'product_rate_plan_name' => :'productRatePlanName',
        :'product_rate_plan_name_public' => :'productRatePlanNamePublic',
        :'product_id' => :'productID',
        :'product_name' => :'productName',
        :'product_name_public' => :'productNamePublic',
        :'subscription_id' => :'subscriptionID',
        :'account_id' => :'accountID'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'period_start' => :'DateTime',
        :'period_end' => :'DateTime',
        :'payment_received' => :'DateTime',
        :'refund_received' => :'DateTime',
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'id' => :'String',
        :'organization_id' => :'String',
        :'payment_id' => :'String',
        :'gateway_original_payment_reference' => :'String',
        :'gateway_refund_payment_reference' => :'String',
        :'aggregated_invoice_id' => :'String',
        :'aggregated_invoice_line_id' => :'String',
        :'invoice_payment_id' => :'String',
        :'currency' => :'String',
        :'gateway' => :'String',
        :'nominal_amount' => :'Float',
        :'actual_amount' => :'Float',
        :'refunded_amount' => :'Float',
        :'pricing_component_id' => :'String',
        :'pricing_component_name' => :'String',
        :'product_rate_plan_id' => :'String',
        :'product_rate_plan_name' => :'String',
        :'product_rate_plan_name_public' => :'String',
        :'product_id' => :'String',
        :'product_name' => :'String',
        :'product_name_public' => :'String',
        :'subscription_id' => :'String',
        :'account_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'periodStart')
        self.period_start = attributes[:'periodStart']
      end

      if attributes.has_key?(:'periodEnd')
        self.period_end = attributes[:'periodEnd']
      end

      if attributes.has_key?(:'paymentReceived')
        self.payment_received = attributes[:'paymentReceived']
      end

      if attributes.has_key?(:'refundReceived')
        self.refund_received = attributes[:'refundReceived']
      end

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'paymentID')
        self.payment_id = attributes[:'paymentID']
      end

      if attributes.has_key?(:'gatewayOriginalPaymentReference')
        self.gateway_original_payment_reference = attributes[:'gatewayOriginalPaymentReference']
      end

      if attributes.has_key?(:'gatewayRefundPaymentReference')
        self.gateway_refund_payment_reference = attributes[:'gatewayRefundPaymentReference']
      end

      if attributes.has_key?(:'aggregatedInvoiceID')
        self.aggregated_invoice_id = attributes[:'aggregatedInvoiceID']
      end

      if attributes.has_key?(:'aggregatedInvoiceLineID')
        self.aggregated_invoice_line_id = attributes[:'aggregatedInvoiceLineID']
      end

      if attributes.has_key?(:'invoicePaymentID')
        self.invoice_payment_id = attributes[:'invoicePaymentID']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'gateway')
        self.gateway = attributes[:'gateway']
      end

      if attributes.has_key?(:'nominalAmount')
        self.nominal_amount = attributes[:'nominalAmount']
      end

      if attributes.has_key?(:'actualAmount')
        self.actual_amount = attributes[:'actualAmount']
      end

      if attributes.has_key?(:'refundedAmount')
        self.refunded_amount = attributes[:'refundedAmount']
      end

      if attributes.has_key?(:'pricingComponentID')
        self.pricing_component_id = attributes[:'pricingComponentID']
      end

      if attributes.has_key?(:'pricingComponentName')
        self.pricing_component_name = attributes[:'pricingComponentName']
      end

      if attributes.has_key?(:'productRatePlanID')
        self.product_rate_plan_id = attributes[:'productRatePlanID']
      end

      if attributes.has_key?(:'productRatePlanName')
        self.product_rate_plan_name = attributes[:'productRatePlanName']
      end

      if attributes.has_key?(:'productRatePlanNamePublic')
        self.product_rate_plan_name_public = attributes[:'productRatePlanNamePublic']
      end

      if attributes.has_key?(:'productID')
        self.product_id = attributes[:'productID']
      end

      if attributes.has_key?(:'productName')
        self.product_name = attributes[:'productName']
      end

      if attributes.has_key?(:'productNamePublic')
        self.product_name_public = attributes[:'productNamePublic']
      end

      if attributes.has_key?(:'subscriptionID')
        self.subscription_id = attributes[:'subscriptionID']
      end

      if attributes.has_key?(:'accountID')
        self.account_id = attributes[:'accountID']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @period_start.nil?
        invalid_properties.push("invalid value for 'period_start', period_start cannot be nil.")
      end

      if @period_end.nil?
        invalid_properties.push("invalid value for 'period_end', period_end cannot be nil.")
      end

      if @payment_received.nil?
        invalid_properties.push("invalid value for 'payment_received', payment_received cannot be nil.")
      end

      if @refund_received.nil?
        invalid_properties.push("invalid value for 'refund_received', refund_received cannot be nil.")
      end

      if @organization_id.nil?
        invalid_properties.push("invalid value for 'organization_id', organization_id cannot be nil.")
      end

      if @payment_id.nil?
        invalid_properties.push("invalid value for 'payment_id', payment_id cannot be nil.")
      end

      if @gateway_original_payment_reference.nil?
        invalid_properties.push("invalid value for 'gateway_original_payment_reference', gateway_original_payment_reference cannot be nil.")
      end

      if @gateway_refund_payment_reference.nil?
        invalid_properties.push("invalid value for 'gateway_refund_payment_reference', gateway_refund_payment_reference cannot be nil.")
      end

      if @aggregated_invoice_id.nil?
        invalid_properties.push("invalid value for 'aggregated_invoice_id', aggregated_invoice_id cannot be nil.")
      end

      if @aggregated_invoice_line_id.nil?
        invalid_properties.push("invalid value for 'aggregated_invoice_line_id', aggregated_invoice_line_id cannot be nil.")
      end

      if @invoice_payment_id.nil?
        invalid_properties.push("invalid value for 'invoice_payment_id', invoice_payment_id cannot be nil.")
      end

      if @currency.nil?
        invalid_properties.push("invalid value for 'currency', currency cannot be nil.")
      end

      if @gateway.nil?
        invalid_properties.push("invalid value for 'gateway', gateway cannot be nil.")
      end

      if @nominal_amount.nil?
        invalid_properties.push("invalid value for 'nominal_amount', nominal_amount cannot be nil.")
      end

      if @actual_amount.nil?
        invalid_properties.push("invalid value for 'actual_amount', actual_amount cannot be nil.")
      end

      if @refunded_amount.nil?
        invalid_properties.push("invalid value for 'refunded_amount', refunded_amount cannot be nil.")
      end

      if @pricing_component_id.nil?
        invalid_properties.push("invalid value for 'pricing_component_id', pricing_component_id cannot be nil.")
      end

      if @pricing_component_name.nil?
        invalid_properties.push("invalid value for 'pricing_component_name', pricing_component_name cannot be nil.")
      end

      if @product_rate_plan_id.nil?
        invalid_properties.push("invalid value for 'product_rate_plan_id', product_rate_plan_id cannot be nil.")
      end

      if @product_rate_plan_name.nil?
        invalid_properties.push("invalid value for 'product_rate_plan_name', product_rate_plan_name cannot be nil.")
      end

      if @product_rate_plan_name_public.nil?
        invalid_properties.push("invalid value for 'product_rate_plan_name_public', product_rate_plan_name_public cannot be nil.")
      end

      if @product_id.nil?
        invalid_properties.push("invalid value for 'product_id', product_id cannot be nil.")
      end

      if @product_name.nil?
        invalid_properties.push("invalid value for 'product_name', product_name cannot be nil.")
      end

      if @product_name_public.nil?
        invalid_properties.push("invalid value for 'product_name_public', product_name_public cannot be nil.")
      end

      if @subscription_id.nil?
        invalid_properties.push("invalid value for 'subscription_id', subscription_id cannot be nil.")
      end

      if @account_id.nil?
        invalid_properties.push("invalid value for 'account_id', account_id cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @period_start.nil?
      return false if @period_end.nil?
      return false if @payment_received.nil?
      return false if @refund_received.nil?
      return false if @organization_id.nil?
      return false if @payment_id.nil?
      return false if @gateway_original_payment_reference.nil?
      return false if @gateway_refund_payment_reference.nil?
      return false if @aggregated_invoice_id.nil?
      return false if @aggregated_invoice_line_id.nil?
      return false if @invoice_payment_id.nil?
      return false if @currency.nil?
      return false if @gateway.nil?
      gateway_validator = EnumAttributeValidator.new('String', ["cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash"])
      return false unless gateway_validator.valid?(@gateway)
      return false if @nominal_amount.nil?
      return false if @actual_amount.nil?
      return false if @refunded_amount.nil?
      return false if @pricing_component_id.nil?
      return false if @pricing_component_name.nil?
      return false if @product_rate_plan_id.nil?
      return false if @product_rate_plan_name.nil?
      return false if @product_rate_plan_name_public.nil?
      return false if @product_id.nil?
      return false if @product_name.nil?
      return false if @product_name_public.nil?
      return false if @subscription_id.nil?
      return false if @account_id.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] gateway Object to be assigned
    def gateway=(gateway)
      validator = EnumAttributeValidator.new('String', ["cybersource_token", "card_vault", "paypal_simple", "locustworld", "free", "coupon", "credit_note", "stripe", "braintree", "balanced", "paypal", "billforward_test", "offline", "trial", "stripeACH", "authorizeNet", "spreedly", "sagePay", "trustCommerce", "payvision", "kash"])
      unless validator.valid?(gateway)
        fail ArgumentError, "invalid value for 'gateway', must be one of #{validator.allowable_values}."
      end
      @gateway = gateway
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          period_start == o.period_start &&
          period_end == o.period_end &&
          payment_received == o.payment_received &&
          refund_received == o.refund_received &&
          created == o.created &&
          changed_by == o.changed_by &&
          id == o.id &&
          organization_id == o.organization_id &&
          payment_id == o.payment_id &&
          gateway_original_payment_reference == o.gateway_original_payment_reference &&
          gateway_refund_payment_reference == o.gateway_refund_payment_reference &&
          aggregated_invoice_id == o.aggregated_invoice_id &&
          aggregated_invoice_line_id == o.aggregated_invoice_line_id &&
          invoice_payment_id == o.invoice_payment_id &&
          currency == o.currency &&
          gateway == o.gateway &&
          nominal_amount == o.nominal_amount &&
          actual_amount == o.actual_amount &&
          refunded_amount == o.refunded_amount &&
          pricing_component_id == o.pricing_component_id &&
          pricing_component_name == o.pricing_component_name &&
          product_rate_plan_id == o.product_rate_plan_id &&
          product_rate_plan_name == o.product_rate_plan_name &&
          product_rate_plan_name_public == o.product_rate_plan_name_public &&
          product_id == o.product_id &&
          product_name == o.product_name &&
          product_name_public == o.product_name_public &&
          subscription_id == o.subscription_id &&
          account_id == o.account_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [period_start, period_end, payment_received, refund_received, created, changed_by, id, organization_id, payment_id, gateway_original_payment_reference, gateway_refund_payment_reference, aggregated_invoice_id, aggregated_invoice_line_id, invoice_payment_id, currency, gateway, nominal_amount, actual_amount, refunded_amount, pricing_component_id, pricing_component_name, product_rate_plan_id, product_rate_plan_name, product_rate_plan_name_public, product_id, product_name, product_name_public, subscription_id, account_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
