=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module Bfwd
  # [Warning: for use only in PCI-compliant environments; for more information, <a href=\"mailto:support@billforward.net\">contact us</a> regarding provisioning of your own on-premise BillForward instance] This entity is for specifying raw credit card details, to be captured into the Braintree vault.
  class BraintreeCaptureRequest
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # {\"description\":\"ID of the BillForward Organization within which the requested PaymentMethod should be created. If omitted, this will be auto-populated using your authentication credentials.\",\"verbs\":[\"POST\"]}
    attr_accessor :organization_id

    # {\"description\":\"ID of the BillForward Account with which you would like to associate the created payment method.<br>If omitted, BillForward will associate the created PaymentMethod with a newly-created Account, whose Profile details will be populated using billing information from the funding instrument.\",\"verbs\":[\"POST\"]}
    attr_accessor :account_id

    # {\"default\":false,\"description\":\"Whether the PaymentMethod produced by this request should be elected as the 'default' payment method for the concerned BillForward Account. Whichever PaymentMethod is elected as an Account's default payment method, will be consulted whenever payment is demanded of that Account (i.e. upon the execution of any of the Account's invoices).\",\"verbs\":[\"POST\"]}
    attr_accessor :default_payment_method

    # {\"description\":\"Name of the person who holds the credit card being captured.\",\"verbs\":[\"POST\"]}
    attr_accessor :cardholder_name

    # {\"description\":\"Number of the credit card being captured.\",\"verbs\":[\"POST\"]}
    attr_accessor :card_number

    # {\"description\":\"Expiration month of the credit card being captured, formatted MM.\",\"verbs\":[\"POST\"]}
    attr_accessor :expiry_month

    # {\"description\":\"Expiration year of the credit card being captured, formatted YYYY or YY.\",\"verbs\":[\"POST\"]}
    attr_accessor :expiry_year

    # {\"description\":\"3 or 4 digit card verification value assigned to the credit card being captured.\",\"verbs\":[\"POST\"]}
    attr_accessor :cvv

    # {\"description\":\"(Required when vaulting a PayPal payment method; otherwise optional)<br>A JSON string providing information about the device your customer used to fill out the card capture form. This information is inserted into your form by <a href=\\\"https://developers.braintreepayments.com/javascript+node/guides/advanced-fraud-tools/client-side\\\">braintree-data.js</a> &mdash; if and only if you use Braintree's drop-in form integrations. You should ideally provide it if you have one (it aids with fraud detection), but it is only mandatory in the case of PayPal payment method vaulting.\",\"verbs\":[\"POST\"]}
    attr_accessor :device_data

    # {\"description\":\"Braintree <a href=\\\"https://articles.braintreepayments.com/control-panel/important-gateway-credentials\\\">Merchant account ID</a> with which you wish for the captured funding instrument to transact. Within your Braintree gateway, you can have multiple merchant accounts to process transactions for different businesses or currencies. If you have a single merchant account, it is not necessary to specify a merchant account ID in your API requests. If you have multiple merchant accounts and choose not to specify the merchant account ID, all requests will process through your default merchant account.\",\"verbs\":[\"POST\"]}
    attr_accessor :merchant_account_id

    # {\"description\":\"IP address of the customer providing the details of the credit card to be captured.\",\"verbs\":[\"POST\"]}
    attr_accessor :ip_address

    # {\"description\":\"Country of the IP address of the customer providing the details of the credit card to be captured.\",\"verbs\":[\"POST\"]}
    attr_accessor :ip_address_country


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'organization_id' => :'organizationID',
        :'account_id' => :'accountID',
        :'default_payment_method' => :'defaultPaymentMethod',
        :'cardholder_name' => :'cardholderName',
        :'card_number' => :'cardNumber',
        :'expiry_month' => :'expiryMonth',
        :'expiry_year' => :'expiryYear',
        :'cvv' => :'cvv',
        :'device_data' => :'deviceData',
        :'merchant_account_id' => :'merchantAccountId',
        :'ip_address' => :'ipAddress',
        :'ip_address_country' => :'ipAddressCountry'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'organization_id' => :'String',
        :'account_id' => :'String',
        :'default_payment_method' => :'BOOLEAN',
        :'cardholder_name' => :'String',
        :'card_number' => :'String',
        :'expiry_month' => :'String',
        :'expiry_year' => :'String',
        :'cvv' => :'String',
        :'device_data' => :'String',
        :'merchant_account_id' => :'String',
        :'ip_address' => :'String',
        :'ip_address_country' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'accountID')
        self.account_id = attributes[:'accountID']
      end

      if attributes.has_key?(:'defaultPaymentMethod')
        self.default_payment_method = attributes[:'defaultPaymentMethod']
      else
        self.default_payment_method = false
      end

      if attributes.has_key?(:'cardholderName')
        self.cardholder_name = attributes[:'cardholderName']
      end

      if attributes.has_key?(:'cardNumber')
        self.card_number = attributes[:'cardNumber']
      end

      if attributes.has_key?(:'expiryMonth')
        self.expiry_month = attributes[:'expiryMonth']
      end

      if attributes.has_key?(:'expiryYear')
        self.expiry_year = attributes[:'expiryYear']
      end

      if attributes.has_key?(:'cvv')
        self.cvv = attributes[:'cvv']
      end

      if attributes.has_key?(:'deviceData')
        self.device_data = attributes[:'deviceData']
      end

      if attributes.has_key?(:'merchantAccountId')
        self.merchant_account_id = attributes[:'merchantAccountId']
      end

      if attributes.has_key?(:'ipAddress')
        self.ip_address = attributes[:'ipAddress']
      end

      if attributes.has_key?(:'ipAddressCountry')
        self.ip_address_country = attributes[:'ipAddressCountry']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @cardholder_name.nil?
      return false if @card_number.nil?
      return false if @expiry_month.nil?
      return false if @expiry_year.nil?
      return false if @cvv.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          organization_id == o.organization_id &&
          account_id == o.account_id &&
          default_payment_method == o.default_payment_method &&
          cardholder_name == o.cardholder_name &&
          card_number == o.card_number &&
          expiry_month == o.expiry_month &&
          expiry_year == o.expiry_year &&
          cvv == o.cvv &&
          device_data == o.device_data &&
          merchant_account_id == o.merchant_account_id &&
          ip_address == o.ip_address &&
          ip_address_country == o.ip_address_country
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, organization_id, account_id, default_payment_method, cardholder_name, card_number, expiry_month, expiry_year, cvv, device_data, merchant_account_id, ip_address, ip_address_country].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
