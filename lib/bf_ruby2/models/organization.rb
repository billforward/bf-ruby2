=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require 'date'

module Bfwd
  # Organization within which all your BillForward interactions are scoped.
  class Organization
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # { \"description\" : \"ID of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :id

    # { \"description\" : \"A shortcode for the organization. This is used as a short reference code for use when referring to the organization, by default this is set to the organizations name.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :customer_code

    # { \"description\" : \"The name of the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :name

    # { \"description\" : \"Indicates if an organization has been retired. If an organization has been retired it can still be retrieved using the appropriate flag on API requests.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :deleted

    # { \"description\" : \"The WebHooks associated with the organization. These are the end-points where notifications are sent. WebHooks are added, updated and removed from the organization. Thus to add a WebHook, the webhook must be defined on this property of the organization and then the organization updated. To update a WebHook the same procedure must be followed, first retrieving the organization followed by updating the appropriate WebHook, finally the organization is updated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :webhooks

    attr_accessor :_alias

    # { \"description\" : \"The OAuth2 clients associated with the organization. In most cases an organization would not have any clients associated with their account. In the case of an APP developer, a clients would exist per an application they have developed. To further understand clients please see the client, OAuth2 API and APP development documentation.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :clients

    # { \"description\" : \"The dunning-lines associated with the organization. Dunning lines are used as re-try logic for invoices to attempt to reconcile the payment.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :dunning_lines

    # { \"description\" : \"The taxation-strategies associated with the organization. Taxation-strategies may be linked to product-rate-plans to specify how their tax should be calculated.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :taxation_strategies

    # { \"description\" : \"The card-vault gateways associated with the organization.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :organization_gateways

    # { \"description\" : \"Stores the organizations 3rd party API keys which may be used by the system for payment gateway integration etc.\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :api_configurations


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'id' => :'id',
        :'customer_code' => :'customerCode',
        :'name' => :'name',
        :'deleted' => :'deleted',
        :'webhooks' => :'webhooks',
        :'_alias' => :'alias',
        :'clients' => :'clients',
        :'dunning_lines' => :'dunningLines',
        :'taxation_strategies' => :'taxationStrategies',
        :'organization_gateways' => :'organizationGateways',
        :'api_configurations' => :'apiConfigurations'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'id' => :'String',
        :'customer_code' => :'String',
        :'name' => :'String',
        :'deleted' => :'BOOLEAN',
        :'webhooks' => :'Array<MutableBillingEntity>',
        :'_alias' => :'Array<ModelAlias>',
        :'clients' => :'Array<Client>',
        :'dunning_lines' => :'Array<DunningLine>',
        :'taxation_strategies' => :'Array<MutableBillingEntity>',
        :'organization_gateways' => :'Array<MutableBillingEntity>',
        :'api_configurations' => :'Array<MutableBillingEntity>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'customerCode')
        self.customer_code = attributes[:'customerCode']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      else
        self.deleted = false
      end

      if attributes.has_key?(:'webhooks')
        if (value = attributes[:'webhooks']).is_a?(Array)
          self.webhooks = value
        end
      end

      if attributes.has_key?(:'alias')
        if (value = attributes[:'alias']).is_a?(Array)
          self._alias = value
        end
      end

      if attributes.has_key?(:'clients')
        if (value = attributes[:'clients']).is_a?(Array)
          self.clients = value
        end
      end

      if attributes.has_key?(:'dunningLines')
        if (value = attributes[:'dunningLines']).is_a?(Array)
          self.dunning_lines = value
        end
      end

      if attributes.has_key?(:'taxationStrategies')
        if (value = attributes[:'taxationStrategies']).is_a?(Array)
          self.taxation_strategies = value
        end
      end

      if attributes.has_key?(:'organizationGateways')
        if (value = attributes[:'organizationGateways']).is_a?(Array)
          self.organization_gateways = value
        end
      end

      if attributes.has_key?(:'apiConfigurations')
        if (value = attributes[:'apiConfigurations']).is_a?(Array)
          self.api_configurations = value
        end
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @customer_code.nil?
      return false if @name.nil?
      return false if @deleted.nil?
      return false if @webhooks.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          id == o.id &&
          customer_code == o.customer_code &&
          name == o.name &&
          deleted == o.deleted &&
          webhooks == o.webhooks &&
          _alias == o._alias &&
          clients == o.clients &&
          dunning_lines == o.dunning_lines &&
          taxation_strategies == o.taxation_strategies &&
          organization_gateways == o.organization_gateways &&
          api_configurations == o.api_configurations
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, id, customer_code, name, deleted, webhooks, _alias, clients, dunning_lines, taxation_strategies, organization_gateways, api_configurations].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /^Array<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /^(true|t|yes|y|1)$/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
