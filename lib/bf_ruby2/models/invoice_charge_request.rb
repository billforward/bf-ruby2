=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # Request object for generating invoices for a subscription's every outstanding charge.
  class InvoiceChargeRequest
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # {\"default\":false,\"description\":\"Outstanding charges for which invoices will be generated:<br><span class=\\\"label label-default\\\">true</span> &mdash; Include charges marked with 'Aggregated' `invoicingType` (i.e. charges that would otherwise be included anyway in the next naturally-occurring invoice)<br><span class=\\\"label label-default\\\">false</span> &mdash; Exclude charges marked with 'Aggregated' `invoicingType` (i.e. prefer that these charges be included instead on the next naturally-occurring invoice).\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :include_aggregated

    # {\"default\":false,\"description\":\"Outstanding charges for which invoices will be generated:<br><span class=\\\"label label-default\\\">true</span> &mdash; Include those charges raised with 'no invoice' specified (i.e. charges against the subscription) &mdash; as well as charges raised against some specific invoice.<br><span class=\\\"label label-default\\\">false</span> &mdash; Include only charges raised against some specific invoice.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :include_invoiced_charges_only

    # {\"default\":null (invoice is raised in its default initial state),\"description\":\"Initial state with which any invoices will be generated.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :invoice_state

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'include_aggregated' => :'includeAggregated',
        :'include_invoiced_charges_only' => :'includeInvoicedChargesOnly',
        :'invoice_state' => :'invoiceState'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'include_aggregated' => :'BOOLEAN',
        :'include_invoiced_charges_only' => :'BOOLEAN',
        :'invoice_state' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'includeAggregated')
        self.include_aggregated = attributes[:'includeAggregated']
      else
        self.include_aggregated = false
      end

      if attributes.has_key?(:'includeInvoicedChargesOnly')
        self.include_invoiced_charges_only = attributes[:'includeInvoicedChargesOnly']
      else
        self.include_invoiced_charges_only = false
      end

      if attributes.has_key?(:'invoiceState')
        self.invoice_state = attributes[:'invoiceState']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      invoice_state_validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      return false unless invoice_state_validator.valid?(@invoice_state)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_state Object to be assigned
    def invoice_state=(invoice_state)
      validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      unless validator.valid?(invoice_state)
        fail ArgumentError, "invalid value for 'invoice_state', must be one of #{validator.allowable_values}."
      end
      @invoice_state = invoice_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          include_aggregated == o.include_aggregated &&
          include_invoiced_charges_only == o.include_invoiced_charges_only &&
          invoice_state == o.invoice_state
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, include_aggregated, include_invoiced_charges_only, invoice_state].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
