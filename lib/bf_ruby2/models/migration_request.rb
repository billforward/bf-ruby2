=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # Request object for producing migrating a subscription.
  class MigrationRequest
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # {\"description\":\"Name to which the subscription will change upon successful migration.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :next_subscription_name

    # {\"description\":\"Description to which the subscription will change upon successful migration.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :next_subscription_description

    # {\"description\":\"The product to which the subscription will be migrated.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :product

    # {\"description\":\"The rate plan (of some product) to which the subscription will be migrated.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :product_rate_plan

    # {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"The strategy for how to raise invoices for charges caused by this migration.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing these charges.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add these charges to the next invoice which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :invoicing_type

    # {\"description\":\"List of pricing components and quantities thereof to be consumed in the new rate plan.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :mappings

    # {\"default\":\"DifferenceProRated\",\"description\":\"Pricing behaviour defines how migration charges are calculated.<br><span class=\\\"label label-default\\\">DifferenceProRated</span> &mdash; Calculate the difference between in-advance charges of the existing and new rate-plan, then pro-rate based on time remaining.<br><span class=\\\"label label-default\\\">None</span> &mdash; Set the migration charge as zero cost.<br><span class=\\\"label label-default\\\">Full</span> &mdash; Set the costs as the total of the new rate-plan's in-advance charges.<br><span class=\\\"label label-default\\\">Difference</span> &mdash; The same calculation as in <span class=\\\"label label-default\\\">DifferenceProRated</span>, but with no pro-ration applied.<br><span class=\\\"label label-default\\\">ProRated</span> &mdash; When moving to a rate-plan of the same duration: Pro-rates the in-advance charges of the new rate-plan.<br>When moving to a rate-plan of a different duration: A credit-note will be issued for the price of any remaining time on the existing plan's billing period.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :pricing_behaviour

    # {\"default\":\"false\",\"description\":\"Calculate the effects of migration but do not actually perform a migration.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :dry_run

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'next_subscription_name' => :'nextSubscriptionName',
        :'next_subscription_description' => :'nextSubscriptionDescription',
        :'product' => :'product',
        :'product_rate_plan' => :'productRatePlan',
        :'invoicing_type' => :'invoicingType',
        :'mappings' => :'mappings',
        :'pricing_behaviour' => :'pricingBehaviour',
        :'dry_run' => :'dryRun'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'next_subscription_name' => :'String',
        :'next_subscription_description' => :'String',
        :'product' => :'String',
        :'product_rate_plan' => :'String',
        :'invoicing_type' => :'String',
        :'mappings' => :'Array<PricingComponentMigrationValue>',
        :'pricing_behaviour' => :'String',
        :'dry_run' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'nextSubscriptionName')
        self.next_subscription_name = attributes[:'nextSubscriptionName']
      end

      if attributes.has_key?(:'nextSubscriptionDescription')
        self.next_subscription_description = attributes[:'nextSubscriptionDescription']
      end

      if attributes.has_key?(:'product')
        self.product = attributes[:'product']
      end

      if attributes.has_key?(:'productRatePlan')
        self.product_rate_plan = attributes[:'productRatePlan']
      end

      if attributes.has_key?(:'invoicingType')
        self.invoicing_type = attributes[:'invoicingType']
      end

      if attributes.has_key?(:'mappings')
        if (value = attributes[:'mappings']).is_a?(Array)
          self.mappings = value
        end
      end

      if attributes.has_key?(:'pricingBehaviour')
        self.pricing_behaviour = attributes[:'pricingBehaviour']
      end

      if attributes.has_key?(:'dryRun')
        self.dry_run = attributes[:'dryRun']
      else
        self.dry_run = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @product_rate_plan.nil?
        invalid_properties.push("invalid value for 'product_rate_plan', product_rate_plan cannot be nil.")
      end

      if @invoicing_type.nil?
        invalid_properties.push("invalid value for 'invoicing_type', invoicing_type cannot be nil.")
      end

      if @pricing_behaviour.nil?
        invalid_properties.push("invalid value for 'pricing_behaviour', pricing_behaviour cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @product_rate_plan.nil?
      return false if @invoicing_type.nil?
      invoicing_type_validator = EnumAttributeValidator.new('String', ["Immediate", "Aggregated"])
      return false unless invoicing_type_validator.valid?(@invoicing_type)
      return false if @pricing_behaviour.nil?
      pricing_behaviour_validator = EnumAttributeValidator.new('String', ["None", "Full", "Difference", "DifferenceProRated", "ProRated"])
      return false unless pricing_behaviour_validator.valid?(@pricing_behaviour)
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoicing_type Object to be assigned
    def invoicing_type=(invoicing_type)
      validator = EnumAttributeValidator.new('String', ["Immediate", "Aggregated"])
      unless validator.valid?(invoicing_type)
        fail ArgumentError, "invalid value for 'invoicing_type', must be one of #{validator.allowable_values}."
      end
      @invoicing_type = invoicing_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] pricing_behaviour Object to be assigned
    def pricing_behaviour=(pricing_behaviour)
      validator = EnumAttributeValidator.new('String', ["None", "Full", "Difference", "DifferenceProRated", "ProRated"])
      unless validator.valid?(pricing_behaviour)
        fail ArgumentError, "invalid value for 'pricing_behaviour', must be one of #{validator.allowable_values}."
      end
      @pricing_behaviour = pricing_behaviour
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          next_subscription_name == o.next_subscription_name &&
          next_subscription_description == o.next_subscription_description &&
          product == o.product &&
          product_rate_plan == o.product_rate_plan &&
          invoicing_type == o.invoicing_type &&
          mappings == o.mappings &&
          pricing_behaviour == o.pricing_behaviour &&
          dry_run == o.dry_run
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, next_subscription_name, next_subscription_description, product, product_rate_plan, invoicing_type, mappings, pricing_behaviour, dry_run].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
