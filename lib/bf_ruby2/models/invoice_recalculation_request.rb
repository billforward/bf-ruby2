=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # Request object for recalculating an invoice.
  class InvoiceRecalculationRequest
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # {\"default\":\"RecalculateAsLatestSubscriptionVersion\",\"description\":\"On plan change a subscription may have outstanding invoices.If the value of the invoice needs to be changed it can either be calculated via the new or old plan. <span class=\\\"label label-default\\\">RecalculateAsLatestSubscriptionVersion</span> calculates as the original plan and <span class=\\\"label label-default\\\">RecalculateAsCurrentSubscriptionVersion</span> as the new plan\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :recalculation_behaviour

    # {\"default\":\"Pending\",\"description\":\"State of the invoice once recalculated\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :new_state

    # {\"default\":true,\"description\":\"Only include charges which are already associated with the invoice. For example the subscription may have pending charges which can be added to the invoice on recalculation by setting this value to false. Note settings this value to true may cause new invoice line itemsto the invoice\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :only_invoice_associated_charges

    # {\"default\":\"false\",\"description\":\"Calculate the invoice but do not store or attempt payment\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :dry_run

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'recalculation_behaviour' => :'recalculationBehaviour',
        :'new_state' => :'newState',
        :'only_invoice_associated_charges' => :'onlyInvoiceAssociatedCharges',
        :'dry_run' => :'dryRun'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'recalculation_behaviour' => :'String',
        :'new_state' => :'String',
        :'only_invoice_associated_charges' => :'BOOLEAN',
        :'dry_run' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'recalculationBehaviour')
        self.recalculation_behaviour = attributes[:'recalculationBehaviour']
      end

      if attributes.has_key?(:'newState')
        self.new_state = attributes[:'newState']
      end

      if attributes.has_key?(:'onlyInvoiceAssociatedCharges')
        self.only_invoice_associated_charges = attributes[:'onlyInvoiceAssociatedCharges']
      else
        self.only_invoice_associated_charges = false
      end

      if attributes.has_key?(:'dryRun')
        self.dry_run = attributes[:'dryRun']
      else
        self.dry_run = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @recalculation_behaviour.nil?
        invalid_properties.push("invalid value for 'recalculation_behaviour', recalculation_behaviour cannot be nil.")
      end

      if @new_state.nil?
        invalid_properties.push("invalid value for 'new_state', new_state cannot be nil.")
      end

      if @only_invoice_associated_charges.nil?
        invalid_properties.push("invalid value for 'only_invoice_associated_charges', only_invoice_associated_charges cannot be nil.")
      end

      if @dry_run.nil?
        invalid_properties.push("invalid value for 'dry_run', dry_run cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @recalculation_behaviour.nil?
      recalculation_behaviour_validator = EnumAttributeValidator.new('String', ["RecalculateAsLatestSubscriptionVersion", "RecalculateAsCurrentSubscriptionVersion"])
      return false unless recalculation_behaviour_validator.valid?(@recalculation_behaviour)
      return false if @new_state.nil?
      new_state_validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      return false unless new_state_validator.valid?(@new_state)
      return false if @only_invoice_associated_charges.nil?
      return false if @dry_run.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recalculation_behaviour Object to be assigned
    def recalculation_behaviour=(recalculation_behaviour)
      validator = EnumAttributeValidator.new('String', ["RecalculateAsLatestSubscriptionVersion", "RecalculateAsCurrentSubscriptionVersion"])
      unless validator.valid?(recalculation_behaviour)
        fail ArgumentError, "invalid value for 'recalculation_behaviour', must be one of #{validator.allowable_values}."
      end
      @recalculation_behaviour = recalculation_behaviour
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_state Object to be assigned
    def new_state=(new_state)
      validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      unless validator.valid?(new_state)
        fail ArgumentError, "invalid value for 'new_state', must be one of #{validator.allowable_values}."
      end
      @new_state = new_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          recalculation_behaviour == o.recalculation_behaviour &&
          new_state == o.new_state &&
          only_invoice_associated_charges == o.only_invoice_associated_charges &&
          dry_run == o.dry_run
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, recalculation_behaviour, new_state, only_invoice_associated_charges, dry_run].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
