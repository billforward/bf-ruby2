=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # Represents a monetary amount &mdash; or quantity consumed &mdash; attributed to some invoice or subscription.
  class SubscriptionCharge
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # {\"description\":\"The ID of the charge.\",\"verbs\":[\"GET\"]}
    attr_accessor :id

    # {\"description\":\"Customer-relationship-management ID of the charge.\",\"verbs\":[\"GET\",\"PUT\",\"POST\"]}
    attr_accessor :crm_id

    # {\"description\":\"ID of the account owning the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}
    attr_accessor :account_id

    # {\"description\":\"ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}
    attr_accessor :subscription_id

    # {\"description\":\"Version ID of the subscription for which the charge was generated.\",\"verbs\":[\"GET\",\"POST\"]}
    attr_accessor :subscription_version_id

    # {\"description\":\"ID of the invoice to which this charge applies (if the charge targets a specific invoice).\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :invoice_id

    # {\"description\":\"Friendly name given to the charge to help identify it.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}
    attr_accessor :name

    # {\"description\":\"Description given to the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}
    attr_accessor :description

    # {\"description\":\"Monetary amount of the charge &mdash; including any tax applied to the final amount.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :amount

    # {\"description\":\"Monetary amount of the charge &mdash; excluding any tax applied to the final amount.\",\"verbs\":[\"GET\"]}
    attr_accessor :amount_excluding_tax

    # { \"description\" : \"Currency of the invoice specified by a three character ISO 4217 currency code.\", \"verbs\":[\"GET\"] }
    attr_accessor :currency

    # {\"default\":\"(Now)\",\"description\":\"The time-beginning of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :period_start

    # {\"default\":\"(End of current period)\",\"description\":\"The time-ending of the interval to which the charge applies. This can be used to apply a charge across partial or multiple periods,to pro-rate its price.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :period_end

    # {\"description\":\"A type describing the nature of the charge.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :type

    # {\"default\":\"<span class=\\\"label label-default\\\">Aggregated</span>\",\"description\":\"The strategy for how this charge will raise invoices.<br><span class=\\\"label label-default\\\">Immediate</span> &mdash; Generate straight-away an invoice containing this charge.<br><span class=\\\"label label-default\\\">Aggregated</span> &mdash; Add this charge to the next invoice which is generated naturally &mdash; i.e. the invoice raised at the current period's end.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :invoicing_type

    # {\"default\":\"<span class=\\\"label label-default\\\">Pending</span>\",\"description\":\"The current state of the charge.\",\"verbs\":[\"POST\",\"GET\",\"PUT\"]}
    attr_accessor :state

    # {\"default\":\"<span class=\\\"label label-default\\\">Debit</span>\",\"description\":\"Whether this charge represents money given to or taken from the customer.<br><span class=\\\"label label-default\\\">Credit</span> &mdash; This is a charge for money given to the customer.<br><span class=\\\"label label-default\\\">Debit</span> &mdash; This is a charge for money taken from the customer.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :charge_type

    # {\"default\":\"(Empty string)\",\"description\":\"A human-readable explanation of how the value of the charge was calculated.\",\"verbs\":[\"GET\"]}
    attr_accessor :calculation

    # {\"default\":\"<span class=\\\"label label-default\\\">Rollover</span>\",\"description\":\"Defines the behaviour applied to any outstanding credit resulting from the application of the charge..<br><span class=\\\"label label-default\\\">Rollover</span> &mdash; Outstanding credit is returned to the accounts credit pool.<br><span class=\\\"label label-default\\\">Discard</span> &mdash; Outstanding credit is lost.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :remaining_credit_behaviour

    # {\"default\":\"false\",\"description\":\"(Applicable only if any of [`pricingComponentName`, `pricingComponentID`] are defined)<br>Whether the charge was created for a subscription whilst in a trial period.<br><span class=\\\"label label-default\\\">false</span> &mdash; This is a non-trial charge, so funds will be sought from the customer.<br><span class=\\\"label label-default\\\">true</span> &mdash; This is a trial charge, soThe charge can be considered 'Paid' without taking any funds from the customer.\",\"verbs\":[\"POST\",\"GET\"]}
    attr_accessor :trial

    # {\"description\":\"The version ID of the charge.\",\"verbs\":[\"GET\"]}
    attr_accessor :version_id

    # {\"description\":\"The version number of the charge. The first version of a charge is version number 1.\",\"verbs\":[\"GET\"]}
    attr_accessor :version_number

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'id' => :'id',
        :'crm_id' => :'crmID',
        :'account_id' => :'accountID',
        :'subscription_id' => :'subscriptionID',
        :'subscription_version_id' => :'subscriptionVersionID',
        :'invoice_id' => :'invoiceID',
        :'name' => :'name',
        :'description' => :'description',
        :'amount' => :'amount',
        :'amount_excluding_tax' => :'amountExcludingTax',
        :'currency' => :'currency',
        :'period_start' => :'periodStart',
        :'period_end' => :'periodEnd',
        :'type' => :'type',
        :'invoicing_type' => :'invoicingType',
        :'state' => :'state',
        :'charge_type' => :'chargeType',
        :'calculation' => :'calculation',
        :'remaining_credit_behaviour' => :'remainingCreditBehaviour',
        :'trial' => :'trial',
        :'version_id' => :'versionID',
        :'version_number' => :'versionNumber'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'id' => :'String',
        :'crm_id' => :'String',
        :'account_id' => :'String',
        :'subscription_id' => :'String',
        :'subscription_version_id' => :'String',
        :'invoice_id' => :'String',
        :'name' => :'String',
        :'description' => :'String',
        :'amount' => :'Float',
        :'amount_excluding_tax' => :'Float',
        :'currency' => :'String',
        :'period_start' => :'DateTime',
        :'period_end' => :'DateTime',
        :'type' => :'String',
        :'invoicing_type' => :'String',
        :'state' => :'String',
        :'charge_type' => :'String',
        :'calculation' => :'String',
        :'remaining_credit_behaviour' => :'String',
        :'trial' => :'BOOLEAN',
        :'version_id' => :'String',
        :'version_number' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'crmID')
        self.crm_id = attributes[:'crmID']
      end

      if attributes.has_key?(:'accountID')
        self.account_id = attributes[:'accountID']
      end

      if attributes.has_key?(:'subscriptionID')
        self.subscription_id = attributes[:'subscriptionID']
      end

      if attributes.has_key?(:'subscriptionVersionID')
        self.subscription_version_id = attributes[:'subscriptionVersionID']
      end

      if attributes.has_key?(:'invoiceID')
        self.invoice_id = attributes[:'invoiceID']
      end

      if attributes.has_key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.has_key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'amountExcludingTax')
        self.amount_excluding_tax = attributes[:'amountExcludingTax']
      end

      if attributes.has_key?(:'currency')
        self.currency = attributes[:'currency']
      end

      if attributes.has_key?(:'periodStart')
        self.period_start = attributes[:'periodStart']
      end

      if attributes.has_key?(:'periodEnd')
        self.period_end = attributes[:'periodEnd']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'invoicingType')
        self.invoicing_type = attributes[:'invoicingType']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'chargeType')
        self.charge_type = attributes[:'chargeType']
      end

      if attributes.has_key?(:'calculation')
        self.calculation = attributes[:'calculation']
      end

      if attributes.has_key?(:'remainingCreditBehaviour')
        self.remaining_credit_behaviour = attributes[:'remainingCreditBehaviour']
      end

      if attributes.has_key?(:'trial')
        self.trial = attributes[:'trial']
      else
        self.trial = false
      end

      if attributes.has_key?(:'versionID')
        self.version_id = attributes[:'versionID']
      end

      if attributes.has_key?(:'versionNumber')
        self.version_number = attributes[:'versionNumber']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @invoicing_type.nil?
        invalid_properties.push("invalid value for 'invoicing_type', invoicing_type cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @charge_type.nil?
        invalid_properties.push("invalid value for 'charge_type', charge_type cannot be nil.")
      end

      if @remaining_credit_behaviour.nil?
        invalid_properties.push("invalid value for 'remaining_credit_behaviour', remaining_credit_behaviour cannot be nil.")
      end

      if @version_number.nil?
        invalid_properties.push("invalid value for 'version_number', version_number cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["Setup", "Upgrade", "Manual", "ProductRatePlanMigration", "Arrears", "Advance", "Coupon", "Usage", "PricingComponent"])
      return false unless type_validator.valid?(@type)
      return false if @invoicing_type.nil?
      invoicing_type_validator = EnumAttributeValidator.new('String', ["Immediate", "Aggregated"])
      return false unless invoicing_type_validator.valid?(@invoicing_type)
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["Voided", "Pending", "AwaitingPayment", "Paid", "Failed"])
      return false unless state_validator.valid?(@state)
      return false if @charge_type.nil?
      charge_type_validator = EnumAttributeValidator.new('String', ["Credit", "Debit"])
      return false unless charge_type_validator.valid?(@charge_type)
      return false if @remaining_credit_behaviour.nil?
      remaining_credit_behaviour_validator = EnumAttributeValidator.new('String', ["Rollover", "Discard"])
      return false unless remaining_credit_behaviour_validator.valid?(@remaining_credit_behaviour)
      return false if @version_number.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["Setup", "Upgrade", "Manual", "ProductRatePlanMigration", "Arrears", "Advance", "Coupon", "Usage", "PricingComponent"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoicing_type Object to be assigned
    def invoicing_type=(invoicing_type)
      validator = EnumAttributeValidator.new('String', ["Immediate", "Aggregated"])
      unless validator.valid?(invoicing_type)
        fail ArgumentError, "invalid value for 'invoicing_type', must be one of #{validator.allowable_values}."
      end
      @invoicing_type = invoicing_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["Voided", "Pending", "AwaitingPayment", "Paid", "Failed"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] charge_type Object to be assigned
    def charge_type=(charge_type)
      validator = EnumAttributeValidator.new('String', ["Credit", "Debit"])
      unless validator.valid?(charge_type)
        fail ArgumentError, "invalid value for 'charge_type', must be one of #{validator.allowable_values}."
      end
      @charge_type = charge_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] remaining_credit_behaviour Object to be assigned
    def remaining_credit_behaviour=(remaining_credit_behaviour)
      validator = EnumAttributeValidator.new('String', ["Rollover", "Discard"])
      unless validator.valid?(remaining_credit_behaviour)
        fail ArgumentError, "invalid value for 'remaining_credit_behaviour', must be one of #{validator.allowable_values}."
      end
      @remaining_credit_behaviour = remaining_credit_behaviour
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          id == o.id &&
          crm_id == o.crm_id &&
          account_id == o.account_id &&
          subscription_id == o.subscription_id &&
          subscription_version_id == o.subscription_version_id &&
          invoice_id == o.invoice_id &&
          name == o.name &&
          description == o.description &&
          amount == o.amount &&
          amount_excluding_tax == o.amount_excluding_tax &&
          currency == o.currency &&
          period_start == o.period_start &&
          period_end == o.period_end &&
          type == o.type &&
          invoicing_type == o.invoicing_type &&
          state == o.state &&
          charge_type == o.charge_type &&
          calculation == o.calculation &&
          remaining_credit_behaviour == o.remaining_credit_behaviour &&
          trial == o.trial &&
          version_id == o.version_id &&
          version_number == o.version_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, id, crm_id, account_id, subscription_id, subscription_version_id, invoice_id, name, description, amount, amount_excluding_tax, currency, period_start, period_end, type, invoicing_type, state, charge_type, calculation, remaining_credit_behaviour, trial, version_id, version_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
