=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd
  # User
  class User
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # {\"description\":\"ID of the user\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :id

    # {\"description\":\"ID of the Organization to which the User belongs.\",\"verbs\":[\"GET\",\"POST\"]}
    attr_accessor :organization_id

    # {\"description\":\"Passwords associated with the user. A user must have one currently active password to login.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :password

    # {\"description\":\"Usernames associated with the user. A user may have more than one username currently active. Usernames are enforced to be formatted as e-mail addresses.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :username

    # {\"description\":\"The UTC DateTime when a password reset would no longer be valid with the current code.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :password_reset_valid_till

    attr_accessor :bf_admin

    # {\"description\":\"Whether the User has expired.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :account_non_expired

    # {\"description\":\"Is the User locked.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :account_non_locked

    # {\"description\":\"Are the User credentials expired.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :credentials_non_expired

    # {\"description\":\"Is the User enabled.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :enabled

    # {\"description\":\"The timezone used when displaying time series data to the user.\",\"verbs\":[\"POST\",\"PUT\",\"GET\"]}
    attr_accessor :timezone


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'id' => :'id',
        :'organization_id' => :'organizationID',
        :'password' => :'password',
        :'username' => :'username',
        :'password_reset_valid_till' => :'passwordResetValidTill',
        :'bf_admin' => :'bfAdmin',
        :'account_non_expired' => :'accountNonExpired',
        :'account_non_locked' => :'accountNonLocked',
        :'credentials_non_expired' => :'credentialsNonExpired',
        :'enabled' => :'enabled',
        :'timezone' => :'timezone'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'id' => :'String',
        :'organization_id' => :'String',
        :'password' => :'Array<Password>',
        :'username' => :'Array<Username>',
        :'password_reset_valid_till' => :'DateTime',
        :'bf_admin' => :'BOOLEAN',
        :'account_non_expired' => :'BOOLEAN',
        :'account_non_locked' => :'BOOLEAN',
        :'credentials_non_expired' => :'BOOLEAN',
        :'enabled' => :'BOOLEAN',
        :'timezone' => :'TimeZone'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'password')
        if (value = attributes[:'password']).is_a?(Array)
          self.password = value
        end
      end

      if attributes.has_key?(:'username')
        if (value = attributes[:'username']).is_a?(Array)
          self.username = value
        end
      end

      if attributes.has_key?(:'passwordResetValidTill')
        self.password_reset_valid_till = attributes[:'passwordResetValidTill']
      end

      if attributes.has_key?(:'bfAdmin')
        self.bf_admin = attributes[:'bfAdmin']
      else
        self.bf_admin = false
      end

      if attributes.has_key?(:'accountNonExpired')
        self.account_non_expired = attributes[:'accountNonExpired']
      else
        self.account_non_expired = false
      end

      if attributes.has_key?(:'accountNonLocked')
        self.account_non_locked = attributes[:'accountNonLocked']
      else
        self.account_non_locked = false
      end

      if attributes.has_key?(:'credentialsNonExpired')
        self.credentials_non_expired = attributes[:'credentialsNonExpired']
      else
        self.credentials_non_expired = false
      end

      if attributes.has_key?(:'enabled')
        self.enabled = attributes[:'enabled']
      else
        self.enabled = false
      end

      if attributes.has_key?(:'timezone')
        self.timezone = attributes[:'timezone']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @organization_id.nil?
        invalid_properties.push("invalid value for 'organization_id', organization_id cannot be nil.")
      end

      if @password.nil?
        invalid_properties.push("invalid value for 'password', password cannot be nil.")
      end

      if @username.nil?
        invalid_properties.push("invalid value for 'username', username cannot be nil.")
      end

      if @password_reset_valid_till.nil?
        invalid_properties.push("invalid value for 'password_reset_valid_till', password_reset_valid_till cannot be nil.")
      end

      if @account_non_expired.nil?
        invalid_properties.push("invalid value for 'account_non_expired', account_non_expired cannot be nil.")
      end

      if @account_non_locked.nil?
        invalid_properties.push("invalid value for 'account_non_locked', account_non_locked cannot be nil.")
      end

      if @credentials_non_expired.nil?
        invalid_properties.push("invalid value for 'credentials_non_expired', credentials_non_expired cannot be nil.")
      end

      if @enabled.nil?
        invalid_properties.push("invalid value for 'enabled', enabled cannot be nil.")
      end

      if @timezone.nil?
        invalid_properties.push("invalid value for 'timezone', timezone cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @organization_id.nil?
      return false if @password.nil?
      return false if @username.nil?
      return false if @password_reset_valid_till.nil?
      return false if @account_non_expired.nil?
      return false if @account_non_locked.nil?
      return false if @credentials_non_expired.nil?
      return false if @enabled.nil?
      return false if @timezone.nil?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          id == o.id &&
          organization_id == o.organization_id &&
          password == o.password &&
          username == o.username &&
          password_reset_valid_till == o.password_reset_valid_till &&
          bf_admin == o.bf_admin &&
          account_non_expired == o.account_non_expired &&
          account_non_locked == o.account_non_locked &&
          credentials_non_expired == o.credentials_non_expired &&
          enabled == o.enabled &&
          timezone == o.timezone
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, id, organization_id, password, username, password_reset_valid_till, bf_admin, account_non_expired, account_non_locked, credentials_non_expired, enabled, timezone].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
