=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'date'

module Bfwd

  class InvoiceRecalculationAmendment
    # { \"description\" : \"The UTC DateTime when the object was created.\", \"verbs\":[] }
    attr_accessor :created

    # { \"description\" : \"ID of the user who last updated the entity.\", \"verbs\":[] }
    attr_accessor :changed_by

    # { \"description\" : \"The UTC DateTime when the object was last updated.\", \"verbs\":[] }
    attr_accessor :updated

    # { \"description\" : \"\", \"default\" : \"\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :type

    # { \"description\" : \"\", \"verbs\":[\"GET\"] }
    attr_accessor :id

    # { \"description\" : \"\", \"verbs\":[\"\"] }
    attr_accessor :organization_id

    # { \"description\" : \"\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :subscription_id

    # { \"description\" : \"Type of amendment\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :amendment_type

    # { \"description\" : \"When the amendment will run\", \"verbs\":[\"POST\",\"PUT\",\"GET\"] }
    attr_accessor :actioning_time

    # { \"description\" : \"The time the amendment completed.\", \"verbs\":[\"GET\"] }
    attr_accessor :actioned_time

    # Whether the subscription-amendment is: pending (to be actioned in the future), succeeded (actioning completed), failed (actioning was attempted but no effect was made) or discarded (the amendment had been cancelled before being actioned). Default: Pending
    attr_accessor :state

    # { \"description\" : \"Is the amendment deleted.\", \"verbs\":[\"GET\"] }
    attr_accessor :deleted

    # { \"description\" : \"Identifier of the invoice to recalcaulte\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :invoice_id

    # { \"description\" : \"The recalculation behaviour of the invoice\", \"default\" : \"RecalculateAsLatestSubscriptionVersion\", \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :recalculation_behaviour

    # { \"description\" : \"State of invoice once recalculated\", \"default\" : \"Pending\",  \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :new_invoice_state

    # { \"description\" : \"Only include charges which are already linked to the invoice being recalculated\", \"default\" : \"Pending\",  \"verbs\":[\"POST\",\"GET\"] }
    attr_accessor :include_invoiced_charges_only

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'created' => :'created',
        :'changed_by' => :'changedBy',
        :'updated' => :'updated',
        :'type' => :'@type',
        :'id' => :'id',
        :'organization_id' => :'organizationID',
        :'subscription_id' => :'subscriptionID',
        :'amendment_type' => :'amendmentType',
        :'actioning_time' => :'actioningTime',
        :'actioned_time' => :'actionedTime',
        :'state' => :'state',
        :'deleted' => :'deleted',
        :'invoice_id' => :'invoiceID',
        :'recalculation_behaviour' => :'recalculationBehaviour',
        :'new_invoice_state' => :'newInvoiceState',
        :'include_invoiced_charges_only' => :'includeInvoicedChargesOnly'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'created' => :'DateTime',
        :'changed_by' => :'String',
        :'updated' => :'DateTime',
        :'type' => :'String',
        :'id' => :'String',
        :'organization_id' => :'String',
        :'subscription_id' => :'String',
        :'amendment_type' => :'String',
        :'actioning_time' => :'DateTime',
        :'actioned_time' => :'DateTime',
        :'state' => :'String',
        :'deleted' => :'BOOLEAN',
        :'invoice_id' => :'String',
        :'recalculation_behaviour' => :'String',
        :'new_invoice_state' => :'String',
        :'include_invoiced_charges_only' => :'BOOLEAN'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'created')
        self.created = attributes[:'created']
      end

      if attributes.has_key?(:'changedBy')
        self.changed_by = attributes[:'changedBy']
      end

      if attributes.has_key?(:'updated')
        self.updated = attributes[:'updated']
      end

      if attributes.has_key?(:'@type')
        self.type = attributes[:'@type']
      end

      if attributes.has_key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.has_key?(:'organizationID')
        self.organization_id = attributes[:'organizationID']
      end

      if attributes.has_key?(:'subscriptionID')
        self.subscription_id = attributes[:'subscriptionID']
      end

      if attributes.has_key?(:'amendmentType')
        self.amendment_type = attributes[:'amendmentType']
      end

      if attributes.has_key?(:'actioningTime')
        self.actioning_time = attributes[:'actioningTime']
      end

      if attributes.has_key?(:'actionedTime')
        self.actioned_time = attributes[:'actionedTime']
      end

      if attributes.has_key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.has_key?(:'deleted')
        self.deleted = attributes[:'deleted']
      else
        self.deleted = false
      end

      if attributes.has_key?(:'invoiceID')
        self.invoice_id = attributes[:'invoiceID']
      end

      if attributes.has_key?(:'recalculationBehaviour')
        self.recalculation_behaviour = attributes[:'recalculationBehaviour']
      end

      if attributes.has_key?(:'newInvoiceState')
        self.new_invoice_state = attributes[:'newInvoiceState']
      end

      if attributes.has_key?(:'includeInvoicedChargesOnly')
        self.include_invoiced_charges_only = attributes[:'includeInvoicedChargesOnly']
      else
        self.include_invoiced_charges_only = false
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properies with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @type.nil?
        invalid_properties.push("invalid value for 'type', type cannot be nil.")
      end

      if @subscription_id.nil?
        invalid_properties.push("invalid value for 'subscription_id', subscription_id cannot be nil.")
      end

      if @amendment_type.nil?
        invalid_properties.push("invalid value for 'amendment_type', amendment_type cannot be nil.")
      end

      if @state.nil?
        invalid_properties.push("invalid value for 'state', state cannot be nil.")
      end

      if @deleted.nil?
        invalid_properties.push("invalid value for 'deleted', deleted cannot be nil.")
      end

      if @invoice_id.nil?
        invalid_properties.push("invalid value for 'invoice_id', invoice_id cannot be nil.")
      end

      if @recalculation_behaviour.nil?
        invalid_properties.push("invalid value for 'recalculation_behaviour', recalculation_behaviour cannot be nil.")
      end

      if @new_invoice_state.nil?
        invalid_properties.push("invalid value for 'new_invoice_state', new_invoice_state cannot be nil.")
      end

      if @include_invoiced_charges_only.nil?
        invalid_properties.push("invalid value for 'include_invoiced_charges_only', include_invoiced_charges_only cannot be nil.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @type.nil?
      type_validator = EnumAttributeValidator.new('String', ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"])
      return false unless type_validator.valid?(@type)
      return false if @subscription_id.nil?
      return false if @amendment_type.nil?
      amendment_type_validator = EnumAttributeValidator.new('String', ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"])
      return false unless amendment_type_validator.valid?(@amendment_type)
      return false if @state.nil?
      state_validator = EnumAttributeValidator.new('String', ["Pending", "Succeeded", "Failed", "Discarded"])
      return false unless state_validator.valid?(@state)
      return false if @deleted.nil?
      return false if @invoice_id.nil?
      return false if @recalculation_behaviour.nil?
      recalculation_behaviour_validator = EnumAttributeValidator.new('String', ["RecalculateAsLatestSubscriptionVersion", "RecalculateAsCurrentSubscriptionVersion"])
      return false unless recalculation_behaviour_validator.valid?(@recalculation_behaviour)
      return false if @new_invoice_state.nil?
      new_invoice_state_validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      return false unless new_invoice_state_validator.valid?(@new_invoice_state)
      return false if @include_invoiced_charges_only.nil?
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] type Object to be assigned
    def type=(type)
      validator = EnumAttributeValidator.new('String', ["InvoiceOutstandingChargesAmendment", "IssueInvoiceAmendment", "PricingComponentValueAmendment", "InvoiceRecalculationAmendment", "CancellationAmendment", "InvoiceNextExecutionAttemptAmendment", "FixedTermExpiryAmendment", "EndTrialAmendment", "ProductRatePlanMigrationAmendment", "AmendmentDiscardAmendment", "UpdateComponentValueAmendment", "ServiceEndAmendment", "ResumeSubscriptionAmendment", "CreateSubscriptionChargeAmendment", "TimerAmendment"])
      unless validator.valid?(type)
        fail ArgumentError, "invalid value for 'type', must be one of #{validator.allowable_values}."
      end
      @type = type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] amendment_type Object to be assigned
    def amendment_type=(amendment_type)
      validator = EnumAttributeValidator.new('String', ["InvoiceNextExecutionAttempt", "Cancellation", "PricingComponentValue", "AmendmentDiscard", "Compound", "FixedTermExpiry", "InvoiceRecalculation", "EndTrial", "InvoiceOutstandingCharges", "IssueInvoice", "ProductRatePlanMigration", "UpdateComponentValue", "ServiceEnd", "ResumeSubscription", "CreateSubscriptionCharge", "Timer"])
      unless validator.valid?(amendment_type)
        fail ArgumentError, "invalid value for 'amendment_type', must be one of #{validator.allowable_values}."
      end
      @amendment_type = amendment_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('String', ["Pending", "Succeeded", "Failed", "Discarded"])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for 'state', must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] recalculation_behaviour Object to be assigned
    def recalculation_behaviour=(recalculation_behaviour)
      validator = EnumAttributeValidator.new('String', ["RecalculateAsLatestSubscriptionVersion", "RecalculateAsCurrentSubscriptionVersion"])
      unless validator.valid?(recalculation_behaviour)
        fail ArgumentError, "invalid value for 'recalculation_behaviour', must be one of #{validator.allowable_values}."
      end
      @recalculation_behaviour = recalculation_behaviour
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] new_invoice_state Object to be assigned
    def new_invoice_state=(new_invoice_state)
      validator = EnumAttributeValidator.new('String', ["Paid", "Unpaid", "Pending", "Voided"])
      unless validator.valid?(new_invoice_state)
        fail ArgumentError, "invalid value for 'new_invoice_state', must be one of #{validator.allowable_values}."
      end
      @new_invoice_state = new_invoice_state
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          created == o.created &&
          changed_by == o.changed_by &&
          updated == o.updated &&
          type == o.type &&
          id == o.id &&
          organization_id == o.organization_id &&
          subscription_id == o.subscription_id &&
          amendment_type == o.amendment_type &&
          actioning_time == o.actioning_time &&
          actioned_time == o.actioned_time &&
          state == o.state &&
          deleted == o.deleted &&
          invoice_id == o.invoice_id &&
          recalculation_behaviour == o.recalculation_behaviour &&
          new_invoice_state == o.new_invoice_state &&
          include_invoiced_charges_only == o.include_invoiced_charges_only
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [created, changed_by, updated, type, id, organization_id, subscription_id, amendment_type, actioning_time, actioned_time, state, deleted, invoice_id, recalculation_behaviour, new_invoice_state, include_invoiced_charges_only].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = Bfwd.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
