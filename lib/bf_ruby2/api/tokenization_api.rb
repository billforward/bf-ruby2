=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require "uri"

module Bfwd
  class TokenizationApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
    # {\"nickname\":\"Authorized card capture\",\"response\":\"BFJSAuthCapture.html\",\"request\":\"BFJSAuthCapture.request.html\"}
    # @param auth_capture_request The auth capture request.
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethodPagedMetadata]
    def auth_capture(auth_capture_request, opts = {})
      data, _status_code, _headers = auth_capture_with_http_info(auth_capture_request, opts)
      return data
    end

    # [Note: this API can be invoked more simply by our client-side card capture library, &lt;a href&#x3D;\&quot;https://github.com/billforward/billforward-js\&quot;&gt;BillForward.js&lt;/a&gt;; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
    # {\&quot;nickname\&quot;:\&quot;Authorized card capture\&quot;,\&quot;response\&quot;:\&quot;BFJSAuthCapture.html\&quot;,\&quot;request\&quot;:\&quot;BFJSAuthCapture.request.html\&quot;}
    # @param auth_capture_request The auth capture request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def auth_capture_with_http_info(auth_capture_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.auth_capture ..."
      end
      # verify the required parameter 'auth_capture_request' is set
      if @api_client.config.client_side_validation && auth_capture_request.nil?
        fail ArgumentError, "Missing the required parameter 'auth_capture_request' when calling TokenizationApi.auth_capture"
      end
      # resource path
      local_var_path = "/tokenization/auth-capture"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml', 'application/xml', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(auth_capture_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#auth_capture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [Warning: for use only in PCI-compliant environments; for more information, <a href=\"mailto:support@billforward.net\">contact us</a> regarding provisioning of your own on-premise BillForward instance] Captures raw credit card details into Braintree's vault.
    # {\"nickname\":\"Braintree Tokenization\",\"response\":\"braintreeDirectTokenization.html\",\"request\":\"braintreeDirectTokenization.request.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [BraintreeCaptureRequest] :body 
    # @return [PaymentMethodPagedMetadata]
    def braintree_card_capture(opts = {})
      data, _status_code, _headers = braintree_card_capture_with_http_info(opts)
      return data
    end

    # [Warning: for use only in PCI-compliant environments; for more information, &lt;a href&#x3D;\&quot;mailto:support@billforward.net\&quot;&gt;contact us&lt;/a&gt; regarding provisioning of your own on-premise BillForward instance] Captures raw credit card details into Braintree&#39;s vault.
    # {\&quot;nickname\&quot;:\&quot;Braintree Tokenization\&quot;,\&quot;response\&quot;:\&quot;braintreeDirectTokenization.html\&quot;,\&quot;request\&quot;:\&quot;braintreeDirectTokenization.request.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [BraintreeCaptureRequest] :body 
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def braintree_card_capture_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.braintree_card_capture ..."
      end
      # resource path
      local_var_path = "/tokenization/braintree"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#braintree_card_capture\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [Note: this API is intended to be invoked by the PayVision servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
    # {\"nickname\":\"Generate PayVision iframe redirect\",\"response\":\"payVisionShoutV1.html\",\"request\":\"payVisionShoutV1.request.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_path 
    # @option opts [String] :id 
    # @return [String]
    def pay_vision_shout_v1(opts = {})
      data, _status_code, _headers = pay_vision_shout_v1_with_http_info(opts)
      return data
    end

    # [Note: this API is intended to be invoked by the PayVision servers -- they are BillForward&#39;s way of informing client-side of the result of card-capture from within an iframe] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
    # {\&quot;nickname\&quot;:\&quot;Generate PayVision iframe redirect\&quot;,\&quot;response\&quot;:\&quot;payVisionShoutV1.html\&quot;,\&quot;request\&quot;:\&quot;payVisionShoutV1.request.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [String] :resource_path 
    # @option opts [String] :id 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def pay_vision_shout_v1_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.pay_vision_shout_v1 ..."
      end
      # resource path
      local_var_path = "/tokenization/payvision-shout-v1"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["resourcePath"] = opts[:'resource_path'] if !opts[:'resource_path'].nil?
      form_params["id"] = opts[:'id'] if !opts[:'id'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#pay_vision_shout_v1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [Note: this API can be invoked more simply by our client-side card capture library, <a href=\"https://github.com/billforward/billforward-js\">BillForward.js</a>; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
    # {\"nickname\":\"Pre-authorize card capture\",\"response\":\"BFJSPreAuth.html\",\"request\":\"BFJSPreAuth.request.html\"}
    # @param pre_auth_request The auth request.
    # @param [Hash] opts the optional parameters
    # @return [TokenizationPreAuthPagedMetadata]
    def pre_auth(pre_auth_request, opts = {})
      data, _status_code, _headers = pre_auth_with_http_info(pre_auth_request, opts)
      return data
    end

    # [Note: this API can be invoked more simply by our client-side card capture library, &lt;a href&#x3D;\&quot;https://github.com/billforward/billforward-js\&quot;&gt;BillForward.js&lt;/a&gt;; you should not need to interact with this API manually unless you have particularly bespoke requirements] 
    # {\&quot;nickname\&quot;:\&quot;Pre-authorize card capture\&quot;,\&quot;response\&quot;:\&quot;BFJSPreAuth.html\&quot;,\&quot;request\&quot;:\&quot;BFJSPreAuth.request.html\&quot;}
    # @param pre_auth_request The auth request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenizationPreAuthPagedMetadata, Fixnum, Hash)>] TokenizationPreAuthPagedMetadata data, response status code and response headers
    def pre_auth_with_http_info(pre_auth_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.pre_auth ..."
      end
      # verify the required parameter 'pre_auth_request' is set
      if @api_client.config.client_side_validation && pre_auth_request.nil?
        fail ArgumentError, "Missing the required parameter 'pre_auth_request' when calling TokenizationApi.pre_auth"
      end
      # resource path
      local_var_path = "/tokenization/pre-auth"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml', 'application/xml', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(pre_auth_request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TokenizationPreAuthPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#pre_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of receiving a callback from a SagePay card capture operation, using SagePay's FORM Protocol, v3.0] Handles SagePay Notification.
    # {\"nickname\":\"Handle SagePay Notification\",\"response\":\"sagePayNotifyV3_00.html\",\"request\":\"sagePayNotifyV3_00.request.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @option opts [String] :bill_forward_url_root The URL through which BFJS connected to BillForward.
    # @option opts [String] :access_token The public token through which BFJS connected to BillForward.
    # @option opts [String] :vps_protocol 
    # @option opts [String] :tx_type 
    # @option opts [String] :vendor_tx_code 
    # @option opts [String] :status 
    # @option opts [String] :vps_tx_id 
    # @option opts [String] :card_type 
    # @option opts [String] :token 
    # @option opts [String] :status_detail 
    # @option opts [String] :last4_digits 
    # @option opts [String] :vps_signature 
    # @option opts [String] :expiry_date 
    # @return [String]
    def sage_pay_notify_v300(opts = {})
      data, _status_code, _headers = sage_pay_notify_v300_with_http_info(opts)
      return data
    end

    # [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward&#39;s way of receiving a callback from a SagePay card capture operation, using SagePay&#39;s FORM Protocol, v3.0] Handles SagePay Notification.
    # {\&quot;nickname\&quot;:\&quot;Handle SagePay Notification\&quot;,\&quot;response\&quot;:\&quot;sagePayNotifyV3_00.html\&quot;,\&quot;request\&quot;:\&quot;sagePayNotifyV3_00.request.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @option opts [String] :bill_forward_url_root The URL through which BFJS connected to BillForward.
    # @option opts [String] :access_token The public token through which BFJS connected to BillForward.
    # @option opts [String] :vps_protocol 
    # @option opts [String] :tx_type 
    # @option opts [String] :vendor_tx_code 
    # @option opts [String] :status 
    # @option opts [String] :vps_tx_id 
    # @option opts [String] :card_type 
    # @option opts [String] :token 
    # @option opts [String] :status_detail 
    # @option opts [String] :last4_digits 
    # @option opts [String] :vps_signature 
    # @option opts [String] :expiry_date 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sage_pay_notify_v300_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.sage_pay_notify_v300 ..."
      end
      # resource path
      local_var_path = "/tokenization/sagepay-notify-v3-00"

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'billForwardURLRoot'] = opts[:'bill_forward_url_root'] if !opts[:'bill_forward_url_root'].nil?
      query_params[:'access_token'] = opts[:'access_token'] if !opts[:'access_token'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/plain'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])

      # form parameters
      form_params = {}
      form_params["VPSProtocol"] = opts[:'vps_protocol'] if !opts[:'vps_protocol'].nil?
      form_params["TxType"] = opts[:'tx_type'] if !opts[:'tx_type'].nil?
      form_params["VendorTxCode"] = opts[:'vendor_tx_code'] if !opts[:'vendor_tx_code'].nil?
      form_params["Status"] = opts[:'status'] if !opts[:'status'].nil?
      form_params["VPSTxId"] = opts[:'vps_tx_id'] if !opts[:'vps_tx_id'].nil?
      form_params["CardType"] = opts[:'card_type'] if !opts[:'card_type'].nil?
      form_params["Token"] = opts[:'token'] if !opts[:'token'].nil?
      form_params["StatusDetail"] = opts[:'status_detail'] if !opts[:'status_detail'].nil?
      form_params["Last4Digits"] = opts[:'last4_digits'] if !opts[:'last4_digits'].nil?
      form_params["VPSSignature"] = opts[:'vps_signature'] if !opts[:'vps_signature'].nil?
      form_params["ExpiryDate"] = opts[:'expiry_date'] if !opts[:'expiry_date'].nil?

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#sage_pay_notify_v300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward's way of informing client-side of the result of card-capture from within an iframe, using SagePay's FORM Protocol, v3.0] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
    # {\"nickname\":\"Generate SagePay iframe redirect\",\"response\":\"sagePayShoutV3_00.html\",\"request\":\"sagePayShoutV3_00.request.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @option opts [String] :s 
    # @option opts [String] :t 
    # @option opts [String] :c 
    # @option opts [String] :e 
    # @option opts [String] :l 
    # @option opts [String] :d 
    # @return [String]
    def sage_pay_shout_v300(opts = {})
      data, _status_code, _headers = sage_pay_shout_v300_with_http_info(opts)
      return data
    end

    # [Note: this API is intended to be invoked by the SagePay servers -- they are BillForward&#39;s way of informing client-side of the result of card-capture from within an iframe, using SagePay&#39;s FORM Protocol, v3.0] Generates iframe to which customer will be directed upon success or failure. The iframe contains JavaScript which attempts to send a message to BillForward.js on the client-side, which will handle the result.
    # {\&quot;nickname\&quot;:\&quot;Generate SagePay iframe redirect\&quot;,\&quot;response\&quot;:\&quot;sagePayShoutV3_00.html\&quot;,\&quot;request\&quot;:\&quot;sagePayShoutV3_00.request.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the queryparameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @option opts [String] :s 
    # @option opts [String] :t 
    # @option opts [String] :c 
    # @option opts [String] :e 
    # @option opts [String] :l 
    # @option opts [String] :d 
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def sage_pay_shout_v300_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TokenizationApi.sage_pay_shout_v300 ..."
      end
      # resource path
      local_var_path = "/tokenization/sagepay-shout-v3-00"

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'s'] = opts[:'s'] if !opts[:'s'].nil?
      query_params[:'t'] = opts[:'t'] if !opts[:'t'].nil?
      query_params[:'c'] = opts[:'c'] if !opts[:'c'].nil?
      query_params[:'e'] = opts[:'e'] if !opts[:'e'].nil?
      query_params[:'l'] = opts[:'l'] if !opts[:'l'].nil?
      query_params[:'d'] = opts[:'d'] if !opts[:'d'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TokenizationApi#sage_pay_shout_v300\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
