=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Bfwd
  class PaymentmethodsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a payment-method.
    # {\"nickname\":\"Create a new payment method\",\"request\":\"createPaymentMethodRequest.html\",\"response\":\"createPaymentMethodResponse.html\"}
    # @param payment_method The payment-method object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethodPagedMetadata]
    def create_payment_method(payment_method, opts = {})
      data, _status_code, _headers = create_payment_method_with_http_info(payment_method, opts)
      return data
    end

    # Create a payment-method.
    # {\&quot;nickname\&quot;:\&quot;Create a new payment method\&quot;,\&quot;request\&quot;:\&quot;createPaymentMethodRequest.html\&quot;,\&quot;response\&quot;:\&quot;createPaymentMethodResponse.html\&quot;}
    # @param payment_method The payment-method object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def create_payment_method_with_http_info(payment_method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.create_payment_method ..."
      end
      # verify the required parameter 'payment_method' is set
      fail ArgumentError, "Missing the required parameter 'payment_method' when calling PaymentmethodsApi.create_payment_method" if payment_method.nil?
      # resource path
      local_var_path = "/payment-methods".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment_method)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#create_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the payment-method specified by the payment-method-ID parameter.
    # {\"nickname\":\"Delete payment method\",\"response\":\"deletePaymentMethod.html\"}
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [PaymentMethodPagedMetadata]
    def delete_payment_method(payment_method_id, opts = {})
      data, _status_code, _headers = delete_payment_method_with_http_info(payment_method_id, opts)
      return data
    end

    # Deletes the payment-method specified by the payment-method-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Delete payment method\&quot;,\&quot;response\&quot;:\&quot;deletePaymentMethod.html\&quot;}
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def delete_payment_method_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.delete_payment_method ..."
      end
      # verify the required parameter 'payment_method_id' is set
      fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentmethodsApi.delete_payment_method" if payment_method_id.nil?
      # resource path
      local_var_path = "/payment-methods/{payment-method-ID}".sub('{format}','json').sub('{' + 'payment-method-ID' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#delete_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of all payment-methods. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all payment methods\",\"response\":\"getPaymentMethodAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payment-methods to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentMethodPagedMetadata]
    def get_all_payment_methods(opts = {})
      data, _status_code, _headers = get_all_payment_methods_with_http_info(opts)
      return data
    end

    # Returns a collection of all payment-methods. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all payment methods\&quot;,\&quot;response\&quot;:\&quot;getPaymentMethodAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return.
    # @option opts [Integer] :records The maximum number of payment-methods to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def get_all_payment_methods_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.get_all_payment_methods ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payment-methods".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#get_all_payment_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of payment-methods, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by account\",\"response\":\"getPaymentMethodByAccount.html\"}
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payment-methods to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @option opts [BOOLEAN] :default_only Whether only the defualt payment method should be returned. (default to false)
    # @return [PaymentMethodPagedMetadata]
    def get_payment_method_by_account_id(account_id, opts = {})
      data, _status_code, _headers = get_payment_method_by_account_id_with_http_info(account_id, opts)
      return data
    end

    # Returns a collection of payment-methods, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by account\&quot;,\&quot;response\&quot;:\&quot;getPaymentMethodByAccount.html\&quot;}
    # @param account_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return.
    # @option opts [Integer] :records The maximum number of payment-methods to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :default_only Whether only the defualt payment method should be returned.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def get_payment_method_by_account_id_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.get_payment_method_by_account_id ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling PaymentmethodsApi.get_payment_method_by_account_id" if account_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payment-methods/account/{account-ID}".sub('{format}','json').sub('{' + 'account-ID' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'default_only'] = opts[:'default_only'] if !opts[:'default_only'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#get_payment_method_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single payment-method, specified by the payment-method-ID parameter.
    # {\"nickname\":\"Get existing payment method\",\"response\":\"getPaymentMethodByID.html\"}
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [PaymentMethodPagedMetadata]
    def get_payment_method_by_id(payment_method_id, opts = {})
      data, _status_code, _headers = get_payment_method_by_id_with_http_info(payment_method_id, opts)
      return data
    end

    # Returns a single payment-method, specified by the payment-method-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Get existing payment method\&quot;,\&quot;response\&quot;:\&quot;getPaymentMethodByID.html\&quot;}
    # @param payment_method_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def get_payment_method_by_id_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.get_payment_method_by_id ..."
      end
      # verify the required parameter 'payment_method_id' is set
      fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentmethodsApi.get_payment_method_by_id" if payment_method_id.nil?
      # resource path
      local_var_path = "/payment-methods/{payment-method-ID}".sub('{format}','json').sub('{' + 'payment-method-ID' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#get_payment_method_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single payment-method, specified by the linkID parameter.
    # {\"nickname\":\"Retrieve by subscription link\",\"response\":\"getPaymentMethodByLinkID.html\"}
    # @param link_id The link-id of the payment-method.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [PaymentMethodPagedMetadata]
    def get_payment_method_by_link_id(link_id, opts = {})
      data, _status_code, _headers = get_payment_method_by_link_id_with_http_info(link_id, opts)
      return data
    end

    # Returns a single payment-method, specified by the linkID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by subscription link\&quot;,\&quot;response\&quot;:\&quot;getPaymentMethodByLinkID.html\&quot;}
    # @param link_id The link-id of the payment-method.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def get_payment_method_by_link_id_with_http_info(link_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.get_payment_method_by_link_id ..."
      end
      # verify the required parameter 'link_id' is set
      fail ArgumentError, "Missing the required parameter 'link_id' when calling PaymentmethodsApi.get_payment_method_by_link_id" if link_id.nil?
      # resource path
      local_var_path = "/payment-methods/link-id/{linkID}".sub('{format}','json').sub('{' + 'linkID' + '}', link_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#get_payment_method_by_link_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of payment-methods, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by gateway\",\"response\":\"getPaymentMethodByGateway.html\"}
    # @param gateway The payment-method gateway which generated the payment-method.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payment-methods to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentMethodPagedMetadata]
    def get_payment_method_by_payment_gateway(gateway, opts = {})
      data, _status_code, _headers = get_payment_method_by_payment_gateway_with_http_info(gateway, opts)
      return data
    end

    # Returns a collection of payment-methods, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by gateway\&quot;,\&quot;response\&quot;:\&quot;getPaymentMethodByGateway.html\&quot;}
    # @param gateway The payment-method gateway which generated the payment-method.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment-method to return.
    # @option opts [Integer] :records The maximum number of payment-methods to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def get_payment_method_by_payment_gateway_with_http_info(gateway, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.get_payment_method_by_payment_gateway ..."
      end
      # verify the required parameter 'gateway' is set
      fail ArgumentError, "Missing the required parameter 'gateway' when calling PaymentmethodsApi.get_payment_method_by_payment_gateway" if gateway.nil?
      # verify enum value
      unless ['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(gateway)
        fail ArgumentError, "invalid value for 'gateway', must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payment-methods/gateway/{gateway}".sub('{format}','json').sub('{' + 'gateway' + '}', gateway.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#get_payment_method_by_payment_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a payment-method.
    # {\"nickname\":\"Update a payment-method\",\"request\":\"updatePaymentMethodRequest.html\",\"response\":\"updatePaymentMethodResponse.html\"}
    # @param payment_method The payment-method object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [PaymentMethodPagedMetadata]
    def update_payment_method(payment_method, opts = {})
      data, _status_code, _headers = update_payment_method_with_http_info(payment_method, opts)
      return data
    end

    # Update a payment-method.
    # {\&quot;nickname\&quot;:\&quot;Update a payment-method\&quot;,\&quot;request\&quot;:\&quot;updatePaymentMethodRequest.html\&quot;,\&quot;response\&quot;:\&quot;updatePaymentMethodResponse.html\&quot;}
    # @param payment_method The payment-method object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentMethodPagedMetadata, Fixnum, Hash)>] PaymentMethodPagedMetadata data, response status code and response headers
    def update_payment_method_with_http_info(payment_method, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentmethodsApi.update_payment_method ..."
      end
      # verify the required parameter 'payment_method' is set
      fail ArgumentError, "Missing the required parameter 'payment_method' when calling PaymentmethodsApi.update_payment_method" if payment_method.nil?
      # resource path
      local_var_path = "/payment-methods".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment_method)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentMethodPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentmethodsApi#update_payment_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
