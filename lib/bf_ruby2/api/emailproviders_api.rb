=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class EmailprovidersApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an email provider.
    # {\"nickname\":\"Create an email provider\",\"request\":\"createEmailProviderRequest.html\",\"response\":\"creatEmailProviderResponse.html\"}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [EmailProviderPagedMetadata]
    def create_email_provider(request, opts = {})
      data, _status_code, _headers = create_email_provider_with_http_info(request, opts)
      return data
    end

    # Create an email provider.
    # {\&quot;nickname\&quot;:\&quot;Create an email provider\&quot;,\&quot;request\&quot;:\&quot;createEmailProviderRequest.html\&quot;,\&quot;response\&quot;:\&quot;creatEmailProviderResponse.html\&quot;}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailProviderPagedMetadata, Fixnum, Hash)>] EmailProviderPagedMetadata data, response status code and response headers
    def create_email_provider_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailprovidersApi.create_email_provider ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling EmailprovidersApi.create_email_provider" if request.nil?
      # resource path
      local_var_path = "/email-providers".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailProviderPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailprovidersApi#create_email_provider\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a single email provider, specified by id or name parameter.
    # { \"nickname\" : \"delete\",\"response\" : \"deleteEmailProvider.html\"}
    # @param email_provider_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [EmailProviderPagedMetadata]
    def delete(email_provider_id, opts = {})
      data, _status_code, _headers = delete_with_http_info(email_provider_id, opts)
      return data
    end

    # Deletes a single email provider, specified by id or name parameter.
    # { \&quot;nickname\&quot; : \&quot;delete\&quot;,\&quot;response\&quot; : \&quot;deleteEmailProvider.html\&quot;}
    # @param email_provider_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(EmailProviderPagedMetadata, Fixnum, Hash)>] EmailProviderPagedMetadata data, response status code and response headers
    def delete_with_http_info(email_provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailprovidersApi.delete ..."
      end
      # verify the required parameter 'email_provider_id' is set
      fail ArgumentError, "Missing the required parameter 'email_provider_id' when calling EmailprovidersApi.delete" if email_provider_id.nil?
      # resource path
      local_var_path = "/email-providers/{email-provider-ID}".sub('{format}','json').sub('{' + 'email-provider-ID' + '}', email_provider_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailProviderPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailprovidersApi#delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of all email-providers. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all email providers\",\"response\":\"getEmailProvidersAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first email-provider to return. (default to 0)
    # @option opts [Integer] :records The maximum number of email-provider to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Include deleted email-providers (default to false)
    # @return [EmailProviderPagedMetadata]
    def get_all_email_providers(opts = {})
      data, _status_code, _headers = get_all_email_providers_with_http_info(opts)
      return data
    end

    # Returns a collection of all email-providers. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all email providers\&quot;,\&quot;response\&quot;:\&quot;getEmailProvidersAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first email-provider to return.
    # @option opts [Integer] :records The maximum number of email-provider to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Include deleted email-providers
    # @return [Array<(EmailProviderPagedMetadata, Fixnum, Hash)>] EmailProviderPagedMetadata data, response status code and response headers
    def get_all_email_providers_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailprovidersApi.get_all_email_providers ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/email-providers".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailProviderPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailprovidersApi#get_all_email_providers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single email provider, specified by the version-ID parameter.
    # { \"nickname\" : \"Retrieve by version\",\"response\" : \"getEmailProviderByID.html\"}
    # @param email_provider_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [BOOLEAN] :include_retired Include deleted email-providers (default to false)
    # @return [EmailProviderPagedMetadata]
    def get_email_by_provider_id(email_provider_id, opts = {})
      data, _status_code, _headers = get_email_by_provider_id_with_http_info(email_provider_id, opts)
      return data
    end

    # Retrieves a single email provider, specified by the version-ID parameter.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by version\&quot;,\&quot;response\&quot; : \&quot;getEmailProviderByID.html\&quot;}
    # @param email_provider_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [BOOLEAN] :include_retired Include deleted email-providers
    # @return [Array<(EmailProviderPagedMetadata, Fixnum, Hash)>] EmailProviderPagedMetadata data, response status code and response headers
    def get_email_by_provider_id_with_http_info(email_provider_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailprovidersApi.get_email_by_provider_id ..."
      end
      # verify the required parameter 'email_provider_id' is set
      fail ArgumentError, "Missing the required parameter 'email_provider_id' when calling EmailprovidersApi.get_email_by_provider_id" if email_provider_id.nil?
      # resource path
      local_var_path = "/email-providers/{email-provider-ID}".sub('{format}','json').sub('{' + 'email-provider-ID' + '}', email_provider_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailProviderPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailprovidersApi#get_email_by_provider_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
