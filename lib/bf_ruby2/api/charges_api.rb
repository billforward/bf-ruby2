=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Bfwd
  class ChargesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Recalculate a batch of charges.
    # {\"nickname\":\"Batch re-calculate charges\",\"request\":\"batchRecalculateChargeRequest.html\",\"response\":\"batchRecalculateChargeResponse.html\"}
    # @param request The batch charge request.
    # @param [Hash] opts the optional parameters
    # @return [RecalculateChargeBatchResponsePagedMetadata]
    def batch_recalculate_subscription_charge(request, opts = {})
      data, _status_code, _headers = batch_recalculate_subscription_charge_with_http_info(request, opts)
      return data
    end

    # Recalculate a batch of charges.
    # {\&quot;nickname\&quot;:\&quot;Batch re-calculate charges\&quot;,\&quot;request\&quot;:\&quot;batchRecalculateChargeRequest.html\&quot;,\&quot;response\&quot;:\&quot;batchRecalculateChargeResponse.html\&quot;}
    # @param request The batch charge request.
    # @param [Hash] opts the optional parameters
    # @return [Array<(RecalculateChargeBatchResponsePagedMetadata, Fixnum, Hash)>] RecalculateChargeBatchResponsePagedMetadata data, response status code and response headers
    def batch_recalculate_subscription_charge_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.batch_recalculate_subscription_charge ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ChargesApi.batch_recalculate_subscription_charge" if request.nil?
      # resource path
      local_var_path = "/charges/recalculate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RecalculateChargeBatchResponsePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#batch_recalculate_subscription_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of all charges. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve all charges\",\"response\":\"getChargeAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned. (default to false)
    # @return [SubscriptionChargePagedMetadata]
    def get_all_subscription_charges(opts = {})
      data, _status_code, _headers = get_all_subscription_charges_with_http_info(opts)
      return data
    end

    # Retrieves a collection of all charges. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve all charges\&quot;,\&quot;response\&quot;:\&quot;getChargeAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_all_subscription_charges_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.get_all_subscription_charges ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/charges".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#get_all_subscription_charges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of charges, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by account\",\"response\":\"getChargeByAccount.html\"}
    # @param account_id The string ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned. (default to false)
    # @return [SubscriptionChargePagedMetadata]
    def get_subscription_charge_by_account_id(account_id, opts = {})
      data, _status_code, _headers = get_subscription_charge_by_account_id_with_http_info(account_id, opts)
      return data
    end

    # Retrieves a collection of charges, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by account\&quot;,\&quot;response\&quot;:\&quot;getChargeByAccount.html\&quot;}
    # @param account_id The string ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_subscription_charge_by_account_id_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.get_subscription_charge_by_account_id ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ChargesApi.get_subscription_charge_by_account_id" if account_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/charges/account/{account-ID}".sub('{format}','json').sub('{' + 'account-ID' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#get_subscription_charge_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single charge, specified by the charge-id parameter.
    # {\"nickname\":\"Retrieve a charge\",\"response\":\"getChargeByID.html\"}
    # @param charge_id The unique string-ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned. (default to false)
    # @return [SubscriptionChargePagedMetadata]
    def get_subscription_charge_by_id(charge_id, opts = {})
      data, _status_code, _headers = get_subscription_charge_by_id_with_http_info(charge_id, opts)
      return data
    end

    # Retrieves a single charge, specified by the charge-id parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve a charge\&quot;,\&quot;response\&quot;:\&quot;getChargeByID.html\&quot;}
    # @param charge_id The unique string-ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_subscription_charge_by_id_with_http_info(charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.get_subscription_charge_by_id ..."
      end
      # verify the required parameter 'charge_id' is set
      fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargesApi.get_subscription_charge_by_id" if charge_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/charges/{charge-id}".sub('{format}','json').sub('{' + 'charge-id' + '}', charge_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#get_subscription_charge_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of charges, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by state\",\"response\":\"getChargeByState.html\"}
    # @param state The current state of the charge
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned. (default to false)
    # @return [SubscriptionChargePagedMetadata]
    def get_subscription_charge_by_state(state, opts = {})
      data, _status_code, _headers = get_subscription_charge_by_state_with_http_info(state, opts)
      return data
    end

    # Retrieves a collection of charges, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by state\&quot;,\&quot;response\&quot;:\&quot;getChargeByState.html\&quot;}
    # @param state The current state of the charge
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_subscription_charge_by_state_with_http_info(state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.get_subscription_charge_by_state ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling ChargesApi.get_subscription_charge_by_state" if state.nil?
      # verify enum value
      unless ['Voided', 'Pending', 'AwaitingPayment', 'Paid', 'Failed'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Voided, Pending, AwaitingPayment, Paid, Failed"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/charges/state/{state}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#get_subscription_charge_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single charge, specified by the version-ID parameter.
    # {\"nickname\":\"Retrieve by version\",\"response\":\"getChargeByVersionID.html\"}
    # @param version_id The version-ID of the charge.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [SubscriptionChargePagedMetadata]
    def get_subscription_charge_by_version_id(version_id, opts = {})
      data, _status_code, _headers = get_subscription_charge_by_version_id_with_http_info(version_id, opts)
      return data
    end

    # Retrieves a single charge, specified by the version-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by version\&quot;,\&quot;response\&quot;:\&quot;getChargeByVersionID.html\&quot;}
    # @param version_id The version-ID of the charge.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_subscription_charge_by_version_id_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.get_subscription_charge_by_version_id ..."
      end
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling ChargesApi.get_subscription_charge_by_version_id" if version_id.nil?
      # resource path
      local_var_path = "/charges/version/{version-ID}".sub('{format}','json').sub('{' + 'version-ID' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#get_subscription_charge_by_version_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recalculate a charge.
    # {\"nickname\":\"Re-calculate a charge\",\"request\":\"recalculateChargeRequest.html\",\"response\":\"recalculateChargeResponse.html\"}
    # @param charge_id Unique id of the charge.
    # @param charge The charge to be re-calculated.
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionChargePagedMetadata]
    def recalculate_subscription_charge(charge_id, charge, opts = {})
      data, _status_code, _headers = recalculate_subscription_charge_with_http_info(charge_id, charge, opts)
      return data
    end

    # Recalculate a charge.
    # {\&quot;nickname\&quot;:\&quot;Re-calculate a charge\&quot;,\&quot;request\&quot;:\&quot;recalculateChargeRequest.html\&quot;,\&quot;response\&quot;:\&quot;recalculateChargeResponse.html\&quot;}
    # @param charge_id Unique id of the charge.
    # @param charge The charge to be re-calculated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def recalculate_subscription_charge_with_http_info(charge_id, charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.recalculate_subscription_charge ..."
      end
      # verify the required parameter 'charge_id' is set
      fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargesApi.recalculate_subscription_charge" if charge_id.nil?
      # verify the required parameter 'charge' is set
      fail ArgumentError, "Missing the required parameter 'charge' when calling ChargesApi.recalculate_subscription_charge" if charge.nil?
      # resource path
      local_var_path = "/charges/{charge-ID}/recalculate".sub('{format}','json').sub('{' + 'charge-ID' + '}', charge_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(charge)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#recalculate_subscription_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Void the charge with the specified charge-ID.
    # {\"nickname\":\"Void charge\",\"response\":\"deleteCharge.html\"}
    # @param charge_id Unique id of the charge.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [SubscriptionChargePagedMetadata]
    def void_subscription_charge(charge_id, opts = {})
      data, _status_code, _headers = void_subscription_charge_with_http_info(charge_id, opts)
      return data
    end

    # Void the charge with the specified charge-ID.
    # {\&quot;nickname\&quot;:\&quot;Void charge\&quot;,\&quot;response\&quot;:\&quot;deleteCharge.html\&quot;}
    # @param charge_id Unique id of the charge.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def void_subscription_charge_with_http_info(charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ChargesApi.void_subscription_charge ..."
      end
      # verify the required parameter 'charge_id' is set
      fail ArgumentError, "Missing the required parameter 'charge_id' when calling ChargesApi.void_subscription_charge" if charge_id.nil?
      # resource path
      local_var_path = "/charges/{charge-id}".sub('{format}','json').sub('{' + 'charge-id' + '}', charge_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ChargesApi#void_subscription_charge\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
