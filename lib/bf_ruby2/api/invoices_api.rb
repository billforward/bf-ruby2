=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class InvoicesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Creates a charge on the specified invoice.
    # {\"nickname\":\"Add to invoice\",\"response\":\"addChargeToInvoice.html\",\"request\":\"addChargeToInvoiceRequest.html\"}
    # @param invoice_id ID of the invoice.
    # @param charge The charge request
    # @param [Hash] opts the optional parameters
    # @return [SubscriptionChargePagedMetadata]
    def add_charge_to_invoice(invoice_id, charge, opts = {})
      data, _status_code, _headers = add_charge_to_invoice_with_http_info(invoice_id, charge, opts)
      return data
    end

    # Creates a charge on the specified invoice.
    # {\&quot;nickname\&quot;:\&quot;Add to invoice\&quot;,\&quot;response\&quot;:\&quot;addChargeToInvoice.html\&quot;,\&quot;request\&quot;:\&quot;addChargeToInvoiceRequest.html\&quot;}
    # @param invoice_id ID of the invoice.
    # @param charge The charge request
    # @param [Hash] opts the optional parameters
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def add_charge_to_invoice_with_http_info(invoice_id, charge, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.add_charge_to_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.add_charge_to_invoice" if invoice_id.nil?
      # verify the required parameter 'charge' is set
      fail ArgumentError, "Missing the required parameter 'charge' when calling InvoicesApi.add_charge_to_invoice" if charge.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/charges".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(charge)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#add_charge_to_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Aggregate Invoices into to one parent Invoice
    # {\"nickname\":\"Aggregate invoices\",\"response\":\"AggregateResponse.html\",\"request\":\"AggregateRequest.html\"}
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def aggregate_invoices(request, opts = {})
      data, _status_code, _headers = aggregate_invoices_with_http_info(request, opts)
      return data
    end

    # Aggregate Invoices into to one parent Invoice
    # {\&quot;nickname\&quot;:\&quot;Aggregate invoices\&quot;,\&quot;response\&quot;:\&quot;AggregateResponse.html\&quot;,\&quot;request\&quot;:\&quot;AggregateRequest.html\&quot;}
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def aggregate_invoices_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.aggregate_invoices ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling InvoicesApi.aggregate_invoices" if request.nil?
      # resource path
      local_var_path = "/invoices/aggregate".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#aggregate_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Attempt payment for the outstanding value of an invoice
    # {\"nickname\":\"Execute invoice\",\"response\":\"executeInvoiceResponse.html\",\"request\":\"ExecuteInvoiceRequest.html\"}
    # @param invoice_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def execute_invoice(invoice_id, request, opts = {})
      data, _status_code, _headers = execute_invoice_with_http_info(invoice_id, request, opts)
      return data
    end

    # Attempt payment for the outstanding value of an invoice
    # {\&quot;nickname\&quot;:\&quot;Execute invoice\&quot;,\&quot;response\&quot;:\&quot;executeInvoiceResponse.html\&quot;,\&quot;request\&quot;:\&quot;ExecuteInvoiceRequest.html\&quot;}
    # @param invoice_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def execute_invoice_with_http_info(invoice_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.execute_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.execute_invoice" if invoice_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling InvoicesApi.execute_invoice" if request.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/execute".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#execute_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generates InvoiceLinePayments for all existing InvoicePayments.
    # { \"nickname\" : \"Generate InvoiceLinePayments\",\"response\" : \"Generate InvoiceLinePayments.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [InvoiceLinePaymentPagedMetadata]
    def generate_line_payments_for_all_invoices(opts = {})
      data, _status_code, _headers = generate_line_payments_for_all_invoices_with_http_info(opts)
      return data
    end

    # Generates InvoiceLinePayments for all existing InvoicePayments.
    # { \&quot;nickname\&quot; : \&quot;Generate InvoiceLinePayments\&quot;,\&quot;response\&quot; : \&quot;Generate InvoiceLinePayments.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def generate_line_payments_for_all_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.generate_line_payments_for_all_invoices ..."
      end
      # resource path
      local_var_path = "/invoices/generate-line-payments".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#generate_line_payments_for_all_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of all invoices. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve all invoices\",\"response\" : \"getInvoiceAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded. (default to true)
    # @option opts [String] :metadata 
    # @return [InvoicePagedMetadata]
    def get_all_invoices(opts = {})
      data, _status_code, _headers = get_all_invoices_with_http_info(opts)
      return data
    end

    # Retrieves a collection of all invoices. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve all invoices\&quot;,\&quot;response\&quot; : \&quot;getInvoiceAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded.
    # @option opts [String] :metadata 
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_all_invoices_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_all_invoices ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'exclude_children'] = opts[:'exclude_children'] if !opts[:'exclude_children'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_all_invoices\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of all invoices. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve all invoices\",\"response\" : \"getInvoiceAll.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_all_invoices_as_csv(opts = {})
      data, _status_code, _headers = get_all_invoices_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves a collection of all invoices. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve all invoices\&quot;,\&quot;response\&quot; : \&quot;getInvoiceAll.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_all_invoices_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_all_invoices_as_csv ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/all.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_all_invoices_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves (as CSV) all attributions of Invoice costs to Invoice lines, bucketed.
    # { \"nickname\" : \"(CSV) Retrieve bucketed revenue attributions\",\"response\" : \"getBucketedRevenueAttributions.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [String]
    def get_bucketed_revenue_attributions_as_csv(opts = {})
      data, _status_code, _headers = get_bucketed_revenue_attributions_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves (as CSV) all attributions of Invoice costs to Invoice lines, bucketed.
    # { \&quot;nickname\&quot; : \&quot;(CSV) Retrieve bucketed revenue attributions\&quot;,\&quot;response\&quot; : \&quot;getBucketedRevenueAttributions.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_bucketed_revenue_attributions_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_bucketed_revenue_attributions_as_csv ..."
      end
      # resource path
      local_var_path = "/invoices/bucketed-revenue-attributions.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_bucketed_revenue_attributions_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all charges for the specified invoice. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"List on invoice\",\"response\":\"getChargesInvoice.html\"}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [String] :state Ihe direction of any ordering, either ASC or DESC.
    # @option opts [String] :type Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned. (default to false)
    # @return [SubscriptionChargePagedMetadata]
    def get_charges_on_invoice(invoice_id, opts = {})
      data, _status_code, _headers = get_charges_on_invoice_with_http_info(invoice_id, opts)
      return data
    end

    # Returns all charges for the specified invoice. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;List on invoice\&quot;,\&quot;response\&quot;:\&quot;getChargesInvoice.html\&quot;}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [String] :state Ihe direction of any ordering, either ASC or DESC.
    # @option opts [String] :type Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def get_charges_on_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_charges_on_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_charges_on_invoice" if invoice_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      if opts[:'state'] && !['Voided', 'Pending', 'AwaitingPayment', 'Paid', 'Failed'].include?(opts[:'state'])
        fail ArgumentError, 'invalid value for "state", must be one of Voided, Pending, AwaitingPayment, Paid, Failed'
      end
      if opts[:'type'] && !['Setup', 'Upgrade', 'Manual', 'ProductRatePlanMigration', 'Arrears', 'Advance', 'Coupon', 'Usage', 'PricingComponent'].include?(opts[:'type'])
        fail ArgumentError, 'invalid value for "type", must be one of Setup, Upgrade, Manual, ProductRatePlanMigration, Arrears, Advance, Coupon, Usage, PricingComponent'
      end
      # resource path
      local_var_path = "/invoices/{invoice-ID}/charges".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'state'] = opts[:'state'] if !opts[:'state'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_charges_on_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves credit note-paid from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Credit InvoiceLinePayments CSV\",\"response\" : \"Credit InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which credit payments will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which credit payments will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_credit_invoice_line_payments_from_invoices_as_csv(opts = {})
      data, _status_code, _headers = get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves credit note-paid from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Credit InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Credit InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which credit payments will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which credit payments will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_credit_invoice_line_payments_from_invoices_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_credit_invoice_line_payments_from_invoices_as_csv ..."
      end
      # resource path
      local_var_path = "/invoices/credit.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_credit_invoice_line_payments_from_invoices_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves credit note-paid from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Credit InvoiceLinePayments CSV\",\"response\" : \"Credit InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which credit payments will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which credit payments will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received(opts = {})
      data, _status_code, _headers = get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(opts)
      return data
    end

    # Retrieves credit note-paid from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Credit InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Credit InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which credit payments will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which credit payments will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received ..."
      end
      # resource path
      local_var_path = "/invoices/payment-received/credit.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_credit_invoice_line_payments_from_invoices_as_csv_by_payment_received\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves received revenue from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Debit InvoiceLinePayments CSV\",\"response\" : \"Debit InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_debit_invoice_line_payments_from_invoices_as_csv(opts = {})
      data, _status_code, _headers = get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves received revenue from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Debit InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Debit InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_debit_invoice_line_payments_from_invoices_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_debit_invoice_line_payments_from_invoices_as_csv ..."
      end
      # resource path
      local_var_path = "/invoices/revenue.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_debit_invoice_line_payments_from_invoices_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves received revenue from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Debit InvoiceLinePayments CSV\",\"response\" : \"Debit InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received(opts = {})
      data, _status_code, _headers = get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(opts)
      return data
    end

    # Retrieves received revenue from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Debit InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Debit InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received ..."
      end
      # resource path
      local_var_path = "/invoices/payment-received/revenue.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_debit_invoice_line_payments_from_invoices_as_csv_by_payment_received\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \"nickname\" : \"HTML invoice\",\"response\" : \"getInvoiceByID.HTML.html\"}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :tier_breakdown Whether to provide a breakdown of charge tiering. (default to false)
    # @option opts [BOOLEAN] :inclusive_end Whether to present in the Invoice date range only those dates whose entirety are involved in the billing period. In other words: when true, this subtracts 1 from the \&quot;period end\&quot; date shown to the customer. (default to false)
    # @option opts [BOOLEAN] :show_zero_cost Whether to show zero-cost lines. (default to true)
    # @option opts [BOOLEAN] :show_plan_only_when_ambiguous Whether to state which plan the Invoice lines came from, regardless of whether there&#39;s only one plan involved in this Invoice. (default to true)
    # @return [String]
    def get_invoice_as_html(id, opts = {})
      data, _status_code, _headers = get_invoice_as_html_with_http_info(id, opts)
      return data
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \&quot;nickname\&quot; : \&quot;HTML invoice\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByID.HTML.html\&quot;}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :tier_breakdown Whether to provide a breakdown of charge tiering.
    # @option opts [BOOLEAN] :inclusive_end Whether to present in the Invoice date range only those dates whose entirety are involved in the billing period. In other words: when true, this subtracts 1 from the \&quot;period end\&quot; date shown to the customer.
    # @option opts [BOOLEAN] :show_zero_cost Whether to show zero-cost lines.
    # @option opts [BOOLEAN] :show_plan_only_when_ambiguous Whether to state which plan the Invoice lines came from, regardless of whether there&#39;s only one plan involved in this Invoice.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_invoice_as_html_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_as_html ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.get_invoice_as_html" if id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/{ID}.html".sub('{format}','json').sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'tier_breakdown'] = opts[:'tier_breakdown'] if !opts[:'tier_breakdown'].nil?
      query_params[:'inclusive_end'] = opts[:'inclusive_end'] if !opts[:'inclusive_end'].nil?
      query_params[:'show_zero_cost'] = opts[:'show_zero_cost'] if !opts[:'show_zero_cost'].nil?
      query_params[:'show_plan_only_when_ambiguous'] = opts[:'show_plan_only_when_ambiguous'] if !opts[:'show_plan_only_when_ambiguous'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/html']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_as_html\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \"nickname\" : \"PDF Invoice\",\"response\" : \"getInvoiceByID.pdf\"}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :tier_breakdown Whether to provide a breakdown of charge tiering. (default to false)
    # @option opts [BOOLEAN] :inclusive_end Whether to present in the Invoice date range only those dates whose entirety are involved in the billing period. In other words: when true, this subtracts 1 from the \&quot;period end\&quot; date shown to the customer. (default to false)
    # @option opts [BOOLEAN] :show_zero_cost Whether to show zero-cost lines. (default to true)
    # @option opts [BOOLEAN] :show_plan_only_when_ambiguous Whether to state which plan the Invoice lines came from, regardless of whether there&#39;s only one plan involved in this Invoice. (default to true)
    # @option opts [BOOLEAN] :include_footer 
    # @option opts [String] :group_line_items_by 
    # @return [File]
    def get_invoice_as_pdf(id, opts = {})
      data, _status_code, _headers = get_invoice_as_pdf_with_http_info(id, opts)
      return data
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \&quot;nickname\&quot; : \&quot;PDF Invoice\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByID.pdf\&quot;}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :tier_breakdown Whether to provide a breakdown of charge tiering.
    # @option opts [BOOLEAN] :inclusive_end Whether to present in the Invoice date range only those dates whose entirety are involved in the billing period. In other words: when true, this subtracts 1 from the \&quot;period end\&quot; date shown to the customer.
    # @option opts [BOOLEAN] :show_zero_cost Whether to show zero-cost lines.
    # @option opts [BOOLEAN] :show_plan_only_when_ambiguous Whether to state which plan the Invoice lines came from, regardless of whether there&#39;s only one plan involved in this Invoice.
    # @option opts [BOOLEAN] :include_footer 
    # @option opts [String] :group_line_items_by 
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def get_invoice_as_pdf_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_as_pdf ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.get_invoice_as_pdf" if id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      if opts[:'group_line_items_by'] && !['Product', 'RatePlan', 'ProductAndRatePlan'].include?(opts[:'group_line_items_by'])
        fail ArgumentError, 'invalid value for "group_line_items_by", must be one of Product, RatePlan, ProductAndRatePlan'
      end
      # resource path
      local_var_path = "/invoices/{ID}.pdf".sub('{format}','json').sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'tier_breakdown'] = opts[:'tier_breakdown'] if !opts[:'tier_breakdown'].nil?
      query_params[:'inclusive_end'] = opts[:'inclusive_end'] if !opts[:'inclusive_end'].nil?
      query_params[:'show_zero_cost'] = opts[:'show_zero_cost'] if !opts[:'show_zero_cost'].nil?
      query_params[:'show_plan_only_when_ambiguous'] = opts[:'show_plan_only_when_ambiguous'] if !opts[:'show_plan_only_when_ambiguous'].nil?
      query_params[:'include_footer'] = opts[:'include_footer'] if !opts[:'include_footer'].nil?
      query_params[:'group_line_items_by'] = opts[:'group_line_items_by'] if !opts[:'group_line_items_by'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/pdf']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_as_pdf\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single invoice specified by the invoice-ID parameter.
    # { \"nickname\" : \"Retrieve an existing invoice\",\"response\" : \"getInvoiceByID.html\"}
    # @param invoice_id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded. (default to true)
    # @return [InvoicePagedMetadata]
    def get_invoice_by_id(invoice_id, opts = {})
      data, _status_code, _headers = get_invoice_by_id_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieves a single invoice specified by the invoice-ID parameter.
    # { \&quot;nickname\&quot; : \&quot;Retrieve an existing invoice\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByID.html\&quot;}
    # @param invoice_id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoice_by_id_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_id ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_invoice_by_id" if invoice_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/{invoice-ID}".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'exclude_children'] = opts[:'exclude_children'] if !opts[:'exclude_children'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \"nickname\" : \"CSV invoice\",\"response\" : \"getInvoiceByID.csv\"}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [String]
    def get_invoice_by_id_as_csv(id, opts = {})
      data, _status_code, _headers = get_invoice_by_id_as_csv_with_http_info(id, opts)
      return data
    end

    # Retrieves a single invoice specified by the ID parameter.
    # { \&quot;nickname\&quot; : \&quot;CSV invoice\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByID.csv\&quot;}
    # @param id The ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_invoice_by_id_as_csv_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_id_as_csv ..."
      end
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling InvoicesApi.get_invoice_by_id_as_csv" if id.nil?
      # resource path
      local_var_path = "/invoices/{ID}.csv".sub('{format}','json').sub('{' + 'ID' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_id_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoices specified by the subscription-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by subscription\",\"response\" : \"getInvoiceBySubscriptionID.html\"}
    # @param subscription_id ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded. (default to true)
    # @return [InvoicePagedMetadata]
    def get_invoice_by_subscription_id(subscription_id, opts = {})
      data, _status_code, _headers = get_invoice_by_subscription_id_with_http_info(subscription_id, opts)
      return data
    end

    # Retrieves a collection of invoices specified by the subscription-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by subscription\&quot;,\&quot;response\&quot; : \&quot;getInvoiceBySubscriptionID.html\&quot;}
    # @param subscription_id ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoice_by_subscription_id_with_http_info(subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_subscription_id ..."
      end
      # verify the required parameter 'subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'subscription_id' when calling InvoicesApi.get_invoice_by_subscription_id" if subscription_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/subscription/{subscription-ID}".sub('{format}','json').sub('{' + 'subscription-ID' + '}', subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'exclude_children'] = opts[:'exclude_children'] if !opts[:'exclude_children'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_subscription_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoices specified by the subscription-version-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by subscription version\",\"response\" : \"getInvoiceBySubscriptionVersionID.html\"}
    # @param subscription_version_id Version ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded. (default to true)
    # @return [InvoicePagedMetadata]
    def get_invoice_by_subscription_version_id(subscription_version_id, opts = {})
      data, _status_code, _headers = get_invoice_by_subscription_version_id_with_http_info(subscription_version_id, opts)
      return data
    end

    # Retrieves a collection of invoices specified by the subscription-version-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by subscription version\&quot;,\&quot;response\&quot; : \&quot;getInvoiceBySubscriptionVersionID.html\&quot;}
    # @param subscription_version_id Version ID of the subscription.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoice_by_subscription_version_id_with_http_info(subscription_version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_subscription_version_id ..."
      end
      # verify the required parameter 'subscription_version_id' is set
      fail ArgumentError, "Missing the required parameter 'subscription_version_id' when calling InvoicesApi.get_invoice_by_subscription_version_id" if subscription_version_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/subscription/version/{subscription-version-ID}".sub('{format}','json').sub('{' + 'subscription-version-ID' + '}', subscription_version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'exclude_children'] = opts[:'exclude_children'] if !opts[:'exclude_children'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_subscription_version_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single invoice, specified by the version-ID parameter.
    # { \"nickname\" : \"Retrieve by version\",\"response\" : \"getInvoiceByVersionID.html\"}
    # @param version_id The version-ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [InvoicePagedMetadata]
    def get_invoice_by_version_id(version_id, opts = {})
      data, _status_code, _headers = get_invoice_by_version_id_with_http_info(version_id, opts)
      return data
    end

    # Retrieves a single invoice, specified by the version-ID parameter.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by version\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByVersionID.html\&quot;}
    # @param version_id The version-ID of the invoice.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoice_by_version_id_with_http_info(version_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoice_by_version_id ..."
      end
      # verify the required parameter 'version_id' is set
      fail ArgumentError, "Missing the required parameter 'version_id' when calling InvoicesApi.get_invoice_by_version_id" if version_id.nil?
      # resource path
      local_var_path = "/invoices/version/{version-ID}".sub('{format}','json').sub('{' + 'version-ID' + '}', version_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoice_by_version_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoices specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by account\",\"response\" : \"getInvoiceByAccountID.html\"}
    # @param account_id ID of the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return. (default to 0)
    # @option opts [Integer] :records The maximum number of invoices to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded. (default to true)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_account_id(account_id, opts = {})
      data, _status_code, _headers = get_invoices_by_account_id_with_http_info(account_id, opts)
      return data
    end

    # Retrieves a collection of invoices specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by account\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByAccountID.html\&quot;}
    # @param account_id ID of the account.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first invoice to return.
    # @option opts [Integer] :records The maximum number of invoices to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [BOOLEAN] :exclude_children Should child invoices be excluded.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_account_id_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_account_id ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling InvoicesApi.get_invoices_by_account_id" if account_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/account/{account-ID}".sub('{format}','json').sub('{' + 'account-ID' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'exclude_children'] = opts[:'exclude_children'] if !opts[:'exclude_children'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoice objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by period-end\",\"response\" : \"getInvoiceByPeriodEnd.html\"}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_period_end(lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_invoices_by_period_end_with_http_info(lower_threshold, upper_threshold, opts)
      return data
    end

    # Retrieves a collection of invoice objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by period-end\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByPeriodEnd.html\&quot;}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_period_end_with_http_info(lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_period_end ..."
      end
      # verify the required parameter 'lower_threshold' is set
      fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling InvoicesApi.get_invoices_by_period_end" if lower_threshold.nil?
      # verify the required parameter 'upper_threshold' is set
      fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling InvoicesApi.get_invoices_by_period_end" if upper_threshold.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/period-end/{lower-threshold}/{upper-threshold}".sub('{format}','json').sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_period_end\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoice objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by period-start\",\"response\" : \"getInvoiceByPeriodStart.html\"}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_period_start(lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_invoices_by_period_start_with_http_info(lower_threshold, upper_threshold, opts)
      return data
    end

    # Retrieves a collection of invoice objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by period-start\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByPeriodStart.html\&quot;}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_period_start_with_http_info(lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_period_start ..."
      end
      # verify the required parameter 'lower_threshold' is set
      fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling InvoicesApi.get_invoices_by_period_start" if lower_threshold.nil?
      # verify the required parameter 'upper_threshold' is set
      fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling InvoicesApi.get_invoices_by_period_start" if upper_threshold.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/period-start/{lower-threshold}/{upper-threshold}".sub('{format}','json').sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_period_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoice objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by period-start\",\"response\" : \"getInvoiceByPeriodStart.csv\"}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_period_start_as_csv(lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_invoices_by_period_start_as_csv_with_http_info(lower_threshold, upper_threshold, opts)
      return data
    end

    # Retrieves a collection of invoice objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by period-start\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByPeriodStart.csv\&quot;}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_period_start_as_csv_with_http_info(lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_period_start_as_csv ..."
      end
      # verify the required parameter 'lower_threshold' is set
      fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling InvoicesApi.get_invoices_by_period_start_as_csv" if lower_threshold.nil?
      # verify the required parameter 'upper_threshold' is set
      fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling InvoicesApi.get_invoices_by_period_start_as_csv" if upper_threshold.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/period-start/{lower-threshold}/{upper-threshold}.csv".sub('{format}','json').sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_period_start_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoices, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by state\",\"response\" : \"getInvoiceByState.html\"}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to ID)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_state(state, opts = {})
      data, _status_code, _headers = get_invoices_by_state_with_http_info(state, opts)
      return data
    end

    # Retrieves a collection of invoices, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by state\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByState.html\&quot;}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_state_with_http_info(state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_state ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling InvoicesApi.get_invoices_by_state" if state.nil?
      # verify enum value
      unless ['Paid', 'Unpaid', 'Pending', 'Voided'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Paid, Unpaid, Pending, Voided"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/state/{state}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoice objects specified by the state parameter and with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by state and period-start\",\"response\" : \"getInvoiceByStateAndPeriodStart.html\"}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_state_and_period_start(state, lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_invoices_by_state_and_period_start_with_http_info(state, lower_threshold, upper_threshold, opts)
      return data
    end

    # Retrieves a collection of invoice objects specified by the state parameter and with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by state and period-start\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByStateAndPeriodStart.html\&quot;}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_state_and_period_start_with_http_info(state, lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_state_and_period_start ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling InvoicesApi.get_invoices_by_state_and_period_start" if state.nil?
      # verify enum value
      unless ['Paid', 'Unpaid', 'Pending', 'Voided'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Paid, Unpaid, Pending, Voided"
      end
      # verify the required parameter 'lower_threshold' is set
      fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling InvoicesApi.get_invoices_by_state_and_period_start" if lower_threshold.nil?
      # verify the required parameter 'upper_threshold' is set
      fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling InvoicesApi.get_invoices_by_state_and_period_start" if upper_threshold.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/state/{state}/period-start/{lower-threshold}/{upper-threshold}".sub('{format}','json').sub('{' + 'state' + '}', state.to_s).sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_state_and_period_start\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoice objects specified by the state parameter and with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by state and period-start\",\"response\" : \"getInvoiceByStateAndPeriodStart.csv\"}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_state_and_period_start_as_csv(state, lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_invoices_by_state_and_period_start_as_csv_with_http_info(state, lower_threshold, upper_threshold, opts)
      return data
    end

    # Retrieves a collection of invoice objects specified by the state parameter and with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by state and period-start\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByStateAndPeriodStart.csv\&quot;}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_state_and_period_start_as_csv_with_http_info(state, lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_state_and_period_start_as_csv ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling InvoicesApi.get_invoices_by_state_and_period_start_as_csv" if state.nil?
      # verify enum value
      unless ['Paid', 'Unpaid', 'Pending', 'Voided'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Paid, Unpaid, Pending, Voided"
      end
      # verify the required parameter 'lower_threshold' is set
      fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling InvoicesApi.get_invoices_by_state_and_period_start_as_csv" if lower_threshold.nil?
      # verify the required parameter 'upper_threshold' is set
      fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling InvoicesApi.get_invoices_by_state_and_period_start_as_csv" if upper_threshold.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/state/{state}/period-start/{lower-threshold}/{upper-threshold}.csv".sub('{format}','json').sub('{' + 'state' + '}', state.to_s).sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_state_and_period_start_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a collection of invoices, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # { \"nickname\" : \"Retrieve by state\",\"response\" : \"getInvoiceByState.csv\"}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to ID)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [InvoicePagedMetadata]
    def get_invoices_by_state_as_csv(state, opts = {})
      data, _status_code, _headers = get_invoices_by_state_as_csv_with_http_info(state, opts)
      return data
    end

    # Retrieves a collection of invoices, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by state\&quot;,\&quot;response\&quot; : \&quot;getInvoiceByState.csv\&quot;}
    # @param state The current state of the invoice, either Paid, Pending,  Unpaid or Voided.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def get_invoices_by_state_as_csv_with_http_info(state, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_invoices_by_state_as_csv ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling InvoicesApi.get_invoices_by_state_as_csv" if state.nil?
      # verify enum value
      unless ['Paid', 'Unpaid', 'Pending', 'Voided'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Paid, Unpaid, Pending, Voided"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/invoices/state/{state}.csv".sub('{format}','json').sub('{' + 'state' + '}', state.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_invoices_by_state_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all InvoiceLine payment attributions.
    # { \"nickname\" : \"Retrieve InvoiceLine payment attributions\",\"response\" : \"getInvoiceLinePayments.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which line payment attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which line payment attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @option opts [Array<String>] :include_gateway Include attributions only from payments made via these payment gateways. Takes precedence over &#x60;exclude_gateway&#x60; param (if both are provided).
    # @option opts [Array<String>] :exclude_gateway Include attributions from payments made via all payment gateways, except these.
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_line_payments(opts = {})
      data, _status_code, _headers = get_line_payments_with_http_info(opts)
      return data
    end

    # Retrieves all InvoiceLine payment attributions.
    # { \&quot;nickname\&quot; : \&quot;Retrieve InvoiceLine payment attributions\&quot;,\&quot;response\&quot; : \&quot;getInvoiceLinePayments.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which line payment attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which line payment attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @option opts [Array<String>] :include_gateway Include attributions only from payments made via these payment gateways. Takes precedence over &#x60;exclude_gateway&#x60; param (if both are provided).
    # @option opts [Array<String>] :exclude_gateway Include attributions from payments made via all payment gateways, except these.
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_line_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_line_payments ..."
      end
      if opts[:'include_gateway'] && !['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(opts[:'include_gateway'])
        fail ArgumentError, 'invalid value for "include_gateway", must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash'
      end
      if opts[:'exclude_gateway'] && !['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(opts[:'exclude_gateway'])
        fail ArgumentError, 'invalid value for "exclude_gateway", must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash'
      end
      # resource path
      local_var_path = "/invoices/line-payments".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?
      query_params[:'include_gateway'] = @api_client.build_collection_param(opts[:'include_gateway'], :multi) if !opts[:'include_gateway'].nil?
      query_params[:'exclude_gateway'] = @api_client.build_collection_param(opts[:'exclude_gateway'], :multi) if !opts[:'exclude_gateway'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_line_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves (as CSV) all InvoiceLine payment attributions.
    # { \"nickname\" : \"(CSV) Retrieve InvoiceLine payment attributions\",\"response\" : \"getInvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which line payment attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which line payment attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @option opts [Array<String>] :include_gateway Include attributions only from payments made via these payment gateways. Takes precedence over &#x60;exclude_gateway&#x60; param (if both are provided).
    # @option opts [Array<String>] :exclude_gateway Include attributions from payments made via all payment gateways, except these.
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_line_payments_as_csv(opts = {})
      data, _status_code, _headers = get_line_payments_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves (as CSV) all InvoiceLine payment attributions.
    # { \&quot;nickname\&quot; : \&quot;(CSV) Retrieve InvoiceLine payment attributions\&quot;,\&quot;response\&quot; : \&quot;getInvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which line payment attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which line payment attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @option opts [Array<String>] :include_gateway Include attributions only from payments made via these payment gateways. Takes precedence over &#x60;exclude_gateway&#x60; param (if both are provided).
    # @option opts [Array<String>] :exclude_gateway Include attributions from payments made via all payment gateways, except these.
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_line_payments_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_line_payments_as_csv ..."
      end
      if opts[:'include_gateway'] && !['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(opts[:'include_gateway'])
        fail ArgumentError, 'invalid value for "include_gateway", must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash'
      end
      if opts[:'exclude_gateway'] && !['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(opts[:'exclude_gateway'])
        fail ArgumentError, 'invalid value for "exclude_gateway", must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash'
      end
      # resource path
      local_var_path = "/invoices/line-payments.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?
      query_params[:'include_gateway'] = @api_client.build_collection_param(opts[:'include_gateway'], :multi) if !opts[:'include_gateway'].nil?
      query_params[:'exclude_gateway'] = @api_client.build_collection_param(opts[:'exclude_gateway'], :multi) if !opts[:'exclude_gateway'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_line_payments_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve any associated metadata.
    # {\"nickname\":\"Retrieve metadata on invoice\",\"request\":\"getInvoiceMetadataRequest.html\",\"response\":\"getInvoiceMetadataResponse.html\"}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def get_metadata_for_invoice(invoice_id, opts = {})
      data, _status_code, _headers = get_metadata_for_invoice_with_http_info(invoice_id, opts)
      return data
    end

    # Retrieve any associated metadata.
    # {\&quot;nickname\&quot;:\&quot;Retrieve metadata on invoice\&quot;,\&quot;request\&quot;:\&quot;getInvoiceMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;getInvoiceMetadataResponse.html\&quot;}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def get_metadata_for_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_metadata_for_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.get_metadata_for_invoice" if invoice_id.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/metadata".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_metadata_for_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves awarded refunds from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Refund InvoiceLinePayments CSV\",\"response\" : \"Refund InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which refunds will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which refunds will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_refund_invoice_line_payments_from_invoices_as_csv(opts = {})
      data, _status_code, _headers = get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves awarded refunds from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Refund InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Refund InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which refunds will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which refunds will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_refund_invoice_line_payments_from_invoices_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_refund_invoice_line_payments_from_invoices_as_csv ..."
      end
      # resource path
      local_var_path = "/invoices/refund.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_refund_invoice_line_payments_from_invoices_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves awarded refunds from InvoicePayments upon line items, in CSV format.
    # { \"nickname\" : \"Refund InvoiceLinePayments CSV\",\"response\" : \"Refund InvoiceLinePayments.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which refunds will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which refunds will be recognised (example input: 2015-10-13T11:50:24).
    # @return [InvoiceLinePaymentPagedMetadata]
    def get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received(opts = {})
      data, _status_code, _headers = get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(opts)
      return data
    end

    # Retrieves awarded refunds from InvoicePayments upon line items, in CSV format.
    # { \&quot;nickname\&quot; : \&quot;Refund InvoiceLinePayments CSV\&quot;,\&quot;response\&quot; : \&quot;Refund InvoiceLinePayments.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which refunds will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which refunds will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(InvoiceLinePaymentPagedMetadata, Fixnum, Hash)>] InvoiceLinePaymentPagedMetadata data, response status code and response headers
    def get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received ..."
      end
      # resource path
      local_var_path = "/invoices/payment-received/refund.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/csv']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoiceLinePaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_refund_invoice_line_payments_from_invoices_as_csv_by_refund_received\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves all attributions of Invoice costs to Invoice lines.
    # { \"nickname\" : \"Retrieve revenue attributions\",\"response\" : \"getRevenueAttributions.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [RevenueAttributionPagedMetadata]
    def get_revenue_attributions(opts = {})
      data, _status_code, _headers = get_revenue_attributions_with_http_info(opts)
      return data
    end

    # Retrieves all attributions of Invoice costs to Invoice lines.
    # { \&quot;nickname\&quot; : \&quot;Retrieve revenue attributions\&quot;,\&quot;response\&quot; : \&quot;getRevenueAttributions.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(RevenueAttributionPagedMetadata, Fixnum, Hash)>] RevenueAttributionPagedMetadata data, response status code and response headers
    def get_revenue_attributions_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_revenue_attributions ..."
      end
      # resource path
      local_var_path = "/invoices/revenue-attributions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'RevenueAttributionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_revenue_attributions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves (as CSV) all attributions of Invoice costs to Invoice lines.
    # { \"nickname\" : \"(CSV) Retrieve revenue attributions\",\"response\" : \"getRevenueAttributions.csv\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [String]
    def get_revenue_attributions_as_csv(opts = {})
      data, _status_code, _headers = get_revenue_attributions_as_csv_with_http_info(opts)
      return data
    end

    # Retrieves (as CSV) all attributions of Invoice costs to Invoice lines.
    # { \&quot;nickname\&quot; : \&quot;(CSV) Retrieve revenue attributions\&quot;,\&quot;response\&quot; : \&quot;getRevenueAttributions.csv\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [String] :recognition_start The UTC DateTime specifying the start of the interval within which revenue attributions will be recognised (example input: 2015-09-13T11:50:24).
    # @option opts [String] :recognition_end The UTC DateTime specifying the end of the interval within which revenue attributions will be recognised (example input: 2015-10-13T11:50:24).
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def get_revenue_attributions_as_csv_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_revenue_attributions_as_csv ..."
      end
      # resource path
      local_var_path = "/invoices/revenue-attributions.csv".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'recognition_start'] = opts[:'recognition_start'] if !opts[:'recognition_start'].nil?
      query_params[:'recognition_end'] = opts[:'recognition_end'] if !opts[:'recognition_end'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = []
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_revenue_attributions_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # { \"nickname\" : \"\",\"response\" : \"\"}
    # @param query_string The query string used to search.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The starting index of the search results. (default to 0)
    # @option opts [Integer] :records The number of search results to return. (default to 10)
    # @option opts [String] :format The response format, either JSON or XML. (default to JSON)
    # @option opts [BOOLEAN] :wildcard Toggle if we search for full words or whether a wildcard is used. (default to false)
    # @option opts [BOOLEAN] :entity Is an entity returned with the search results. (default to false)
    # @return [SwaggerTypeListInv]
    def get_swagger_for_invoice(query_string, opts = {})
      data, _status_code, _headers = get_swagger_for_invoice_with_http_info(query_string, opts)
      return data
    end

    # 
    # { \&quot;nickname\&quot; : \&quot;\&quot;,\&quot;response\&quot; : \&quot;\&quot;}
    # @param query_string The query string used to search.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The starting index of the search results.
    # @option opts [Integer] :records The number of search results to return.
    # @option opts [String] :format The response format, either JSON or XML.
    # @option opts [BOOLEAN] :wildcard Toggle if we search for full words or whether a wildcard is used.
    # @option opts [BOOLEAN] :entity Is an entity returned with the search results.
    # @return [Array<(SwaggerTypeListInv, Fixnum, Hash)>] SwaggerTypeListInv data, response status code and response headers
    def get_swagger_for_invoice_with_http_info(query_string, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.get_swagger_for_invoice ..."
      end
      # verify the required parameter 'query_string' is set
      fail ArgumentError, "Missing the required parameter 'query_string' when calling InvoicesApi.get_swagger_for_invoice" if query_string.nil?
      # resource path
      local_var_path = "/invoices/swagger-end-point/{query-string}".sub('{format}','json').sub('{' + 'query-string' + '}', query_string.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'format'] = opts[:'format'] if !opts[:'format'].nil?
      query_params[:'wildcard'] = opts[:'wildcard'] if !opts[:'wildcard'].nil?
      query_params[:'entity'] = opts[:'entity'] if !opts[:'entity'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SwaggerTypeListInv')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#get_swagger_for_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Import an invoice.
    # {\"nickname\":\"Import invoice\",\"response\":\"ImportInvoiceResponse.html\",\"request\":\"ImportInvoiceRequest.html\"}
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def import_invoice(request, opts = {})
      data, _status_code, _headers = import_invoice_with_http_info(request, opts)
      return data
    end

    # Import an invoice.
    # {\&quot;nickname\&quot;:\&quot;Import invoice\&quot;,\&quot;response\&quot;:\&quot;ImportInvoiceResponse.html\&quot;,\&quot;request\&quot;:\&quot;ImportInvoiceRequest.html\&quot;}
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def import_invoice_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.import_invoice ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling InvoicesApi.import_invoice" if request.nil?
      # resource path
      local_var_path = "/invoices/import".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#import_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Re-calculate an Invoice.
    # {\"nickname\":\"Re-calculate an invoice\",\"response\":\"recalculateInvoiceResponse.html\",\"request\":\"RecalculateInvoiceRequest.html\"}
    # @param invoice_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def recalculate_invoice(invoice_id, request, opts = {})
      data, _status_code, _headers = recalculate_invoice_with_http_info(invoice_id, request, opts)
      return data
    end

    # Re-calculate an Invoice.
    # {\&quot;nickname\&quot;:\&quot;Re-calculate an invoice\&quot;,\&quot;response\&quot;:\&quot;recalculateInvoiceResponse.html\&quot;,\&quot;request\&quot;:\&quot;RecalculateInvoiceRequest.html\&quot;}
    # @param invoice_id 
    # @param request 
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def recalculate_invoice_with_http_info(invoice_id, request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.recalculate_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.recalculate_invoice" if invoice_id.nil?
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling InvoicesApi.recalculate_invoice" if request.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/recalculate".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#recalculate_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes the specified charge from the specified Invoice.
    # {\"nickname\":\"Remove from invoice\",\"response\":\"deleteChargesInvoice.html\"}
    # @param invoice_id 
    # @param charge_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [SubscriptionChargePagedMetadata]
    def remove_charge_from_invoice(invoice_id, charge_id, opts = {})
      data, _status_code, _headers = remove_charge_from_invoice_with_http_info(invoice_id, charge_id, opts)
      return data
    end

    # Removes the specified charge from the specified Invoice.
    # {\&quot;nickname\&quot;:\&quot;Remove from invoice\&quot;,\&quot;response\&quot;:\&quot;deleteChargesInvoice.html\&quot;}
    # @param invoice_id 
    # @param charge_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(SubscriptionChargePagedMetadata, Fixnum, Hash)>] SubscriptionChargePagedMetadata data, response status code and response headers
    def remove_charge_from_invoice_with_http_info(invoice_id, charge_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.remove_charge_from_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.remove_charge_from_invoice" if invoice_id.nil?
      # verify the required parameter 'charge_id' is set
      fail ArgumentError, "Missing the required parameter 'charge_id' when calling InvoicesApi.remove_charge_from_invoice" if charge_id.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/charges/{charge-ID}".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s).sub('{' + 'charge-ID' + '}', charge_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SubscriptionChargePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#remove_charge_from_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove any associated metadata.
    # {\"nickname\":\"Clear metadata from invoice\",\"request\" :\"deleteInvoiceMetadataRequest.html\",\"response\":\"deleteInvoiceMetadataResponse.html\"}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def remove_metadata_from_invoice(invoice_id, opts = {})
      data, _status_code, _headers = remove_metadata_from_invoice_with_http_info(invoice_id, opts)
      return data
    end

    # Remove any associated metadata.
    # {\&quot;nickname\&quot;:\&quot;Clear metadata from invoice\&quot;,\&quot;request\&quot; :\&quot;deleteInvoiceMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;deleteInvoiceMetadataResponse.html\&quot;}
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def remove_metadata_from_invoice_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.remove_metadata_from_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.remove_metadata_from_invoice" if invoice_id.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/metadata".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#remove_metadata_from_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove any existing metadata keys and create the provided data.
    # {\"nickname\":\"Set metadata on invoice\",\"request\":\"setInvoiceMetadataRequest.html\",\"response\":\"setInvoiceMetadataResponse.html\"}
    # @param metadata 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def set_metadata_for_invoice(metadata, invoice_id, opts = {})
      data, _status_code, _headers = set_metadata_for_invoice_with_http_info(metadata, invoice_id, opts)
      return data
    end

    # Remove any existing metadata keys and create the provided data.
    # {\&quot;nickname\&quot;:\&quot;Set metadata on invoice\&quot;,\&quot;request\&quot;:\&quot;setInvoiceMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;setInvoiceMetadataResponse.html\&quot;}
    # @param metadata 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def set_metadata_for_invoice_with_http_info(metadata, invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.set_metadata_for_invoice ..."
      end
      # verify the required parameter 'metadata' is set
      fail ArgumentError, "Missing the required parameter 'metadata' when calling InvoicesApi.set_metadata_for_invoice" if metadata.nil?
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.set_metadata_for_invoice" if invoice_id.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/metadata".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#set_metadata_for_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an Invoice.
    # {\"nickname\":\"Update an invoice\",\"response\":\"updateInvoiceResponse.html\",\"request\":\"updateInvoiceRequest.html\"}
    # @param invoice The invoice object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def update_invoice(invoice, opts = {})
      data, _status_code, _headers = update_invoice_with_http_info(invoice, opts)
      return data
    end

    # Update an Invoice.
    # {\&quot;nickname\&quot;:\&quot;Update an invoice\&quot;,\&quot;response\&quot;:\&quot;updateInvoiceResponse.html\&quot;,\&quot;request\&quot;:\&quot;updateInvoiceRequest.html\&quot;}
    # @param invoice The invoice object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def update_invoice_with_http_info(invoice, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.update_invoice ..."
      end
      # verify the required parameter 'invoice' is set
      fail ArgumentError, "Missing the required parameter 'invoice' when calling InvoicesApi.update_invoice" if invoice.nil?
      # resource path
      local_var_path = "/invoices".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(invoice)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#update_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update any existing metadata key-values and insert any new key-values, no keys will be removed.
    # {\"nickname\":\"Upsert metadata on invoice\",\"request\":\"upsertInvoiceMetadataRequest.html\",\"response\":\"upsertInvoiceMetadataResponse.html\"}
    # @param metadata 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def upsert_metadata_for_invoice(metadata, invoice_id, opts = {})
      data, _status_code, _headers = upsert_metadata_for_invoice_with_http_info(metadata, invoice_id, opts)
      return data
    end

    # Update any existing metadata key-values and insert any new key-values, no keys will be removed.
    # {\&quot;nickname\&quot;:\&quot;Upsert metadata on invoice\&quot;,\&quot;request\&quot;:\&quot;upsertInvoiceMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;upsertInvoiceMetadataResponse.html\&quot;}
    # @param metadata 
    # @param invoice_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def upsert_metadata_for_invoice_with_http_info(metadata, invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.upsert_metadata_for_invoice ..."
      end
      # verify the required parameter 'metadata' is set
      fail ArgumentError, "Missing the required parameter 'metadata' when calling InvoicesApi.upsert_metadata_for_invoice" if metadata.nil?
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.upsert_metadata_for_invoice" if invoice_id.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}/metadata".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#upsert_metadata_for_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Voids the invoice specified by the invoice identifier parameter.
    # { \"nickname\" : \"Void an invoice\",\"response\" : \"voidInvoice.html\"}
    # @param invoice_id ID of the invoice.
    # @param organizations A list of organization-IDs used to restrict the scope of API calls.
    # @param [Hash] opts the optional parameters
    # @return [InvoicePagedMetadata]
    def void_invoice(invoice_id, organizations, opts = {})
      data, _status_code, _headers = void_invoice_with_http_info(invoice_id, organizations, opts)
      return data
    end

    # Voids the invoice specified by the invoice identifier parameter.
    # { \&quot;nickname\&quot; : \&quot;Void an invoice\&quot;,\&quot;response\&quot; : \&quot;voidInvoice.html\&quot;}
    # @param invoice_id ID of the invoice.
    # @param organizations A list of organization-IDs used to restrict the scope of API calls.
    # @param [Hash] opts the optional parameters
    # @return [Array<(InvoicePagedMetadata, Fixnum, Hash)>] InvoicePagedMetadata data, response status code and response headers
    def void_invoice_with_http_info(invoice_id, organizations, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: InvoicesApi.void_invoice ..."
      end
      # verify the required parameter 'invoice_id' is set
      fail ArgumentError, "Missing the required parameter 'invoice_id' when calling InvoicesApi.void_invoice" if invoice_id.nil?
      # verify the required parameter 'organizations' is set
      fail ArgumentError, "Missing the required parameter 'organizations' when calling InvoicesApi.void_invoice" if organizations.nil?
      # resource path
      local_var_path = "/invoices/{invoice-ID}".sub('{format}','json').sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(organizations, :multi)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'InvoicePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: InvoicesApi#void_invoice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
