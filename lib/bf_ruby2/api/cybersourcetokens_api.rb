=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class CybersourcetokensApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a cybersource-token.
    # {\"nickname\":\"Create a cybersource-token\",\"request\":\"createCybersourceTokenRequest.html\",\"response\":\"createCybersourceTokenResponse.html\"}
    # @param cybersource_token The cybersource-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [CybersourceTokenPagedMetadata]
    def create_cybersource_token(cybersource_token, opts = {})
      data, _status_code, _headers = create_cybersource_token_with_http_info(cybersource_token, opts)
      return data
    end

    # Create a cybersource-token.
    # {\&quot;nickname\&quot;:\&quot;Create a cybersource-token\&quot;,\&quot;request\&quot;:\&quot;createCybersourceTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;createCybersourceTokenResponse.html\&quot;}
    # @param cybersource_token The cybersource-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CybersourceTokenPagedMetadata, Fixnum, Hash)>] CybersourceTokenPagedMetadata data, response status code and response headers
    def create_cybersource_token_with_http_info(cybersource_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CybersourcetokensApi.create_cybersource_token ..."
      end
      # verify the required parameter 'cybersource_token' is set
      fail ArgumentError, "Missing the required parameter 'cybersource_token' when calling CybersourcetokensApi.create_cybersource_token" if cybersource_token.nil?
      # resource path
      local_var_path = "/cybersource-tokens".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cybersource_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CybersourceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CybersourcetokensApi#create_cybersource_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single cybersource-token, specified by the token-ID parameter.
    # {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}
    # @param token_id The unique sting ID of the cybersource token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [CybersourceTokenPagedMetadata]
    def get_cybersource_token_by_id(token_id, opts = {})
      data, _status_code, _headers = get_cybersource_token_by_id_with_http_info(token_id, opts)
      return data
    end

    # Returns a single cybersource-token, specified by the token-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;NICKNAME\&quot;,\&quot;response\&quot;:\&quot;getCybersourceTokenByID.html\&quot;}
    # @param token_id The unique sting ID of the cybersource token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(CybersourceTokenPagedMetadata, Fixnum, Hash)>] CybersourceTokenPagedMetadata data, response status code and response headers
    def get_cybersource_token_by_id_with_http_info(token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CybersourcetokensApi.get_cybersource_token_by_id ..."
      end
      # verify the required parameter 'token_id' is set
      fail ArgumentError, "Missing the required parameter 'token_id' when calling CybersourcetokensApi.get_cybersource_token_by_id" if token_id.nil?
      # resource path
      local_var_path = "/cybersource-tokens/{token-ID}".sub('{format}','json').sub('{' + 'token-ID' + '}', token_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CybersourceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CybersourcetokensApi#get_cybersource_token_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single cybersource-token, specified by the recurring-subscription-ID parameter.
    # {\"nickname\":\"NICKNAME\",\"response\":\"getCybersourceTokenByID.html\"}
    # @param recurring_subscription_id The recurring-subscription-info-subscription-ID of the cybersource token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [CybersourceTokenPagedMetadata]
    def get_cybersource_token_by_recurring_subscription_id(recurring_subscription_id, opts = {})
      data, _status_code, _headers = get_cybersource_token_by_recurring_subscription_id_with_http_info(recurring_subscription_id, opts)
      return data
    end

    # Returns a single cybersource-token, specified by the recurring-subscription-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;NICKNAME\&quot;,\&quot;response\&quot;:\&quot;getCybersourceTokenByID.html\&quot;}
    # @param recurring_subscription_id The recurring-subscription-info-subscription-ID of the cybersource token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(CybersourceTokenPagedMetadata, Fixnum, Hash)>] CybersourceTokenPagedMetadata data, response status code and response headers
    def get_cybersource_token_by_recurring_subscription_id_with_http_info(recurring_subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CybersourcetokensApi.get_cybersource_token_by_recurring_subscription_id ..."
      end
      # verify the required parameter 'recurring_subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'recurring_subscription_id' when calling CybersourcetokensApi.get_cybersource_token_by_recurring_subscription_id" if recurring_subscription_id.nil?
      # resource path
      local_var_path = "/cybersource-tokens/recurring-subscription-info/{recurring-subscription-ID}".sub('{format}','json').sub('{' + 'recurring-subscription-ID' + '}', recurring_subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CybersourceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CybersourcetokensApi#get_cybersource_token_by_recurring_subscription_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retires the cybersource token specified by the token-ID parameter.
    # {\"nickname\":\"NICKNAME\",\"response\":\"deleteCybersourceToken.html\"}
    # @param token_id ID of the cybersource-token.
    # @param organizations A list of organization-IDs used to restrict the scope of API calls.
    # @param [Hash] opts the optional parameters
    # @return [CybersourceTokenPagedMetadata]
    def retire_cybersource_token(token_id, organizations, opts = {})
      data, _status_code, _headers = retire_cybersource_token_with_http_info(token_id, organizations, opts)
      return data
    end

    # Retires the cybersource token specified by the token-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;NICKNAME\&quot;,\&quot;response\&quot;:\&quot;deleteCybersourceToken.html\&quot;}
    # @param token_id ID of the cybersource-token.
    # @param organizations A list of organization-IDs used to restrict the scope of API calls.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CybersourceTokenPagedMetadata, Fixnum, Hash)>] CybersourceTokenPagedMetadata data, response status code and response headers
    def retire_cybersource_token_with_http_info(token_id, organizations, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CybersourcetokensApi.retire_cybersource_token ..."
      end
      # verify the required parameter 'token_id' is set
      fail ArgumentError, "Missing the required parameter 'token_id' when calling CybersourcetokensApi.retire_cybersource_token" if token_id.nil?
      # verify the required parameter 'organizations' is set
      fail ArgumentError, "Missing the required parameter 'organizations' when calling CybersourcetokensApi.retire_cybersource_token" if organizations.nil?
      # resource path
      local_var_path = "/cybersource-tokens/{token-ID}".sub('{format}','json').sub('{' + 'token-ID' + '}', token_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(organizations, :multi)

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CybersourceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CybersourcetokensApi#retire_cybersource_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a cybersource-token.
    # {\"nickname\":\"Update a cybersource-token\",\"request\":\"updateCybersourceTokenRequest.html\",\"response\":\"updateCybersourceTokenResponse.html\"}
    # @param cybersource_token The cybersource-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [CybersourceTokenPagedMetadata]
    def update_cybersource_token(cybersource_token, opts = {})
      data, _status_code, _headers = update_cybersource_token_with_http_info(cybersource_token, opts)
      return data
    end

    # Update a cybersource-token.
    # {\&quot;nickname\&quot;:\&quot;Update a cybersource-token\&quot;,\&quot;request\&quot;:\&quot;updateCybersourceTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateCybersourceTokenResponse.html\&quot;}
    # @param cybersource_token The cybersource-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(CybersourceTokenPagedMetadata, Fixnum, Hash)>] CybersourceTokenPagedMetadata data, response status code and response headers
    def update_cybersource_token_with_http_info(cybersource_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CybersourcetokensApi.update_cybersource_token ..."
      end
      # verify the required parameter 'cybersource_token' is set
      fail ArgumentError, "Missing the required parameter 'cybersource_token' when calling CybersourcetokensApi.update_cybersource_token" if cybersource_token.nil?
      # resource path
      local_var_path = "/cybersource-tokens".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(cybersource_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'CybersourceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CybersourcetokensApi#update_cybersource_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
