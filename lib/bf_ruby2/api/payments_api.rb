=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require "uri"

module Bfwd
  class PaymentsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a payment.
    # {\"nickname\":\"Create a new payment\",\"request\":\"createPaymentRequest.html\",\"response\":\"createPaymentResponse.html\"}
    # @param payment The payment object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [PaymentPagedMetadata]
    def create_payment(payment, opts = {})
      data, _status_code, _headers = create_payment_with_http_info(payment, opts)
      return data
    end

    # Create a payment.
    # {\&quot;nickname\&quot;:\&quot;Create a new payment\&quot;,\&quot;request\&quot;:\&quot;createPaymentRequest.html\&quot;,\&quot;response\&quot;:\&quot;createPaymentResponse.html\&quot;}
    # @param payment The payment object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def create_payment_with_http_info(payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.create_payment ..."
      end
      # verify the required parameter 'payment' is set
      if @api_client.config.client_side_validation && payment.nil?
        fail ArgumentError, "Missing the required parameter 'payment' when calling PaymentsApi.create_payment"
      end
      # resource path
      local_var_path = "/payments"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml', 'application/xml', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#create_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of all payments. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all payments\",\"response\":\"getPaymentAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payments to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentPagedMetadata]
    def get_all_payments(opts = {})
      data, _status_code, _headers = get_all_payments_with_http_info(opts)
      return data
    end

    # Returns a collection of all payments. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all payments\&quot;,\&quot;response\&quot;:\&quot;getPaymentAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_all_payments_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_all_payments ..."
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payments"

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_all_payments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves payments in CSV format.
    # { \"nickname\":\"Payments CSV\",\"response\":\"payments.csv\"}
    # @param received_start The UTC DateTime specifying the start of the interval within which payments were received.
    # @param received_end The UTC DateTime specifying the end of the interval within which payments were received.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order The direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [PaymentPagedMetadata]
    def get_payment_as_csv(received_start, received_end, opts = {})
      data, _status_code, _headers = get_payment_as_csv_with_http_info(received_start, received_end, opts)
      return data
    end

    # Retrieves payments in CSV format.
    # { \&quot;nickname\&quot;:\&quot;Payments CSV\&quot;,\&quot;response\&quot;:\&quot;payments.csv\&quot;}
    # @param received_start The UTC DateTime specifying the start of the interval within which payments were received.
    # @param received_end The UTC DateTime specifying the end of the interval within which payments were received.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order The direction of any ordering, either ASC or DESC.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_payment_as_csv_with_http_info(received_start, received_end, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_payment_as_csv ..."
      end
      # verify the required parameter 'received_start' is set
      if @api_client.config.client_side_validation && received_start.nil?
        fail ArgumentError, "Missing the required parameter 'received_start' when calling PaymentsApi.get_payment_as_csv"
      end
      # verify the required parameter 'received_end' is set
      if @api_client.config.client_side_validation && received_end.nil?
        fail ArgumentError, "Missing the required parameter 'received_end' when calling PaymentsApi.get_payment_as_csv"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payments/csv"

      # query parameters
      query_params = {}
      query_params[:'received_start'] = received_start
      query_params[:'received_end'] = received_end
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/csv'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_as_csv\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single payment, specified by the payment-ID parameter.
    # {\"nickname\":\"Retrieve an existing payment\",\"response\":\"getPaymentByID.html\"}
    # @param payment_id The unique string-ID of the payment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [PaymentPagedMetadata]
    def get_payment_by_id(payment_id, opts = {})
      data, _status_code, _headers = get_payment_by_id_with_http_info(payment_id, opts)
      return data
    end

    # Returns a single payment, specified by the payment-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve an existing payment\&quot;,\&quot;response\&quot;:\&quot;getPaymentByID.html\&quot;}
    # @param payment_id The unique string-ID of the payment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_payment_by_id_with_http_info(payment_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_payment_by_id ..."
      end
      # verify the required parameter 'payment_id' is set
      if @api_client.config.client_side_validation && payment_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_id' when calling PaymentsApi.get_payment_by_id"
      end
      # resource path
      local_var_path = "/payments/{payment-ID}".sub('{' + 'payment-ID' + '}', payment_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of payments, specified by the invoice-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get for invoice\",\"response\":\"getPaymentByInvoice.html\"}
    # @param invoice_id The string ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payments to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentPagedMetadata]
    def get_payment_by_invoice_id(invoice_id, opts = {})
      data, _status_code, _headers = get_payment_by_invoice_id_with_http_info(invoice_id, opts)
      return data
    end

    # Returns a collection of payments, specified by the invoice-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get for invoice\&quot;,\&quot;response\&quot;:\&quot;getPaymentByInvoice.html\&quot;}
    # @param invoice_id The string ID of the account
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_payment_by_invoice_id_with_http_info(invoice_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_payment_by_invoice_id ..."
      end
      # verify the required parameter 'invoice_id' is set
      if @api_client.config.client_side_validation && invoice_id.nil?
        fail ArgumentError, "Missing the required parameter 'invoice_id' when calling PaymentsApi.get_payment_by_invoice_id"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payments/invoice/{invoice-ID}".sub('{' + 'invoice-ID' + '}', invoice_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_by_invoice_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of payments, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by gateway\",\"response\":\"getPaymentByGateway.html\"}
    # @param gateway The payment gateway which generated the payment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payments to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentPagedMetadata]
    def get_payment_by_payment_gateway(gateway, opts = {})
      data, _status_code, _headers = get_payment_by_payment_gateway_with_http_info(gateway, opts)
      return data
    end

    # Returns a collection of payments, specified by the gateway parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by gateway\&quot;,\&quot;response\&quot;:\&quot;getPaymentByGateway.html\&quot;}
    # @param gateway The payment gateway which generated the payment.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_payment_by_payment_gateway_with_http_info(gateway, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_payment_by_payment_gateway ..."
      end
      # verify the required parameter 'gateway' is set
      if @api_client.config.client_side_validation && gateway.nil?
        fail ArgumentError, "Missing the required parameter 'gateway' when calling PaymentsApi.get_payment_by_payment_gateway"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['cybersource_token', 'card_vault', 'paypal_simple', 'locustworld', 'free', 'coupon', 'credit_note', 'stripe', 'braintree', 'balanced', 'paypal', 'billforward_test', 'offline', 'trial', 'stripeACH', 'authorizeNet', 'spreedly', 'sagePay', 'trustCommerce', 'payvision', 'kash'].include?(gateway)
        fail ArgumentError, "invalid value for 'gateway', must be one of cybersource_token, card_vault, paypal_simple, locustworld, free, coupon, credit_note, stripe, braintree, balanced, paypal, billforward_test, offline, trial, stripeACH, authorizeNet, spreedly, sagePay, trustCommerce, payvision, kash"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payments/gateway/{gateway}".sub('{' + 'gateway' + '}', gateway.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_by_payment_gateway\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of payments, specified by the payment-method-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by payment method\",\"response\":\"getPaymentByPaymentMethod.html\"}
    # @param payment_method_id ID of the PaymentMethod
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return. (default to 0)
    # @option opts [Integer] :records The maximum number of payments to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [PaymentPagedMetadata]
    def get_payment_by_payment_method_id(payment_method_id, opts = {})
      data, _status_code, _headers = get_payment_by_payment_method_id_with_http_info(payment_method_id, opts)
      return data
    end

    # Returns a collection of payments, specified by the payment-method-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by payment method\&quot;,\&quot;response\&quot;:\&quot;getPaymentByPaymentMethod.html\&quot;}
    # @param payment_method_id ID of the PaymentMethod
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first payment to return.
    # @option opts [Integer] :records The maximum number of payments to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def get_payment_by_payment_method_id_with_http_info(payment_method_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.get_payment_by_payment_method_id ..."
      end
      # verify the required parameter 'payment_method_id' is set
      if @api_client.config.client_side_validation && payment_method_id.nil?
        fail ArgumentError, "Missing the required parameter 'payment_method_id' when calling PaymentsApi.get_payment_by_payment_method_id"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/payments/payment-method/{payment-method-ID}".sub('{' + 'payment-method-ID' + '}', payment_method_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#get_payment_by_payment_method_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a payment.
    # {\"nickname\":\"Update a payment\",\"request\":\"updatePaymentRequest.html\",\"response\":\"updatePaymentResponse.html\"}
    # @param payment The payment object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [PaymentPagedMetadata]
    def update_payment(payment, opts = {})
      data, _status_code, _headers = update_payment_with_http_info(payment, opts)
      return data
    end

    # Update a payment.
    # {\&quot;nickname\&quot;:\&quot;Update a payment\&quot;,\&quot;request\&quot;:\&quot;updatePaymentRequest.html\&quot;,\&quot;response\&quot;:\&quot;updatePaymentResponse.html\&quot;}
    # @param payment The payment object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(PaymentPagedMetadata, Fixnum, Hash)>] PaymentPagedMetadata data, response status code and response headers
    def update_payment_with_http_info(payment, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentsApi.update_payment ..."
      end
      # verify the required parameter 'payment' is set
      if @api_client.config.client_side_validation && payment.nil?
        fail ArgumentError, "Missing the required parameter 'payment' when calling PaymentsApi.update_payment"
      end
      # resource path
      local_var_path = "/payments"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/xml', 'application/xml', 'application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payment)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'PaymentPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentsApi#update_payment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
