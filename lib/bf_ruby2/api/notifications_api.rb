=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require "uri"

module Bfwd
  class NotificationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Acknowledge a newly recevied notification.
    # {\"nickname\":\"Acknowledge\",\"response\":\"getNotificationACK.html\"}
    # @param notification_id ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [NotificationPagedMetadata]
    def ack_notification(notification_id, opts = {})
      data, _status_code, _headers = ack_notification_with_http_info(notification_id, opts)
      return data
    end

    # Acknowledge a newly recevied notification.
    # {\&quot;nickname\&quot;:\&quot;Acknowledge\&quot;,\&quot;response\&quot;:\&quot;getNotificationACK.html\&quot;}
    # @param notification_id ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def ack_notification_with_http_info(notification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.ack_notification ..."
      end
      # verify the required parameter 'notification_id' is set
      if @api_client.config.client_side_validation && notification_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_id' when calling NotificationsApi.ack_notification"
      end
      # resource path
      local_var_path = "/notifications/ack/{notification-ID}".sub('{' + 'notification-ID' + '}', notification_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#ack_notification\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of all notifications. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all notifications\",\"response\":\"getNotificationAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first Subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of Subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [NotificationPagedMetadata]
    def get_all_notifications(opts = {})
      data, _status_code, _headers = get_all_notifications_with_http_info(opts)
      return data
    end

    # Returns a collection of all notifications. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all notifications\&quot;,\&quot;response\&quot;:\&quot;getNotificationAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first Subscription to return.
    # @option opts [Integer] :records The maximum number of Subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def get_all_notifications_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_all_notifications ..."
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/notifications"

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_all_notifications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of notifications, specified by the entity-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by entity\",\"response\":\"getNotificationBySubscriptionID.html\"}
    # @param entity_id The string entity-ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first notification to return. (default to 0)
    # @option opts [Integer] :records The maximum number of notifications to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [NotificationPagedMetadata]
    def get_notification_by_entity_id(entity_id, opts = {})
      data, _status_code, _headers = get_notification_by_entity_id_with_http_info(entity_id, opts)
      return data
    end

    # Returns a collection of notifications, specified by the entity-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by entity\&quot;,\&quot;response\&quot;:\&quot;getNotificationBySubscriptionID.html\&quot;}
    # @param entity_id The string entity-ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first notification to return.
    # @option opts [Integer] :records The maximum number of notifications to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def get_notification_by_entity_id_with_http_info(entity_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_notification_by_entity_id ..."
      end
      # verify the required parameter 'entity_id' is set
      if @api_client.config.client_side_validation && entity_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_id' when calling NotificationsApi.get_notification_by_entity_id"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/notifications/entity-ID/{entity-ID}".sub('{' + 'entity-ID' + '}', entity_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_notification_by_entity_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single notification, specified by the notification-ID parameter.
    # {\"nickname\":\"Retrieve an existing notification\",\"response\":\"getNotificationByID.html\"}
    # @param notification_id ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [NotificationPagedMetadata]
    def get_notification_by_id(notification_id, opts = {})
      data, _status_code, _headers = get_notification_by_id_with_http_info(notification_id, opts)
      return data
    end

    # Returns a single notification, specified by the notification-ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve an existing notification\&quot;,\&quot;response\&quot;:\&quot;getNotificationByID.html\&quot;}
    # @param notification_id ID of the notification.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def get_notification_by_id_with_http_info(notification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_notification_by_id ..."
      end
      # verify the required parameter 'notification_id' is set
      if @api_client.config.client_side_validation && notification_id.nil?
        fail ArgumentError, "Missing the required parameter 'notification_id' when calling NotificationsApi.get_notification_by_id"
      end
      # resource path
      local_var_path = "/notifications/{notification-ID}".sub('{' + 'notification-ID' + '}', notification_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['text/plain'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_notification_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of notification objects with created times within the period specified by the lower-threshold and upper-threshold parameters for the given webhook id. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by creation\",\"response\":\"getNotificationByCreated.html\"}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param webhook_id The id of the webhook.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @option opts [Integer] :safety_margin How many seconds behind server-time upperThreshold may approach. (default to 10)
    # @return [NotificationPagedMetadata]
    def get_notifications_by_webhook_id(lower_threshold, upper_threshold, webhook_id, opts = {})
      data, _status_code, _headers = get_notifications_by_webhook_id_with_http_info(lower_threshold, upper_threshold, webhook_id, opts)
      return data
    end

    # Returns a collection of notification objects with created times within the period specified by the lower-threshold and upper-threshold parameters for the given webhook id. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by creation\&quot;,\&quot;response\&quot;:\&quot;getNotificationByCreated.html\&quot;}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param webhook_id The id of the webhook.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [Integer] :safety_margin How many seconds behind server-time upperThreshold may approach.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def get_notifications_by_webhook_id_with_http_info(lower_threshold, upper_threshold, webhook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_notifications_by_webhook_id ..."
      end
      # verify the required parameter 'lower_threshold' is set
      if @api_client.config.client_side_validation && lower_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling NotificationsApi.get_notifications_by_webhook_id"
      end
      # verify the required parameter 'upper_threshold' is set
      if @api_client.config.client_side_validation && upper_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling NotificationsApi.get_notifications_by_webhook_id"
      end
      # verify the required parameter 'webhook_id' is set
      if @api_client.config.client_side_validation && webhook_id.nil?
        fail ArgumentError, "Missing the required parameter 'webhook_id' when calling NotificationsApi.get_notifications_by_webhook_id"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/notifications/{lower-threshold}/{upper-threshold}/{webhookID}".sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s).sub('{' + 'webhookID' + '}', webhook_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'safety_margin'] = opts[:'safety_margin'] if !opts[:'safety_margin'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_notifications_by_webhook_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of notification objects with created times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by creation\",\"response\":\"getNotificationByCreated.html\"}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return. (default to 0)
    # @option opts [Integer] :records The maximum number of taxation-links to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @option opts [Integer] :safety_margin How many seconds behind server-time upperThreshold may approach. (default to 10)
    # @return [NotificationPagedMetadata]
    def get_notifications_within_date_range(lower_threshold, upper_threshold, opts = {})
      data, _status_code, _headers = get_notifications_within_date_range_with_http_info(lower_threshold, upper_threshold, opts)
      return data
    end

    # Returns a collection of notification objects with created times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by creation\&quot;,\&quot;response\&quot;:\&quot;getNotificationByCreated.html\&quot;}
    # @param lower_threshold The UTC DateTime specifying the start of the result period.
    # @param upper_threshold The UTC DateTime specifying the end of the result period.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first taxation-link to return.
    # @option opts [Integer] :records The maximum number of taxation-links to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [Integer] :safety_margin How many seconds behind server-time upperThreshold may approach.
    # @return [Array<(NotificationPagedMetadata, Fixnum, Hash)>] NotificationPagedMetadata data, response status code and response headers
    def get_notifications_within_date_range_with_http_info(lower_threshold, upper_threshold, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: NotificationsApi.get_notifications_within_date_range ..."
      end
      # verify the required parameter 'lower_threshold' is set
      if @api_client.config.client_side_validation && lower_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'lower_threshold' when calling NotificationsApi.get_notifications_within_date_range"
      end
      # verify the required parameter 'upper_threshold' is set
      if @api_client.config.client_side_validation && upper_threshold.nil?
        fail ArgumentError, "Missing the required parameter 'upper_threshold' when calling NotificationsApi.get_notifications_within_date_range"
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/notifications/{lower-threshold}/{upper-threshold}".sub('{' + 'lower-threshold' + '}', lower_threshold.to_s).sub('{' + 'upper-threshold' + '}', upper_threshold.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'safety_margin'] = opts[:'safety_margin'] if !opts[:'safety_margin'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json; charset=utf-8'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'NotificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: NotificationsApi#get_notifications_within_date_range\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
