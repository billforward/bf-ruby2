=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Bfwd
  class ProfilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Returns a collection of all profiles. By default 10 values are returned. Records are returned in natural order
    # {\"nickname\":\"Get all profiles\",\"response\":\"getProfileAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return. (default to 0)
    # @option opts [Integer] :records The maximum number of profiles to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [ProfilePagedMetadata]
    def get_all_profiles(opts = {})
      data, _status_code, _headers = get_all_profiles_with_http_info(opts)
      return data
    end

    # Returns a collection of all profiles. By default 10 values are returned. Records are returned in natural order
    # {\&quot;nickname\&quot;:\&quot;Get all profiles\&quot;,\&quot;response\&quot;:\&quot;getProfileAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return.
    # @option opts [Integer] :records The maximum number of profiles to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(ProfilePagedMetadata, Fixnum, Hash)>] ProfilePagedMetadata data, response status code and response headers
    def get_all_profiles_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProfilesApi.get_all_profiles ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/profiles".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfilePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_all_profiles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single profile, specified by the ID parameter.
    # {\"nickname\":\"Retrieve an existing profile\",\"response\":\"getProfileByID.html\"}
    # @param profile_id ID of the Profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [ProfilePagedMetadata]
    def get_profile(profile_id, opts = {})
      data, _status_code, _headers = get_profile_with_http_info(profile_id, opts)
      return data
    end

    # Returns a single profile, specified by the ID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve an existing profile\&quot;,\&quot;response\&quot;:\&quot;getProfileByID.html\&quot;}
    # @param profile_id ID of the Profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(ProfilePagedMetadata, Fixnum, Hash)>] ProfilePagedMetadata data, response status code and response headers
    def get_profile_with_http_info(profile_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProfilesApi.get_profile ..."
      end
      # verify the required parameter 'profile_id' is set
      fail ArgumentError, "Missing the required parameter 'profile_id' when calling ProfilesApi.get_profile" if profile_id.nil?
      # resource path
      local_var_path = "/profiles/{profile-ID}".sub('{format}','json').sub('{' + 'profile-ID' + '}', profile_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfilePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of profiles, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order
    # {\"nickname\":\"Retrieve by account\",\"response\":\"getProfileByAccountID.html\"}
    # @param account_id The account-ID of the profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return. (default to 0)
    # @option opts [Integer] :records The maximum number of profiles to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [ProfilePagedMetadata]
    def get_profile_by_account_id(account_id, opts = {})
      data, _status_code, _headers = get_profile_by_account_id_with_http_info(account_id, opts)
      return data
    end

    # Returns a collection of profiles, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order
    # {\&quot;nickname\&quot;:\&quot;Retrieve by account\&quot;,\&quot;response\&quot;:\&quot;getProfileByAccountID.html\&quot;}
    # @param account_id The account-ID of the profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return.
    # @option opts [Integer] :records The maximum number of profiles to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(ProfilePagedMetadata, Fixnum, Hash)>] ProfilePagedMetadata data, response status code and response headers
    def get_profile_by_account_id_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProfilesApi.get_profile_by_account_id ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling ProfilesApi.get_profile_by_account_id" if account_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/profiles/account/{account-ID}".sub('{format}','json').sub('{' + 'account-ID' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfilePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_profile_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single profile, specified by the email parameter.
    # {\"nickname\":\"Retrieve by e-mail\",\"response\":\"getProfileByEmail.html\"}
    # @param email The email address of the profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return. (default to 0)
    # @option opts [Integer] :records The maximum number of profiles to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired profiles should be returned. (default to false)
    # @return [ProfilePagedMetadata]
    def get_profile_by_email_address(email, opts = {})
      data, _status_code, _headers = get_profile_by_email_address_with_http_info(email, opts)
      return data
    end

    # Returns a single profile, specified by the email parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by e-mail\&quot;,\&quot;response\&quot;:\&quot;getProfileByEmail.html\&quot;}
    # @param email The email address of the profile.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organizations used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first profile to return.
    # @option opts [Integer] :records The maximum number of profiles to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired profiles should be returned.
    # @return [Array<(ProfilePagedMetadata, Fixnum, Hash)>] ProfilePagedMetadata data, response status code and response headers
    def get_profile_by_email_address_with_http_info(email, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProfilesApi.get_profile_by_email_address ..."
      end
      # verify the required parameter 'email' is set
      fail ArgumentError, "Missing the required parameter 'email' when calling ProfilesApi.get_profile_by_email_address" if email.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/profiles/email/{email}".sub('{format}','json').sub('{' + 'email' + '}', email.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfilePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#get_profile_by_email_address\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a profile
    # {\"nickname\":\"Update a profile\",\"request\":\"updateProfileRequest.html\",\"response\":\"updateProfileResponse.html\"}
    # @param request The profile object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [ProfilePagedMetadata]
    def update_profile(request, opts = {})
      data, _status_code, _headers = update_profile_with_http_info(request, opts)
      return data
    end

    # Update a profile
    # {\&quot;nickname\&quot;:\&quot;Update a profile\&quot;,\&quot;request\&quot;:\&quot;updateProfileRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateProfileResponse.html\&quot;}
    # @param request The profile object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProfilePagedMetadata, Fixnum, Hash)>] ProfilePagedMetadata data, response status code and response headers
    def update_profile_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProfilesApi.update_profile ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling ProfilesApi.update_profile" if request.nil?
      # resource path
      local_var_path = "/profiles".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProfilePagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProfilesApi#update_profile\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
