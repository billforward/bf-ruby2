=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class ConfigurationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create a configuration.
    # {\"nickname\":\"Create a new configuration\",\"request\":\"createConfigurationRequest.html\",\"response\":\"createConfigurationResponse.html\"}
    # @param configuration The configuration object to be created.
    # @param [Hash] opts the optional parameters
    # @return [APIConfigurationPagedMetadata]
    def create_api_configuration(configuration, opts = {})
      data, _status_code, _headers = create_api_configuration_with_http_info(configuration, opts)
      return data
    end

    # Create a configuration.
    # {\&quot;nickname\&quot;:\&quot;Create a new configuration\&quot;,\&quot;request\&quot;:\&quot;createConfigurationRequest.html\&quot;,\&quot;response\&quot;:\&quot;createConfigurationResponse.html\&quot;}
    # @param configuration The configuration object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConfigurationPagedMetadata, Fixnum, Hash)>] APIConfigurationPagedMetadata data, response status code and response headers
    def create_api_configuration_with_http_info(configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigurationsApi.create_api_configuration ..."
      end
      # verify the required parameter 'configuration' is set
      fail ArgumentError, "Missing the required parameter 'configuration' when calling ConfigurationsApi.create_api_configuration" if configuration.nil?
      # resource path
      local_var_path = "/configurations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConfigurationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigurationsApi#create_api_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of configurations. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all configurations\",\"response\":\"getConfigurationsAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first pricing-component to return. (default to 0)
    # @option opts [Integer] :records The maximum number of pricing-components to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [APIConfigurationPagedMetadata]
    def get_all_api_configurations(opts = {})
      data, _status_code, _headers = get_all_api_configurations_with_http_info(opts)
      return data
    end

    # Returns a collection of configurations. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all configurations\&quot;,\&quot;response\&quot;:\&quot;getConfigurationsAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first pricing-component to return.
    # @option opts [Integer] :records The maximum number of pricing-components to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(APIConfigurationPagedMetadata, Fixnum, Hash)>] APIConfigurationPagedMetadata data, response status code and response headers
    def get_all_api_configurations_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigurationsApi.get_all_api_configurations ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/configurations".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConfigurationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigurationsApi#get_all_api_configurations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single configuration, specified by the type parameter.
    # {\"nickname\":\"Retrieve by payment gateway\",\"response\":\"getConfigurationByType.html\"}
    # @param configuration_type The unique type of the configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first pricing-component to return. (default to 0)
    # @option opts [Integer] :records The maximum number of pricing-components to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [APIConfigurationPagedMetadata]
    def get_api_configurations_by_type(configuration_type, opts = {})
      data, _status_code, _headers = get_api_configurations_by_type_with_http_info(configuration_type, opts)
      return data
    end

    # Returns a single configuration, specified by the type parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by payment gateway\&quot;,\&quot;response\&quot;:\&quot;getConfigurationByType.html\&quot;}
    # @param configuration_type The unique type of the configuration.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first pricing-component to return.
    # @option opts [Integer] :records The maximum number of pricing-components to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(APIConfigurationPagedMetadata, Fixnum, Hash)>] APIConfigurationPagedMetadata data, response status code and response headers
    def get_api_configurations_by_type_with_http_info(configuration_type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigurationsApi.get_api_configurations_by_type ..."
      end
      # verify the required parameter 'configuration_type' is set
      fail ArgumentError, "Missing the required parameter 'configuration_type' when calling ConfigurationsApi.get_api_configurations_by_type" if configuration_type.nil?
      # verify enum value
      unless ['Balanced', 'Braintree', 'Cybersource', 'Paypal', 'Stripe', 'AuthorizeNet', 'Spreedly', 'SagePay', 'TrustCommerce', 'Payvision', 'Kash'].include?(configuration_type)
        fail ArgumentError, "invalid value for 'configuration_type', must be one of Balanced, Braintree, Cybersource, Paypal, Stripe, AuthorizeNet, Spreedly, SagePay, TrustCommerce, Payvision, Kash"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/configurations/type/{configuration-type}".sub('{format}','json').sub('{' + 'configuration-type' + '}', configuration_type.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConfigurationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigurationsApi#get_api_configurations_by_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a configuration.
    # {\"nickname\":\"Update a configuration\",\"request\":\"updateConfigurationRequest.html\",\"response\":\"updateConfigurationResponse.html\"}
    # @param configuration The configuration object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [APIConfigurationPagedMetadata]
    def update_api_configuration(configuration, opts = {})
      data, _status_code, _headers = update_api_configuration_with_http_info(configuration, opts)
      return data
    end

    # Update a configuration.
    # {\&quot;nickname\&quot;:\&quot;Update a configuration\&quot;,\&quot;request\&quot;:\&quot;updateConfigurationRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateConfigurationResponse.html\&quot;}
    # @param configuration The configuration object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(APIConfigurationPagedMetadata, Fixnum, Hash)>] APIConfigurationPagedMetadata data, response status code and response headers
    def update_api_configuration_with_http_info(configuration, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ConfigurationsApi.update_api_configuration ..."
      end
      # verify the required parameter 'configuration' is set
      fail ArgumentError, "Missing the required parameter 'configuration' when calling ConfigurationsApi.update_api_configuration" if configuration.nil?
      # resource path
      local_var_path = "/configurations".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(configuration)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'APIConfigurationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ConfigurationsApi#update_api_configuration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
