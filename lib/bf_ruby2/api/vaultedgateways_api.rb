=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module Bfwd
  class VaultedgatewaysApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an authorize-net-token.
    # {\"nickname\":\"Create a authorize-net-token\",\"request\":\"createAuthorizeNetTokenRequest.html\",\"response\":\"createAuthorizeNetTokenResponse.html\"}
    # @param authorize_net_token The authorize-net-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [AuthorizeNetTokenPagedMetadata]
    def create_authorize_net_token(authorize_net_token, opts = {})
      data, _status_code, _headers = create_authorize_net_token_with_http_info(authorize_net_token, opts)
      return data
    end

    # Create an authorize-net-token.
    # {\&quot;nickname\&quot;:\&quot;Create a authorize-net-token\&quot;,\&quot;request\&quot;:\&quot;createAuthorizeNetTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;createAuthorizeNetTokenResponse.html\&quot;}
    # @param authorize_net_token The authorize-net-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthorizeNetTokenPagedMetadata, Fixnum, Hash)>] AuthorizeNetTokenPagedMetadata data, response status code and response headers
    def create_authorize_net_token_with_http_info(authorize_net_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.create_authorize_net_token ..."
      end
      # verify the required parameter 'authorize_net_token' is set
      fail ArgumentError, "Missing the required parameter 'authorize_net_token' when calling VaultedgatewaysApi.create_authorize_net_token" if authorize_net_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/authorize-net".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(authorize_net_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'AuthorizeNetTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#create_authorize_net_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a braintree-token.
    # {\"nickname\":\"Create a braintree-token\",\"request\":\"createBraintreeTokenRequest.html\",\"response\":\"BraintreeTokenResponse.html\"}
    # @param braintree_token The braintree-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [BraintreeTokenPagedMetadata]
    def create_braintree_token(braintree_token, opts = {})
      data, _status_code, _headers = create_braintree_token_with_http_info(braintree_token, opts)
      return data
    end

    # Create a braintree-token.
    # {\&quot;nickname\&quot;:\&quot;Create a braintree-token\&quot;,\&quot;request\&quot;:\&quot;createBraintreeTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;BraintreeTokenResponse.html\&quot;}
    # @param braintree_token The braintree-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BraintreeTokenPagedMetadata, Fixnum, Hash)>] BraintreeTokenPagedMetadata data, response status code and response headers
    def create_braintree_token_with_http_info(braintree_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.create_braintree_token ..."
      end
      # verify the required parameter 'braintree_token' is set
      fail ArgumentError, "Missing the required parameter 'braintree_token' when calling VaultedgatewaysApi.create_braintree_token" if braintree_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/braintree".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(braintree_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BraintreeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#create_braintree_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a stripe-ACH-token.
    # {\"nickname\":\"Create a stripe-ACH-token\",\"request\":\"createstripeACHTokenRequest.html\",\"response\":\"createstripeACHTokenResponse.html\"}
    # @param stripe_ach_token The stripe-ACH-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [StripeACHTokenPagedMetadata]
    def create_stripe_ach_token(stripe_ach_token, opts = {})
      data, _status_code, _headers = create_stripe_ach_token_with_http_info(stripe_ach_token, opts)
      return data
    end

    # Create a stripe-ACH-token.
    # {\&quot;nickname\&quot;:\&quot;Create a stripe-ACH-token\&quot;,\&quot;request\&quot;:\&quot;createstripeACHTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;createstripeACHTokenResponse.html\&quot;}
    # @param stripe_ach_token The stripe-ACH-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StripeACHTokenPagedMetadata, Fixnum, Hash)>] StripeACHTokenPagedMetadata data, response status code and response headers
    def create_stripe_ach_token_with_http_info(stripe_ach_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.create_stripe_ach_token ..."
      end
      # verify the required parameter 'stripe_ach_token' is set
      fail ArgumentError, "Missing the required parameter 'stripe_ach_token' when calling VaultedgatewaysApi.create_stripe_ach_token" if stripe_ach_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe-ACH".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stripe_ach_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeACHTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#create_stripe_ach_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a stripe-token.
    # {\"nickname\":\"Create a stripe-token\",\"request\":\"createstripeTokenRequest.html\",\"response\":\"createstripeTokenResponse.html\"}
    # @param stripe_token The stripe-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [StripeTokenPagedMetadata]
    def create_stripe_token(stripe_token, opts = {})
      data, _status_code, _headers = create_stripe_token_with_http_info(stripe_token, opts)
      return data
    end

    # Create a stripe-token.
    # {\&quot;nickname\&quot;:\&quot;Create a stripe-token\&quot;,\&quot;request\&quot;:\&quot;createstripeTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;createstripeTokenResponse.html\&quot;}
    # @param stripe_token The stripe-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StripeTokenPagedMetadata, Fixnum, Hash)>] StripeTokenPagedMetadata data, response status code and response headers
    def create_stripe_token_with_http_info(stripe_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.create_stripe_token ..."
      end
      # verify the required parameter 'stripe_token' is set
      fail ArgumentError, "Missing the required parameter 'stripe_token' when calling VaultedgatewaysApi.create_stripe_token" if stripe_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stripe_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#create_stripe_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a trust-commerce-token.
    # {\"nickname\":\"Create a trust-commerce-token\",\"request\":\"createTrustCommerceTokenRequest.html\",\"response\":\"TrustCommerceTokenResponse.html\"}
    # @param trust_commerce_token The trust-commerce-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [TrustCommerceTokenPagedMetadata]
    def create_trust_commerce_token(trust_commerce_token, opts = {})
      data, _status_code, _headers = create_trust_commerce_token_with_http_info(trust_commerce_token, opts)
      return data
    end

    # Create a trust-commerce-token.
    # {\&quot;nickname\&quot;:\&quot;Create a trust-commerce-token\&quot;,\&quot;request\&quot;:\&quot;createTrustCommerceTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;TrustCommerceTokenResponse.html\&quot;}
    # @param trust_commerce_token The trust-commerce-token object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(TrustCommerceTokenPagedMetadata, Fixnum, Hash)>] TrustCommerceTokenPagedMetadata data, response status code and response headers
    def create_trust_commerce_token_with_http_info(trust_commerce_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.create_trust_commerce_token ..."
      end
      # verify the required parameter 'trust_commerce_token' is set
      fail ArgumentError, "Missing the required parameter 'trust_commerce_token' when calling VaultedgatewaysApi.create_trust_commerce_token" if trust_commerce_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/trustCommerce".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(trust_commerce_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TrustCommerceTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#create_trust_commerce_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a list of braintree-tokens backing PaymentMethods belonging to the specified account parameter.
    # {\"nickname\":\"Retrieve a list of braintree-token\",\"response\":\"getBraintreeByAccountID.html\"}
    # @param account_id The string ID of the account-ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [BraintreeTokenPagedMetadata]
    def get_braintree_by_account_id(account_id, opts = {})
      data, _status_code, _headers = get_braintree_by_account_id_with_http_info(account_id, opts)
      return data
    end

    # Returns a list of braintree-tokens backing PaymentMethods belonging to the specified account parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve a list of braintree-token\&quot;,\&quot;response\&quot;:\&quot;getBraintreeByAccountID.html\&quot;}
    # @param account_id The string ID of the account-ID.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [Array<(BraintreeTokenPagedMetadata, Fixnum, Hash)>] BraintreeTokenPagedMetadata data, response status code and response headers
    def get_braintree_by_account_id_with_http_info(account_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.get_braintree_by_account_id ..."
      end
      # verify the required parameter 'account_id' is set
      fail ArgumentError, "Missing the required parameter 'account_id' when calling VaultedgatewaysApi.get_braintree_by_account_id" if account_id.nil?
      # resource path
      local_var_path = "/vaulted-gateways/braintree/{accountID}".sub('{format}','json').sub('{' + 'accountID' + '}', account_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BraintreeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#get_braintree_by_account_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single stripe-token, specified by the cardDetailsID parameter.
    # {\"nickname\":\"Retrieve a stripe-token by cardDetailsID\",\"response\":\"getStripeTokenByCardDetailsID.html\"}
    # @param card_details_id The card details id of the stripe-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [StripeTokenPagedMetadata]
    def get_by_card_details_id(card_details_id, opts = {})
      data, _status_code, _headers = get_by_card_details_id_with_http_info(card_details_id, opts)
      return data
    end

    # Returns a single stripe-token, specified by the cardDetailsID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve a stripe-token by cardDetailsID\&quot;,\&quot;response\&quot;:\&quot;getStripeTokenByCardDetailsID.html\&quot;}
    # @param card_details_id The card details id of the stripe-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(StripeTokenPagedMetadata, Fixnum, Hash)>] StripeTokenPagedMetadata data, response status code and response headers
    def get_by_card_details_id_with_http_info(card_details_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.get_by_card_details_id ..."
      end
      # verify the required parameter 'card_details_id' is set
      fail ArgumentError, "Missing the required parameter 'card_details_id' when calling VaultedgatewaysApi.get_by_card_details_id" if card_details_id.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe/card-details-id/{cardDetailsID}".sub('{format}','json').sub('{' + 'cardDetailsID' + '}', card_details_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#get_by_card_details_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single stripe-ACH-token, specified by the stripeACHTokenID parameter.
    # {\"nickname\":\"Retrieve a stripe-ACH-token\",\"response\":\"getStripeACHTokenByID.html\"}
    # @param stripe_ach_token_id The string ID of the stripe-ACH-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [StripeACHTokenPagedMetadata]
    def get_stripe_ach(stripe_ach_token_id, opts = {})
      data, _status_code, _headers = get_stripe_ach_with_http_info(stripe_ach_token_id, opts)
      return data
    end

    # Returns a single stripe-ACH-token, specified by the stripeACHTokenID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve a stripe-ACH-token\&quot;,\&quot;response\&quot;:\&quot;getStripeACHTokenByID.html\&quot;}
    # @param stripe_ach_token_id The string ID of the stripe-ACH-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [Array<(StripeACHTokenPagedMetadata, Fixnum, Hash)>] StripeACHTokenPagedMetadata data, response status code and response headers
    def get_stripe_ach_with_http_info(stripe_ach_token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.get_stripe_ach ..."
      end
      # verify the required parameter 'stripe_ach_token_id' is set
      fail ArgumentError, "Missing the required parameter 'stripe_ach_token_id' when calling VaultedgatewaysApi.get_stripe_ach" if stripe_ach_token_id.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe-ACH/{stripeACHTokenID}".sub('{format}','json').sub('{' + 'stripeACHTokenID' + '}', stripe_ach_token_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeACHTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#get_stripe_ach\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a single stripe-token, specified by the stripeTokenID parameter.
    # {\"nickname\":\"Retrieve a stripe-token\",\"response\":\"getStripeTokenByID.html\"}
    # @param stripe_token_id The string ID of the stripe-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [StripeTokenPagedMetadata]
    def get_stripe_token(stripe_token_id, opts = {})
      data, _status_code, _headers = get_stripe_token_with_http_info(stripe_token_id, opts)
      return data
    end

    # Returns a single stripe-token, specified by the stripeTokenID parameter.
    # {\&quot;nickname\&quot;:\&quot;Retrieve a stripe-token\&quot;,\&quot;response\&quot;:\&quot;getStripeTokenByID.html\&quot;}
    # @param stripe_token_id The string ID of the stripe-token.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.Multiple organization-IDs may be specified by repeated use of the query parameter. Example: ...&amp;organizations&#x3D;org1&amp;organizations&#x3D;org2
    # @return [Array<(StripeTokenPagedMetadata, Fixnum, Hash)>] StripeTokenPagedMetadata data, response status code and response headers
    def get_stripe_token_with_http_info(stripe_token_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.get_stripe_token ..."
      end
      # verify the required parameter 'stripe_token_id' is set
      fail ArgumentError, "Missing the required parameter 'stripe_token_id' when calling VaultedgatewaysApi.get_stripe_token" if stripe_token_id.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe/{stripeTokenID}".sub('{format}','json').sub('{' + 'stripeTokenID' + '}', stripe_token_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#get_stripe_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a stripe-ACH-token.
    # {\"nickname\":\"Update a stripe-ACH-token\",\"request\":\"updatestripeACHTokenRequest.html\",\"response\":\"updatestripeACHTokenResponse.html\"}
    # @param stripe_token The stripe-ACH-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [StripeACHTokenPagedMetadata]
    def update_stripe_ach_token(stripe_token, opts = {})
      data, _status_code, _headers = update_stripe_ach_token_with_http_info(stripe_token, opts)
      return data
    end

    # Update a stripe-ACH-token.
    # {\&quot;nickname\&quot;:\&quot;Update a stripe-ACH-token\&quot;,\&quot;request\&quot;:\&quot;updatestripeACHTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;updatestripeACHTokenResponse.html\&quot;}
    # @param stripe_token The stripe-ACH-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StripeACHTokenPagedMetadata, Fixnum, Hash)>] StripeACHTokenPagedMetadata data, response status code and response headers
    def update_stripe_ach_token_with_http_info(stripe_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.update_stripe_ach_token ..."
      end
      # verify the required parameter 'stripe_token' is set
      fail ArgumentError, "Missing the required parameter 'stripe_token' when calling VaultedgatewaysApi.update_stripe_ach_token" if stripe_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe-ACH".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stripe_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeACHTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#update_stripe_ach_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a stripe-token.
    # {\"nickname\":\"Update a stripe-token\",\"request\":\"updatestripeTokenRequest.html\",\"response\":\"updatestripeTokenResponse.html\"}
    # @param stripe_token The stripe-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [StripeTokenPagedMetadata]
    def update_stripe_token(stripe_token, opts = {})
      data, _status_code, _headers = update_stripe_token_with_http_info(stripe_token, opts)
      return data
    end

    # Update a stripe-token.
    # {\&quot;nickname\&quot;:\&quot;Update a stripe-token\&quot;,\&quot;request\&quot;:\&quot;updatestripeTokenRequest.html\&quot;,\&quot;response\&quot;:\&quot;updatestripeTokenResponse.html\&quot;}
    # @param stripe_token The stripe-token object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(StripeTokenPagedMetadata, Fixnum, Hash)>] StripeTokenPagedMetadata data, response status code and response headers
    def update_stripe_token_with_http_info(stripe_token, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.update_stripe_token ..."
      end
      # verify the required parameter 'stripe_token' is set
      fail ArgumentError, "Missing the required parameter 'stripe_token' when calling VaultedgatewaysApi.update_stripe_token" if stripe_token.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(stripe_token)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'StripeTokenPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#update_stripe_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Verify Stripe bank account.
    # {\"nickname\":\"Verify Stripe bank account\",\"response\":\"verifyStripeBankAccount.html\"}
    # @param bank_account_verification The Bank-Account-Verification object.
    # @param [Hash] opts the optional parameters
    # @return [BankAccountVerificationPagedMetadata]
    def verify_bank_account(bank_account_verification, opts = {})
      data, _status_code, _headers = verify_bank_account_with_http_info(bank_account_verification, opts)
      return data
    end

    # Verify Stripe bank account.
    # {\&quot;nickname\&quot;:\&quot;Verify Stripe bank account\&quot;,\&quot;response\&quot;:\&quot;verifyStripeBankAccount.html\&quot;}
    # @param bank_account_verification The Bank-Account-Verification object.
    # @param [Hash] opts the optional parameters
    # @return [Array<(BankAccountVerificationPagedMetadata, Fixnum, Hash)>] BankAccountVerificationPagedMetadata data, response status code and response headers
    def verify_bank_account_with_http_info(bank_account_verification, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.verify_bank_account ..."
      end
      # verify the required parameter 'bank_account_verification' is set
      fail ArgumentError, "Missing the required parameter 'bank_account_verification' when calling VaultedgatewaysApi.verify_bank_account" if bank_account_verification.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe/verify-bank-account".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(bank_account_verification)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'BankAccountVerificationPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#verify_bank_account\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Receive and handle webhook from Stripe.
    # {\"nickname\":\"Receive Stripe webhook\",\"response\":\"receiveStripeWebhook.html\"}
    # @param event The event received.
    # @param [Hash] opts the optional parameters
    # @return [String]
    def webhook(event, opts = {})
      data, _status_code, _headers = webhook_with_http_info(event, opts)
      return data
    end

    # Receive and handle webhook from Stripe.
    # {\&quot;nickname\&quot;:\&quot;Receive Stripe webhook\&quot;,\&quot;response\&quot;:\&quot;receiveStripeWebhook.html\&quot;}
    # @param event The event received.
    # @param [Hash] opts the optional parameters
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def webhook_with_http_info(event, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: VaultedgatewaysApi.webhook ..."
      end
      # verify the required parameter 'event' is set
      fail ArgumentError, "Missing the required parameter 'event' when calling VaultedgatewaysApi.webhook" if event.nil?
      # resource path
      local_var_path = "/vaulted-gateways/stripe/webhook".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(event)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VaultedgatewaysApi#webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
