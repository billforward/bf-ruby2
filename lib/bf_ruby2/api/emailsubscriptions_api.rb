=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class EmailsubscriptionsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Create an email subscription.
    # {\"nickname\":\"Create an email subscription\",\"request\":\"createEmailSubscriptionRequest.html\",\"response\":\"creatEmailSubscriptionResponse.html\"}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [EmailSubscriptionPagedMetadata]
    def create_email_subscription(request, opts = {})
      data, _status_code, _headers = create_email_subscription_with_http_info(request, opts)
      return data
    end

    # Create an email subscription.
    # {\&quot;nickname\&quot;:\&quot;Create an email subscription\&quot;,\&quot;request\&quot;:\&quot;createEmailSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;creatEmailSubscriptionResponse.html\&quot;}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSubscriptionPagedMetadata, Fixnum, Hash)>] EmailSubscriptionPagedMetadata data, response status code and response headers
    def create_email_subscription_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsubscriptionsApi.create_email_subscription ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling EmailsubscriptionsApi.create_email_subscription" if request.nil?
      # resource path
      local_var_path = "/email-subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSubscriptionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsubscriptionsApi#create_email_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Unsubscribe from the email specified by the type parameter.
    # { \"nickname\" : \"Unsubscribe\",\"response\" : \"unsubscribeEmail.html\"}
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [EmailSubscriptionPagedMetadata]
    def delete_email_subscription_by_type(type, opts = {})
      data, _status_code, _headers = delete_email_subscription_by_type_with_http_info(type, opts)
      return data
    end

    # Unsubscribe from the email specified by the type parameter.
    # { \&quot;nickname\&quot; : \&quot;Unsubscribe\&quot;,\&quot;response\&quot; : \&quot;unsubscribeEmail.html\&quot;}
    # @param type 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(EmailSubscriptionPagedMetadata, Fixnum, Hash)>] EmailSubscriptionPagedMetadata data, response status code and response headers
    def delete_email_subscription_by_type_with_http_info(type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsubscriptionsApi.delete_email_subscription_by_type ..."
      end
      # verify the required parameter 'type' is set
      fail ArgumentError, "Missing the required parameter 'type' when calling EmailsubscriptionsApi.delete_email_subscription_by_type" if type.nil?
      # verify enum value
      unless ['FailedPayment', 'InvoicePaid', 'SubscriptionCancellation', 'SubscriptionCancelled', 'SubscriptionPlanMigrated', 'SubscriptionPlanMigrating', 'CardExpired', 'CardExpiring'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of FailedPayment, InvoicePaid, SubscriptionCancellation, SubscriptionCancelled, SubscriptionPlanMigrated, SubscriptionPlanMigrating, CardExpired, CardExpiring"
      end
      # resource path
      local_var_path = "/email-subscriptions/type={type}".sub('{format}','json').sub('{' + 'type' + '}', type.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8', 'text/xml']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSubscriptionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsubscriptionsApi#delete_email_subscription_by_type\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of all email-subscriptions. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all email subscriptions\",\"response\":\"getEmailSubscriptionsAll.html\"}
    # @param state Constrains search to Email Subscriptions of a specific state.
    # @param type Constrains search to Email Subscriptions of a specific type
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first email-subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of email-subscription to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [EmailSubscriptionPagedMetadata]
    def get_all_email_subscriptions(state, type, opts = {})
      data, _status_code, _headers = get_all_email_subscriptions_with_http_info(state, type, opts)
      return data
    end

    # Returns a collection of all email-subscriptions. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all email subscriptions\&quot;,\&quot;response\&quot;:\&quot;getEmailSubscriptionsAll.html\&quot;}
    # @param state Constrains search to Email Subscriptions of a specific state.
    # @param type Constrains search to Email Subscriptions of a specific type
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first email-subscription to return.
    # @option opts [Integer] :records The maximum number of email-subscription to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(EmailSubscriptionPagedMetadata, Fixnum, Hash)>] EmailSubscriptionPagedMetadata data, response status code and response headers
    def get_all_email_subscriptions_with_http_info(state, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsubscriptionsApi.get_all_email_subscriptions ..."
      end
      # verify the required parameter 'state' is set
      fail ArgumentError, "Missing the required parameter 'state' when calling EmailsubscriptionsApi.get_all_email_subscriptions" if state.nil?
      # verify enum value
      unless ['Active', 'Disabled'].include?(state)
        fail ArgumentError, "invalid value for 'state', must be one of Active, Disabled"
      end
      # verify the required parameter 'type' is set
      fail ArgumentError, "Missing the required parameter 'type' when calling EmailsubscriptionsApi.get_all_email_subscriptions" if type.nil?
      # verify enum value
      unless ['FailedPayment', 'InvoicePaid', 'SubscriptionCancellation', 'SubscriptionCancelled', 'SubscriptionPlanMigrated', 'SubscriptionPlanMigrating', 'CardExpired', 'CardExpiring'].include?(type)
        fail ArgumentError, "invalid value for 'type', must be one of FailedPayment, InvoicePaid, SubscriptionCancellation, SubscriptionCancelled, SubscriptionPlanMigrated, SubscriptionPlanMigrating, CardExpired, CardExpiring"
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/email-subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'state'] = state
      query_params[:'type'] = type
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSubscriptionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsubscriptionsApi#get_all_email_subscriptions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a single email subscription, specified by ID.
    # { \"nickname\" : \"Retrieve by ID\",\"response\" : \"getEmailSubscriptionByID.html\"}
    # @param email_subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [BOOLEAN] :include_retired Include deleted email-subscriptions (default to false)
    # @return [EmailSubscriptionPagedMetadata]
    def get_email_subscription_by_id(email_subscription_id, opts = {})
      data, _status_code, _headers = get_email_subscription_by_id_with_http_info(email_subscription_id, opts)
      return data
    end

    # Retrieves a single email subscription, specified by ID.
    # { \&quot;nickname\&quot; : \&quot;Retrieve by ID\&quot;,\&quot;response\&quot; : \&quot;getEmailSubscriptionByID.html\&quot;}
    # @param email_subscription_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [BOOLEAN] :include_retired Include deleted email-subscriptions
    # @return [Array<(EmailSubscriptionPagedMetadata, Fixnum, Hash)>] EmailSubscriptionPagedMetadata data, response status code and response headers
    def get_email_subscription_by_id_with_http_info(email_subscription_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsubscriptionsApi.get_email_subscription_by_id ..."
      end
      # verify the required parameter 'email_subscription_id' is set
      fail ArgumentError, "Missing the required parameter 'email_subscription_id' when calling EmailsubscriptionsApi.get_email_subscription_by_id" if email_subscription_id.nil?
      # resource path
      local_var_path = "/email-subscriptions/{email-subscription-id}".sub('{format}','json').sub('{' + 'email-subscription-id' + '}', email_subscription_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSubscriptionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsubscriptionsApi#get_email_subscription_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update an email subscription.
    # {\"nickname\":\"Update EmailSubscription\",\"request\":\"updateEmailSubscriptionRequest.html\",\"response\":\"updateEmailSubscriptionResponse.html\"}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [EmailSubscriptionPagedMetadata]
    def update_email_subscription(request, opts = {})
      data, _status_code, _headers = update_email_subscription_with_http_info(request, opts)
      return data
    end

    # Update an email subscription.
    # {\&quot;nickname\&quot;:\&quot;Update EmailSubscription\&quot;,\&quot;request\&quot;:\&quot;updateEmailSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateEmailSubscriptionResponse.html\&quot;}
    # @param request .
    # @param [Hash] opts the optional parameters
    # @return [Array<(EmailSubscriptionPagedMetadata, Fixnum, Hash)>] EmailSubscriptionPagedMetadata data, response status code and response headers
    def update_email_subscription_with_http_info(request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: EmailsubscriptionsApi.update_email_subscription ..."
      end
      # verify the required parameter 'request' is set
      fail ArgumentError, "Missing the required parameter 'request' when calling EmailsubscriptionsApi.update_email_subscription" if request.nil?
      # resource path
      local_var_path = "/email-subscriptions".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(request)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'EmailSubscriptionPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: EmailsubscriptionsApi#update_email_subscription\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
