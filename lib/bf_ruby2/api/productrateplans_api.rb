=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=end

require "uri"

module BillForward
  class ProductrateplansApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Adds or re-enables the specified taxation-strategy for the given product-rate-plan.
    # {\"nickname\":\"Add tax\",\"response\":\"addTaxationStrategy.html\",\"request\":\"addTaxationStrategy.request.html\"}
    # @param product_rate_plan_id 
    # @param taxation_strategy The taxation-strategy
    # @param [Hash] opts the optional parameters
    # @return [TaxationStrategyPagedMetadata]
    def add_taxation_strategy_to_rate_plan(product_rate_plan_id, taxation_strategy, opts = {})
      data, _status_code, _headers = add_taxation_strategy_to_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy, opts)
      return data
    end

    # Adds or re-enables the specified taxation-strategy for the given product-rate-plan.
    # {\&quot;nickname\&quot;:\&quot;Add tax\&quot;,\&quot;response\&quot;:\&quot;addTaxationStrategy.html\&quot;,\&quot;request\&quot;:\&quot;addTaxationStrategy.request.html\&quot;}
    # @param product_rate_plan_id 
    # @param taxation_strategy The taxation-strategy
    # @param [Hash] opts the optional parameters
    # @return [Array<(TaxationStrategyPagedMetadata, Fixnum, Hash)>] TaxationStrategyPagedMetadata data, response status code and response headers
    def add_taxation_strategy_to_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.add_taxation_strategy_to_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.add_taxation_strategy_to_rate_plan" if product_rate_plan_id.nil?
      # verify the required parameter 'taxation_strategy' is set
      fail ArgumentError, "Missing the required parameter 'taxation_strategy' when calling ProductrateplansApi.add_taxation_strategy_to_rate_plan" if taxation_strategy.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/tax".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(taxation_strategy)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaxationStrategyPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#add_taxation_strategy_to_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create a new rate-plan.
    # {\"nickname\":\"Create a new rate-plan\",\"request\":\"createPRPRequest.html\",\"response\":\"createPRPResponse.html\"}
    # @param product_rate_plan The product-rate-plan object to be created.
    # @param [Hash] opts the optional parameters
    # @return [ProductRatePlanPagedMetadata]
    def create_rate_plan(product_rate_plan, opts = {})
      data, _status_code, _headers = create_rate_plan_with_http_info(product_rate_plan, opts)
      return data
    end

    # Create a new rate-plan.
    # {\&quot;nickname\&quot;:\&quot;Create a new rate-plan\&quot;,\&quot;request\&quot;:\&quot;createPRPRequest.html\&quot;,\&quot;response\&quot;:\&quot;createPRPResponse.html\&quot;}
    # @param product_rate_plan The product-rate-plan object to be created.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def create_rate_plan_with_http_info(product_rate_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.create_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan' when calling ProductrateplansApi.create_rate_plan" if product_rate_plan.nil?
      # resource path
      local_var_path = "/product-rate-plans".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(product_rate_plan)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#create_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove any associated metadata.
    # {\"nickname\":\"Clear metadata from rate-plan\",\"request\" :\"deleteRatePlanMetadataRequest.html\",\"response\":\"deleteRatePlanMetadataResponse.html\"}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def delete_metadata_for_rate_plan(product_rate_plan_id, opts = {})
      data, _status_code, _headers = delete_metadata_for_rate_plan_with_http_info(product_rate_plan_id, opts)
      return data
    end

    # Remove any associated metadata.
    # {\&quot;nickname\&quot;:\&quot;Clear metadata from rate-plan\&quot;,\&quot;request\&quot; :\&quot;deleteRatePlanMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;deleteRatePlanMetadataResponse.html\&quot;}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def delete_metadata_for_rate_plan_with_http_info(product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.delete_metadata_for_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.delete_metadata_for_rate_plan" if product_rate_plan_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/metadata".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#delete_metadata_for_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of product-rate-plans. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Get all rate-plans\",\"response\":\"getPRPAll.html\"}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return. (default to 0)
    # @option opts [Integer] :records The maximum number of product-rate-plans to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @option opts [String] :metadata 
    # @return [ProductRatePlanPagedMetadata]
    def get_all_rate_plans(opts = {})
      data, _status_code, _headers = get_all_rate_plans_with_http_info(opts)
      return data
    end

    # Returns a collection of product-rate-plans. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Get all rate-plans\&quot;,\&quot;response\&quot;:\&quot;getPRPAll.html\&quot;}
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return.
    # @option opts [Integer] :records The maximum number of product-rate-plans to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @option opts [String] :metadata 
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def get_all_rate_plans_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_all_rate_plans ..."
      end
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/product-rate-plans".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?
      query_params[:'metadata'] = opts[:'metadata'] if !opts[:'metadata'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8', 'text/plain']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = []
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_all_rate_plans\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns all available taxes for the specified product-rate-plan. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"List taxes\",\"response\":\"getAvailableTaxationStrategies.html\"}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return. (default to 0)
    # @option opts [Integer] :records The maximum number of subscriptions to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to id)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @return [TaxationStrategyPagedMetadata]
    def get_available_taxation_strategies_for_rate_plan(product_rate_plan_id, opts = {})
      data, _status_code, _headers = get_available_taxation_strategies_for_rate_plan_with_http_info(product_rate_plan_id, opts)
      return data
    end

    # Returns all available taxes for the specified product-rate-plan. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;List taxes\&quot;,\&quot;response\&quot;:\&quot;getAvailableTaxationStrategies.html\&quot;}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first subscription to return.
    # @option opts [Integer] :records The maximum number of subscriptions to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @return [Array<(TaxationStrategyPagedMetadata, Fixnum, Hash)>] TaxationStrategyPagedMetadata data, response status code and response headers
    def get_available_taxation_strategies_for_rate_plan_with_http_info(product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_available_taxation_strategies_for_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.get_available_taxation_strategies_for_rate_plan" if product_rate_plan_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/tax".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaxationStrategyPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_available_taxation_strategies_for_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve any associated metadata.
    # {\"nickname\":\"Retrieve metadata on rate-plan\",\"request\":\"getRatePlanMetadataRequest.html\",\"response\":\"getRatePlanMetadataResponse.html\"}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def get_metadata_for_rate_plan(product_rate_plan_id, opts = {})
      data, _status_code, _headers = get_metadata_for_rate_plan_with_http_info(product_rate_plan_id, opts)
      return data
    end

    # Retrieve any associated metadata.
    # {\&quot;nickname\&quot;:\&quot;Retrieve metadata on rate-plan\&quot;,\&quot;request\&quot;:\&quot;getRatePlanMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;getRatePlanMetadataResponse.html\&quot;}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def get_metadata_for_rate_plan_with_http_info(product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_metadata_for_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.get_metadata_for_rate_plan" if product_rate_plan_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/metadata".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8', 'text/plain']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_metadata_for_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns product-rate-plans, specified by the product-rate-plan id or name.
    # {\"nickname\":\"Retrieve an existing rate-plan\",\"response\":\"getPRPByID.html\"}
    # @param product_rate_plan_id id or name of the product-rate-plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return. (default to 0)
    # @option opts [Integer] :records The maximum number of product-rate-plans to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [ProductRatePlanPagedMetadata]
    def get_product_rate_plan_by_id(product_rate_plan_id, opts = {})
      data, _status_code, _headers = get_product_rate_plan_by_id_with_http_info(product_rate_plan_id, opts)
      return data
    end

    # Returns product-rate-plans, specified by the product-rate-plan id or name.
    # {\&quot;nickname\&quot;:\&quot;Retrieve an existing rate-plan\&quot;,\&quot;response\&quot;:\&quot;getPRPByID.html\&quot;}
    # @param product_rate_plan_id id or name of the product-rate-plan.
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return.
    # @option opts [Integer] :records The maximum number of product-rate-plans to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def get_product_rate_plan_by_id_with_http_info(product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_product_rate_plan_by_id ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.get_product_rate_plan_by_id" if product_rate_plan_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_product_rate_plan_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by product\",\"response\":\"getPRPByProductID.html\"}
    # @param product_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return. (default to 0)
    # @option opts [Integer] :records The maximum number of product-rate-plans to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to true)
    # @return [ProductRatePlanPagedMetadata]
    def get_rate_plan_by_product(product_id, opts = {})
      data, _status_code, _headers = get_rate_plan_by_product_with_http_info(product_id, opts)
      return data
    end

    # Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by product\&quot;,\&quot;response\&quot;:\&quot;getPRPByProductID.html\&quot;}
    # @param product_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return.
    # @option opts [Integer] :records The maximum number of product-rate-plans to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def get_rate_plan_by_product_with_http_info(product_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_rate_plan_by_product ..."
      end
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductrateplansApi.get_rate_plan_by_product" if product_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/product-rate-plans/product/{product-ID}".sub('{format}','json').sub('{' + 'product-ID' + '}', product_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_rate_plan_by_product\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\"nickname\":\"Retrieve by name\",\"response\":\"getPRPByNameAndProduct.html\"}
    # @param product_id 
    # @param rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return. (default to 0)
    # @option opts [Integer] :records The maximum number of product-rate-plans to return. (default to 10)
    # @option opts [String] :order_by Specify a field used to order the result set. (default to created)
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC. (default to DESC)
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned. (default to false)
    # @return [ProductRatePlanPagedMetadata]
    def get_rate_plan_by_product_and_rate_plan(product_id, rate_plan_id, opts = {})
      data, _status_code, _headers = get_rate_plan_by_product_and_rate_plan_with_http_info(product_id, rate_plan_id, opts)
      return data
    end

    # Returns a collection of product-rate-plans, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
    # {\&quot;nickname\&quot;:\&quot;Retrieve by name\&quot;,\&quot;response\&quot;:\&quot;getPRPByNameAndProduct.html\&quot;}
    # @param product_id 
    # @param rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @option opts [Integer] :offset The offset from the first product-rate-plan to return.
    # @option opts [Integer] :records The maximum number of product-rate-plans to return.
    # @option opts [String] :order_by Specify a field used to order the result set.
    # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
    # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def get_rate_plan_by_product_and_rate_plan_with_http_info(product_id, rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.get_rate_plan_by_product_and_rate_plan ..."
      end
      # verify the required parameter 'product_id' is set
      fail ArgumentError, "Missing the required parameter 'product_id' when calling ProductrateplansApi.get_rate_plan_by_product_and_rate_plan" if product_id.nil?
      # verify the required parameter 'rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'rate_plan_id' when calling ProductrateplansApi.get_rate_plan_by_product_and_rate_plan" if rate_plan_id.nil?
      if opts[:'order'] && !['ASC', 'DESC'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of ASC, DESC'
      end
      # resource path
      local_var_path = "/product-rate-plans/product/{product-ID}/rate-plan/{rate-plan-ID}".sub('{format}','json').sub('{' + 'product-ID' + '}', product_id.to_s).sub('{' + 'rate-plan-ID' + '}', rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'records'] = opts[:'records'] if !opts[:'records'].nil?
      query_params[:'order_by'] = opts[:'order_by'] if !opts[:'order_by'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'include_retired'] = opts[:'include_retired'] if !opts[:'include_retired'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#get_rate_plan_by_product_and_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Removes the specified taxation-strategy for the given product-rate-plan.
    # {\"nickname\":\"Remove tax\",\"response\":\"removeTaxationStrategy.html\"}
    # @param product_rate_plan_id 
    # @param taxation_strategy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [TaxationStrategyPagedMetadata]
    def remove_taxation_strategy_from_rate_plan(product_rate_plan_id, taxation_strategy_id, opts = {})
      data, _status_code, _headers = remove_taxation_strategy_from_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy_id, opts)
      return data
    end

    # Removes the specified taxation-strategy for the given product-rate-plan.
    # {\&quot;nickname\&quot;:\&quot;Remove tax\&quot;,\&quot;response\&quot;:\&quot;removeTaxationStrategy.html\&quot;}
    # @param product_rate_plan_id 
    # @param taxation_strategy_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(TaxationStrategyPagedMetadata, Fixnum, Hash)>] TaxationStrategyPagedMetadata data, response status code and response headers
    def remove_taxation_strategy_from_rate_plan_with_http_info(product_rate_plan_id, taxation_strategy_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.remove_taxation_strategy_from_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.remove_taxation_strategy_from_rate_plan" if product_rate_plan_id.nil?
      # verify the required parameter 'taxation_strategy_id' is set
      fail ArgumentError, "Missing the required parameter 'taxation_strategy_id' when calling ProductrateplansApi.remove_taxation_strategy_from_rate_plan" if taxation_strategy_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/tax/{taxation-strategy-ID}".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s).sub('{' + 'taxation-strategy-ID' + '}', taxation_strategy_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TaxationStrategyPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#remove_taxation_strategy_from_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retires the product-rate-plan specified product-rate-plan-ID.
    # {\"nickname\":\"Delete a rate-plan\",\"response\":\"deletePRP.html\"}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [ProductRatePlanPagedMetadata]
    def retire_rate_plan(product_rate_plan_id, opts = {})
      data, _status_code, _headers = retire_rate_plan_with_http_info(product_rate_plan_id, opts)
      return data
    end

    # Retires the product-rate-plan specified product-rate-plan-ID.
    # {\&quot;nickname\&quot;:\&quot;Delete a rate-plan\&quot;,\&quot;response\&quot;:\&quot;deletePRP.html\&quot;}
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def retire_rate_plan_with_http_info(product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.retire_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.retire_rate_plan" if product_rate_plan_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['text/plain', 'application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#retire_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Remove any existing metadata keys and create the provided data.
    # {\"nickname\":\"Set metadata on rate-plan\",\"request\":\"setRatePlanMetadataRequest.html\",\"response\":\"setRatePlanMetadataResponse.html\"}
    # @param metadata 
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def set_metadata_for_rate_plan(metadata, product_rate_plan_id, opts = {})
      data, _status_code, _headers = set_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, opts)
      return data
    end

    # Remove any existing metadata keys and create the provided data.
    # {\&quot;nickname\&quot;:\&quot;Set metadata on rate-plan\&quot;,\&quot;request\&quot;:\&quot;setRatePlanMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;setRatePlanMetadataResponse.html\&quot;}
    # @param metadata 
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def set_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.set_metadata_for_rate_plan ..."
      end
      # verify the required parameter 'metadata' is set
      fail ArgumentError, "Missing the required parameter 'metadata' when calling ProductrateplansApi.set_metadata_for_rate_plan" if metadata.nil?
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.set_metadata_for_rate_plan" if product_rate_plan_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/metadata".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#set_metadata_for_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update a rate-plan.
    # {\"nickname\":\"Update a rate-plan\",\"request\":\"updatePRPRequest.html\",\"response\":\"updatePRPResponse.html\"}
    # @param product_rate_plan The product-rate-plan object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [ProductRatePlanPagedMetadata]
    def update_rate_plan(product_rate_plan, opts = {})
      data, _status_code, _headers = update_rate_plan_with_http_info(product_rate_plan, opts)
      return data
    end

    # Update a rate-plan.
    # {\&quot;nickname\&quot;:\&quot;Update a rate-plan\&quot;,\&quot;request\&quot;:\&quot;updatePRPRequest.html\&quot;,\&quot;response\&quot;:\&quot;updatePRPResponse.html\&quot;}
    # @param product_rate_plan The product-rate-plan object to be updated.
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProductRatePlanPagedMetadata, Fixnum, Hash)>] ProductRatePlanPagedMetadata data, response status code and response headers
    def update_rate_plan_with_http_info(product_rate_plan, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.update_rate_plan ..."
      end
      # verify the required parameter 'product_rate_plan' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan' when calling ProductrateplansApi.update_rate_plan" if product_rate_plan.nil?
      # resource path
      local_var_path = "/product-rate-plans".sub('{format}','json')

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['text/xml', 'application/xml', 'application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(product_rate_plan)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ProductRatePlanPagedMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#update_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Update any existing metadata key-values and insert any new key-values, no keys will be removed.
    # {\"nickname\":\"Upsert metadata on rate-plan\",\"request\":\"upsertRatePlanMetadataRequest.html\",\"response\":\"upsertRatePlanMetadataResponse.html\"}
    # @param metadata 
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [DynamicMetadata]
    def upsert_metadata_for_rate_plan(metadata, product_rate_plan_id, opts = {})
      data, _status_code, _headers = upsert_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, opts)
      return data
    end

    # Update any existing metadata key-values and insert any new key-values, no keys will be removed.
    # {\&quot;nickname\&quot;:\&quot;Upsert metadata on rate-plan\&quot;,\&quot;request\&quot;:\&quot;upsertRatePlanMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;upsertRatePlanMetadataResponse.html\&quot;}
    # @param metadata 
    # @param product_rate_plan_id 
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
    # @return [Array<(DynamicMetadata, Fixnum, Hash)>] DynamicMetadata data, response status code and response headers
    def upsert_metadata_for_rate_plan_with_http_info(metadata, product_rate_plan_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ProductrateplansApi.upsert_metadata_for_rate_plan ..."
      end
      # verify the required parameter 'metadata' is set
      fail ArgumentError, "Missing the required parameter 'metadata' when calling ProductrateplansApi.upsert_metadata_for_rate_plan" if metadata.nil?
      # verify the required parameter 'product_rate_plan_id' is set
      fail ArgumentError, "Missing the required parameter 'product_rate_plan_id' when calling ProductrateplansApi.upsert_metadata_for_rate_plan" if product_rate_plan_id.nil?
      # resource path
      local_var_path = "/product-rate-plans/{product-rate-plan-ID}/metadata".sub('{format}','json').sub('{' + 'product-rate-plan-ID' + '}', product_rate_plan_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'organizations'] = @api_client.build_collection_param(opts[:'organizations'], :multi) if !opts[:'organizations'].nil?

      # header parameters
      header_params = {}

      # HTTP header 'Accept' (if needed)
      local_header_accept = ['application/json; charset=utf-8']
      local_header_accept_result = @api_client.select_header_accept(local_header_accept) and header_params['Accept'] = local_header_accept_result

      # HTTP header 'Content-Type'
      local_header_content_type = ['application/json; charset=utf-8']
      header_params['Content-Type'] = @api_client.select_header_content_type(local_header_content_type)

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(metadata)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DynamicMetadata')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ProductrateplansApi#upsert_metadata_for_rate_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
