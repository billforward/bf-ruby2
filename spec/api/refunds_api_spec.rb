=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bfwd::RefundsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'RefundsApi' do
  before do
    # run before each test
    @instance = Bfwd::RefundsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RefundsApi' do
    it 'should create an instance of RefundsApi' do
      expect(@instance).to be_instance_of(Bfwd::RefundsApi)
    end
  end

  # unit tests for create_refund
  # &lt;p&gt;When creating a refund either the invoice, or invoice payment must be specified.&lt;/p&gt;&lt;p&gt;Creating a refund by specifying the invoiceID will refund any un-refunded value up to the full value of the payment. When refunding via the invoicePaymentID the same rules apply. Refunds will be processed by the same payment methods that took the payment.&lt;/p&gt;&lt;p&gt;Refunds can be for a partial amount of the payment. It is possible to create refunds up to the value of the total payment.&lt;/p&gt;&lt;p&gt;Once a payment or invoice is fully refunded, no more refunds can be created. Errors will be returned if the payment is greater than available refund funds.&lt;/p&gt;
  # {\&quot;nickname\&quot;:\&quot;Create a new refund\&quot;,\&quot;request\&quot;:\&quot;createRefundRequest.html\&quot;,\&quot;response\&quot;:\&quot;createRefundResponse.html\&quot;}
  # @param refund The refund object to be created.
  # @param [Hash] opts the optional parameters
  # @return [RefundPagedMetadata]
  describe 'create_refund test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_refunds
  # Returns a collection of all refunds. By default 10 values are returned. Refunds are returned in natural order
  # {\&quot;nickname\&quot;:\&quot;Get all refunds\&quot;,\&quot;response\&quot;:\&quot;getRefundsAll.html\&quot;}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first refund to return.
  # @option opts [Integer] :records The maximum number of refunds to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [RefundPagedMetadata]
  describe 'get_all_refunds test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refund_by_id
  # Returns a single refund, specified by the ID parameter.
  # {\&quot;nickname\&quot;:\&quot;Retrieve an existing refund\&quot;,\&quot;response\&quot;:\&quot;getRefundByID.html\&quot;}
  # @param refund_id ID of the Refund.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [RefundPagedMetadata]
  describe 'get_refund_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refund_for_original_payment
  # Returns a refund for the original payment.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by originating payment\&quot;,\&quot;response\&quot;:\&quot;getRefundsByPayment.html\&quot;}
  # @param payment_id ID of the Payment.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [RefundPagedMetadata]
  describe 'get_refund_for_original_payment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refund_for_refund_payment
  # Returns a refund for the refund payment.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by refund payment\&quot;,\&quot;response\&quot;:\&quot;getRefundsByPayment.html\&quot;}
  # @param payment_id ID of the Payment.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [RefundPagedMetadata]
  describe 'get_refund_for_refund_payment test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refund_for_refunded_invoice
  # Returns a refund for the refund payment.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by invoice\&quot;,\&quot;response\&quot;:\&quot;getRefundsByInvoice.html\&quot;}
  # @param invoice_id ID of the Invoice.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [RefundPagedMetadata]
  describe 'get_refund_for_refunded_invoice test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_refunds_as_csv
  # Retrieves refunds in CSV format.
  # { \&quot;nickname\&quot;:\&quot;Refunds CSV\&quot;,\&quot;response\&quot;:\&quot;refunds.csv\&quot;}
  # @param completed_start The UTC DateTime specifying the start of the interval within which refunds were completed.
  # @param completed_end The UTC DateTime specifying the end of the interval within which refunds were completed.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first refund to return.
  # @option opts [Integer] :records The maximum number of refunds to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order The direction of any ordering, either ASC or DESC.
  # @return [RefundPagedMetadata]
  describe 'get_refunds_as_csv test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_refund
  # Update a refund
  # {\&quot;nickname\&quot;:\&quot;Update a refund\&quot;,\&quot;request\&quot;:\&quot;updateRefundRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateRefundResponse.html\&quot;}
  # @param refund The refund object to be update.
  # @param [Hash] opts the optional parameters
  # @return [RefundPagedMetadata]
  describe 'update_refund test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
