=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bfwd::TaxationstrategiesApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'TaxationstrategiesApi' do
  before do
    # run before each test
    @instance = Bfwd::TaxationstrategiesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of TaxationstrategiesApi' do
    it 'should create an instance of TaxationstrategiesApi' do
      expect(@instance).to be_instance_of(Bfwd::TaxationstrategiesApi)
    end
  end

  # unit tests for create_taxation_strategy
  # &lt;p&gt;Add a new tax or schedule changes in an existing tax.&lt;/p&gt;&lt;p&gt;Add a new tax by providing the location and tax percentage. To schedule a tax change specify the ID of the current Tax. A new version of the will be created &lt;i&gt;validFrom&lt;/i&gt; the specified date, the existing tax &lt;i&gt;validTill&lt;/i&gt; the start of this new tax.&lt;/p&gt;
  # {\&quot;nickname\&quot;:\&quot;Create a tax\&quot;,\&quot;request\&quot;:\&quot;createTaxationStrategyRequest.html\&quot;,\&quot;response\&quot;:\&quot;createTaxationStrategyResponse.html\&quot;}
  # @param taxation_strategy The taxation-strategy object to be updated.
  # @param [Hash] opts the optional parameters
  # @return [TaxationStrategyPagedMetadata]
  describe 'create_taxation_strategy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_taxation_strategies
  # Returns a collection of all taxation-strategies. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Get all tax\&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyAll.html\&quot;}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-strategy to return.
  # @option opts [Integer] :records The maximum number of taxation-strategies to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_all_taxation_strategies test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_taxation_strategy_by_consistent_id
  # Returns the tax currently being applied for the taxation-strategy-ID. To return schedule or historic tax changes the include_retired query parameter should be set to true.
  # {\&quot;nickname\&quot;:\&quot;Retrieve an existing tax \&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyByID.html\&quot;}
  # @param taxation_strategy_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-strategy to return.
  # @option opts [Integer] :records The maximum number of taxation-strategies to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_taxation_strategy_by_consistent_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_taxation_strategy_by_country
  # Returns a collection of taxation-strategies, specified by the country parameter. By default 10 values are returned. Records are returned in natural order. To return schedule or historic tax changes the include_retired query parameter should be set to true.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by country\&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyByCountry.html\&quot;}
  # @param country The country
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-strategy to return.
  # @option opts [Integer] :records The maximum number of taxation-strategies to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_taxation_strategy_by_country test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_taxation_strategy_by_currency
  # Returns a collection of taxation-strategies, specified by the currency parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by currency\&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyByProvince.html\&quot;}
  # @param currency The currency
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-strategy to return.
  # @option opts [Integer] :records The maximum number of taxation-strategies to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_taxation_strategy_by_currency test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_taxation_strategy_by_province
  # Returns a collection of taxation-strategies, specified by the province parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by province\&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyByProvince.html\&quot;}
  # @param province The province
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-strategy to return.
  # @option opts [Integer] :records The maximum number of taxation-strategies to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired products should be returned.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_taxation_strategy_by_province test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_taxation_strategy_by_version_id
  # Returns a single taxation-strategy, specified by the taxation-strategy-ID parameter.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by version\&quot;,\&quot;response\&quot;:\&quot;getTaxationStrategyByVersionID.html\&quot;}
  # @param version_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [TaxationStrategyPagedMetadata]
  describe 'get_taxation_strategy_by_version_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for retire_taxation_strategy
  # Retires the taxation-strategy specified by taxation-strategy-ID parameter. Only the version of the tax which has an unbounded (null) validTill can be removed. Removing a tax change will make the previous tax come into effect. For example if you have a Tax in January and 5% and a new tax at 7% from February onwards, you can remove the February tax. Remove the February tax will re-instate the January tax.
  # {\&quot;nickname\&quot;:\&quot;Remove a tax change\&quot;,\&quot;response\&quot;:\&quot;deleteSubscription.html\&quot;}
  # @param version_id 
  # @param organizations A list of organization-IDs used to restrict the scope of API calls.
  # @param [Hash] opts the optional parameters
  # @return [TaxationStrategyPagedMetadata]
  describe 'retire_taxation_strategy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_taxation_strategy
  # Update a tax.
  # {\&quot;nickname\&quot;:\&quot;Update a tax\&quot;,\&quot;request\&quot;:\&quot;updateTaxationStrategyRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateTaxationStrategyResponse.html\&quot;}
  # @param taxation_strategy The taxation-strategy object to be updated.
  # @param [Hash] opts the optional parameters
  # @return [TaxationStrategyPagedMetadata]
  describe 'update_taxation_strategy test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
