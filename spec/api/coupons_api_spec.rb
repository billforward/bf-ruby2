=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bfwd::CouponsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'CouponsApi' do
  before do
    # run before each test
    @instance = Bfwd::CouponsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of CouponsApi' do
    it 'should create an instance of CouponsApi' do
      expect(@instance).to be_instance_of(Bfwd::CouponsApi)
    end
  end

  # unit tests for create_coupon
  # Create a coupon.
  # {\&quot;nickname\&quot;:\&quot;Create a new coupon\&quot;,\&quot;request\&quot;:\&quot;createCouponRequest.html\&quot;,\&quot;response\&quot;:\&quot;createCouponResponse.html\&quot;}
  # @param code The coupon object to be created.
  # @param [Hash] opts the optional parameters
  # @return [CouponPagedMetadata]
  describe 'create_coupon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_coupon_unique_codes
  # Create a list of unique coupon codes that can be applied to a subscription.
  # { \&quot;nickname\&quot;:\&quot;Create unique coupon codes\&quot;,\&quot;request\&quot;:\&quot;createUniqueCodesRequest.html\&quot;,\&quot;response\&quot;:\&quot;createUniqueCodesResponse.html\&quot;}
  # @param code The coupon code to use in the generation of the unique codes.
  # @param [Hash] opts the optional parameters
  # @option opts [CouponUniqueCodesRequest] :request The request object that specifies the number of codes to be created.
  # @return [CouponUniqueCodesResponsePagedMetadata]
  describe 'create_coupon_unique_codes test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_coupons
  # Returns a collection of all coupons. By default 10 values are returned. Records are returned in natural order.
  # { \&quot;nickname\&quot;:\&quot;Retrieve all coupons\&quot;,\&quot;response\&quot;:\&quot;getCouponAll.html\&quot;}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CouponPagedMetadata]
  describe 'get_all_coupons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_applied_coupons
  # Returns a list of unique coupons which have been applied.
  # { \&quot;nickname\&quot;:\&quot;Retrieve used unique coupons\&quot;,\&quot;response\&quot;:\&quot;getAppliedCodesForCode.html\&quot;}
  # @param code The base code to use in the generation of the unique codes.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CouponPagedMetadata]
  describe 'get_applied_coupons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_coupon_codes_for_code
  # Returns a list of available unique coupon codes for the specified parent coupon code that can be applied to a subscription.
  # { \&quot;nickname\&quot;:\&quot;Retrieve unused unique coupons\&quot;,\&quot;response\&quot;:\&quot;getAvailableCodesForCode.html\&quot;}
  # @param code The base code to use in the generation of the unique codes.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CouponUniqueCodesResponsePagedMetadata]
  describe 'get_available_coupon_codes_for_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupon_code
  # Returns the coupon for the specified code that can be applied to a subscription.
  # { \&quot;nickname\&quot;:\&quot;Retrieve coupon\&quot;,\&quot;response\&quot;:\&quot;getCouponByCode.html\&quot;}
  # @param code The parent coupon code to use in the generation of the unique codes.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [CouponUniqueCodesResponsePagedMetadata]
  describe 'get_coupon_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_applications_of_coupons
  # Retrieves a collection of the coupons by this coupon code which have been applied.
  # { \&quot;nickname\&quot;:\&quot;Retrieve subscriptions to which the given coupon code has been applied.\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionApplications.html\&quot;}
  # @param code Base code of the coupon.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_applications_of_coupons test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for retire_coupon
  # &lt;p&gt;This method has 2 main behaviours depending on what is passed in. If the parent coupon code, for example SUMMER, is given no new coupons can be issued or claimed from this code. Deleting will result in the deleted property being set to true.&lt;/p&gt;&lt;p&gt;If a unique coupon code, for example SUMMER-AGH8, is given this will stop the coupon from being applied to the subscription from that point onwards. When a coupon is deleted the validUntil property is set which is the date/time it stopped applying to the target.&lt;/p&gt;
  # { \&quot;nickname\&quot;:\&quot;Retire coupon\&quot;,\&quot;response\&quot;:\&quot;retireCoupon.html\&quot;}
  # @param code ID of the coupon to remove.
  # @param organizations A list of organization-IDs used to restrict the scope of API calls.
  # @param [Hash] opts the optional parameters
  # @return [CouponPagedMetadata]
  describe 'retire_coupon test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
