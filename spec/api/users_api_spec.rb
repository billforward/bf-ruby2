=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bfwd::UsersApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'UsersApi' do
  before do
    # run before each test
    @instance = Bfwd::UsersApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of UsersApi' do
    it 'should create an instance of UsersApi' do
      expect(@instance).to be_instance_of(Bfwd::UsersApi)
    end
  end

  # unit tests for create_user
  # Create a user.
  # {\&quot;nickname\&quot;:\&quot;Create a new user\&quot;,\&quot;request\&quot;:\&quot;createUserRequest.html\&quot;,\&quot;response\&quot;:\&quot;createUserResponse.html\&quot;}
  # @param user The user object to be created.
  # @param [Hash] opts the optional parameters
  # @return [UserPagedMetadata]
  describe 'create_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_user_login
  # Create a user.
  # {\&quot;nickname\&quot;:\&quot;Create a new user with login\&quot;,\&quot;request\&quot;:\&quot;createUserWithLoginRequest.html\&quot;,\&quot;response\&quot;:\&quot;createUserWithLoginResponse.html\&quot;}
  # @param user The user object to be created.
  # @param [Hash] opts the optional parameters
  # @return [UserCreationResponsePagedMetadata]
  describe 'create_user_login test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_users
  # Returns a collection of Users. By default 10 values are returned. Records are returned in natural order.
  # { \&quot;nickname\&quot; : \&quot;Get all users\&quot;,\&quot;response\&quot; : \&quot;getUserAll.html\&quot;}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first user to return.
  # @option opts [Integer] :records The maximum number of users to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [UserPagedMetadata]
  describe 'get_all_users test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_id
  # Returns a single User, specified by the ID parameter.
  # { \&quot;nickname\&quot; : \&quot;Retrieve an existing user\&quot;,\&quot;response\&quot; : \&quot;getUserByID.html\&quot;}
  # @param user_id ID of the User.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization -IDs used to restrict the scope of API calls.
  # @return [UserPagedMetadata]
  describe 'get_user_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_password_reset_code
  # Returns a single User, specified by the password-reset-code parameter.
  # { \&quot;nickname\&quot; : \&quot;Retrieve by reset code\&quot;,\&quot;response\&quot; : \&quot;getUserByPasswordResetCode.html\&quot;}
  # @param password_reset_code The unique password reset code of the User.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [UserPagedMetadata]
  describe 'get_user_by_password_reset_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_sms_password_reset_code
  # Returns a single User, specified by the sms-password-reset-code parameter.
  # { \&quot;nickname\&quot; : \&quot;Retrieve by sms reset code\&quot;,\&quot;response\&quot; : \&quot;getUserBySMSPasswordResetCode.html\&quot;}
  # @param sms_password_reset_code The unique SMS password reset code of the User.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [UserPagedMetadata]
  describe 'get_user_by_sms_password_reset_code test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user_by_username
  # Returns a single User, specified by the username parameter, this is by default the e-mail address of the user.
  # { \&quot;nickname\&quot; : \&quot;Retrieve by username\&quot;,\&quot;response\&quot; : \&quot;getUserByUsername.html\&quot;}
  # @param username The unique username of the User.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [UserPagedMetadata]
  describe 'get_user_by_username test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for reset_user_password
  # Create a password reset request.
  # {\&quot;nickname\&quot;:\&quot;Create a password reset request\&quot;,\&quot;request\&quot;:\&quot;PasswordResetRequest.html\&quot;,\&quot;response\&quot;:\&quot;PasswordResetResponse.html\&quot;}
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [UserPagedMetadata]
  describe 'reset_user_password test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for retire_user
  # Retires the user with the specified user-ID.
  # { \&quot;nickname\&quot; : \&quot;Delete a user\&quot;,\&quot;response\&quot; : \&quot;deleteUser.html\&quot;}
  # @param user_id ID of the User.
  # @param organizations A list of organization-IDs used to restrict the scope of API calls.
  # @param [Hash] opts the optional parameters
  # @return [UserPagedMetadata]
  describe 'retire_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user
  # Update a user.
  # { \&quot;nickname\&quot; : \&quot;Update a user\&quot;, \&quot;request\&quot; : \&quot;updateUserRequest.html\&quot; ,\&quot;response\&quot; : \&quot;updateUserResponse.html\&quot; }
  # @param user The user object to be updated.
  # @param [Hash] opts the optional parameters
  # @return [UserPagedMetadata]
  describe 'update_user test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_user_password
  # Update a user&#39;s password.
  # { \&quot;nickname\&quot; : \&quot;Update password using reset code\&quot;, \&quot;request\&quot; : \&quot;updateUserPassword.html\&quot; ,\&quot;response\&quot; : \&quot;updateUserPasswordResponse.html\&quot; }
  # @param password_reset The password reset object.
  # @param [Hash] opts the optional parameters
  # @return [UserPagedMetadata]
  describe 'update_user_password test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
