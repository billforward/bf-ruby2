=begin
#BillForward REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 1.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for Bfwd::SubscriptionsApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'SubscriptionsApi' do
  before do
    # run before each test
    @instance = Bfwd::SubscriptionsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SubscriptionsApi' do
    it 'should create an instance of SubscriptionsApi' do
      expect(@instance).to be_instance_of(Bfwd::SubscriptionsApi)
    end
  end

  # unit tests for add_charge_to_subscription
  # Creates a charge on the specified subscription.
  # {\&quot;nickname\&quot;:\&quot;Add Charge\&quot;,\&quot;response\&quot;:\&quot;addChargeToSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;addChargeToSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param charge The charge request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionChargePagedMetadata]
  describe 'add_charge_to_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_coupon_to_subscription
  # Applies a coupon to a subscription.
  # {\&quot;nickname\&quot;:\&quot;Apply coupon\&quot;, \&quot;request\&quot;:\&quot;addCouponCodeRequest.html\&quot;,\&quot;response\&quot;:\&quot;addCouponCodeResponse.html\&quot;}
  # @param subscription_id 
  # @param request Request containing the coupon code.
  # @param [Hash] opts the optional parameters
  # @return [CouponPagedMetadata]
  describe 'add_coupon_to_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_credit_note_to_subscription
  # Creates a credit-note which may be used by only the specified subscription.
  # {\&quot;nickname\&quot;:\&quot;Add Credit\&quot;,\&quot;request\&quot;:\&quot;addCreditNoteToSubscriptionRequest.html\&quot;, \&quot;response\&quot;:\&quot;addCreditNoteToSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param credit_note The credit-note request
  # @param [Hash] opts the optional parameters
  # @return [CreditNotePagedMetadata]
  describe 'add_credit_note_to_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for add_payment_method_to_subscription
  # Enables the payment method to pay invoices of this subscription.
  # {\&quot;nickname\&quot;:\&quot;Add payment-method to subscription\&quot;,\&quot;response\&quot;:\&quot;addPaymentMethod.html\&quot;,\&quot;request\&quot;:\&quot;addPaymentMethod.request.html\&quot;}
  # @param subscription_id 
  # @param payment_method 
  # @param [Hash] opts the optional parameters
  # @return [PaymentMethodPagedMetadata]
  describe 'add_payment_method_to_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for advance_subscription
  # Advance the subscription through time.
  # {\&quot;nickname\&quot;:\&quot;Advance\&quot;,\&quot;request\&quot;:\&quot;advanceSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;advanceSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param request The request
  # @param [Hash] opts the optional parameters
  # @return [TimeResponsePagedMetadata]
  describe 'advance_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for available_payment_methods_for_subscription
  # Returns all available payment methods for the specified subscription. By default 10 values are returned. Records are returned in natural order.
  # { \&quot;nickname\&quot; : \&quot;List on subscription\&quot;,\&quot;response\&quot; : \&quot;getAvailablePaymentMethods.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [PaymentMethodPagedMetadata]
  describe 'available_payment_methods_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for batch_create_subscriptions
  # Create multiple subscriptions.
  # {\&quot;nickname\&quot;:\&quot;Create multiple subscriptions\&quot;,\&quot;response\&quot;:\&quot;createMultipleSubscriptionViaHelper.html\&quot;,\&quot;request\&quot;:\&quot;createMultipleSubscriptionViaHelper.request.html\&quot;}
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'batch_create_subscriptions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for cancel_subscription
  # Retires the subscription specified by the subscription-ID parameter. Retiring a subscription causes it to cancel based on the specified retirement settings for the product.
  # {\&quot;nickname\&quot;:\&quot;Cancel subscription\&quot;,\&quot;response\&quot;:\&quot;deleteSubscription.html\&quot;,\&quot;request\&quot;:\&quot;deleteSubscriptionRequest.html\&quot;}
  # @param subscription_id 
  # @param subscription_cancellation The cancellation request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionCancellationPagedMetadata]
  describe 'cancel_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_aggregating_subscription
  # Create an aggregating subscription.
  # {\&quot;nickname\&quot;:\&quot;Create aggregating subscription\&quot;,\&quot;response\&quot;:\&quot;createAggregatingSubscription.html\&quot;,\&quot;request\&quot;:\&quot;createAggregatingSubscription.request.html\&quot;}
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'create_aggregating_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription
  # Create a new subscription.
  # {\&quot;nickname\&quot;:\&quot;Create a new subscription\&quot;,\&quot;request\&quot;:\&quot;createSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;createSubscriptionResponse.html\&quot;}
  # @param subscription The subscription object to be updated.
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'create_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_subscription_v2
  # Create a subscription (V2).
  # {\&quot;nickname\&quot;:\&quot;Create a subscription (V2)\&quot;,\&quot;response\&quot;:\&quot;createSubscriptionViaHelper.html\&quot;,\&quot;request\&quot;:\&quot;createSubscriptionViaHelper.request.html\&quot;}
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'create_subscription_v2 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_timer
  # Create a timer for a subscription event.
  # {\&quot;nickname\&quot;:\&quot;Create Timer\&quot;,\&quot;response\&quot;:\&quot;createSubscriptionTimer.html\&quot;,\&quot;request\&quot;:\&quot;createSubscriptionTimer.request.html\&quot;}
  # @param subscription_id 
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [TimerAmendment]
  describe 'create_timer test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_metadata_for_subscription
  # Remove any associated metadata.
  # {\&quot;nickname\&quot;:\&quot;Clear from subscription\&quot;,\&quot;request\&quot; :\&quot;deleteSubscriptionMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;deleteSubscriptionMetadataResponse.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [DynamicMetadata]
  describe 'delete_metadata_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for freeze_subscription
  # Freeze the subscription.
  # {\&quot;nickname\&quot;:\&quot;Freeze\&quot;,\&quot;request\&quot;:\&quot;freezeSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;freezeSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param request The request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'freeze_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_all_subscriptions
  # Retrieves a collection of all subscriptions. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve all subscriptions\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionAll.html\&quot;}
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @option opts [BOOLEAN] :exclude_children Should child subscriptiosn be excluded.
  # @option opts [String] :metadata 
  # @option opts [BOOLEAN] :exclude_service_ended 
  # @option opts [Array<String>] :account_id A list of accountIDs to filter subscriptions on
  # @return [SubscriptionPagedMetadata]
  describe 'get_all_subscriptions test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_applicable_coupons_for_subscription
  # Retrieves a collection of the coupons which can be applied to this subscription.
  # { \&quot;nickname\&quot; : \&quot;Retrieve applicable coupons\&quot;,\&quot;response\&quot; : \&quot;getApplicableCoupons.html\&quot; }
  # @param subscription_id ID of the subscription.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CouponPagedMetadata]
  describe 'get_applicable_coupons_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_available_credit_subscription
  # Returns all available credit-notes for the specified subscription. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Get available credit\&quot;,\&quot;response\&quot;:\&quot;getAvailableCreditSubscription.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CreditNotePagedMetadata]
  describe 'get_available_credit_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_charges_on_subscription
  # Returns all charges for the specified subscription. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Get charges\&quot;,\&quot;response\&quot;:\&quot;getChargesSubscription.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [String] :state Ihe direction of any ordering, either ASC or DESC.
  # @option opts [String] :type Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [SubscriptionChargePagedMetadata]
  describe 'get_charges_on_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_children_of_subscription
  # Return all entities whose invoices will be aggregated by the specified subscription By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Get Aggregated Entities\&quot;,\&quot;response\&quot;:\&quot;getAggregatedEntities.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [SubscriptionPagedMetadata]
  describe 'get_children_of_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_coupons_on_subscription
  # Retrieves a collection of the coupons and the unique codes currently applied to the subscription.
  # {\&quot;nickname\&quot;:\&quot;Retrieve coupons\&quot;,\&quot;response\&quot;:\&quot;getCoupons.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [CouponPagedMetadata]
  describe 'get_coupons_on_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices_for_subscription_by_state
  # Retrieves a collection of invoice objects of the specified state for the given subscription. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve invoices by state for subscription\&quot;,\&quot;response\&quot;:\&quot;getInvoicesForSubscriptionByState.html\&quot;}
  # @param subscription_id The unique id of the subscription.
  # @param state The state of the invoices to retrieve.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-link to return.
  # @option opts [Integer] :records The maximum number of taxation-links to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [InvoicePagedMetadata]
  describe 'get_invoices_for_subscription_by_state test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_metadata_for_subscription
  # Retrieve any associated metadata.
  # {\&quot;nickname\&quot;:\&quot;Retrieve on subscription\&quot;,\&quot;request\&quot;:\&quot;getSubscriptionMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionMetadataResponse.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [DynamicMetadata]
  describe 'get_metadata_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_parent_subscription
  # Return the parent of the given subscription.
  # {\&quot;nickname\&quot;:\&quot;Get parent\&quot;,\&quot;response\&quot;:\&quot;getParentSubscription.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [SubscriptionPagedMetadata]
  describe 'get_parent_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pricing_component_values_of_subscription
  # Gets the subscription&#39;s current pricing-component values.
  # {\&quot;nickname\&quot;:\&quot;Get values\&quot;,\&quot;response\&quot;:\&quot;getPricingComponentValues.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param [Hash] opts the optional parameters
  # @return [PricingComponentValuePagedMetadata]
  describe 'get_pricing_component_values_of_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_account_id
  # Retrieves a collection of subscriptions, specified by the account-ID parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by account\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByAccount.html\&quot;}
  # @param account_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @option opts [BOOLEAN] :exclude_children Should child subscriptiosn be excluded.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_account_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_id
  # Retrieves a single subscription, specified by the ID parameter.
  # {\&quot;nickname\&quot;:\&quot;Retrieve an existing subscription\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByID.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_product_id
  # Retrieves a collection of subscriptions, specified by the product-ID parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by product\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByProduct.html\&quot;}
  # @param product_id ID of the product
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @option opts [BOOLEAN] :exclude_children Should child subscriptiosn be excluded.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_product_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_product_rate_plan_id
  # Retrieves a collection of subscriptions, specified by the product-rate-plan-ID parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by rate-plan\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByProductRatePlan.html\&quot;}
  # @param product_rate_plan_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @option opts [BOOLEAN] :exclude_children Should child subscriptiosn be excluded.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_product_rate_plan_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_state
  # Retrieves a collection of subscriptions, specified by the state parameter. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by state\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByState.html\&quot;}
  # @param state The current state of the subscription, either Provisioned, AwaitingPayment, Paid or Cancelled
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired subscriptions should be returned.
  # @option opts [BOOLEAN] :exclude_children Should child subscriptiosn be excluded.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_state test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscription_by_version_id
  # Retrieves a single subscription, specified by the version-ID parameter.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by version\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByVersionID.html\&quot;}
  # @param version_id The version-ID of the subscription.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscription_by_version_id test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions_by_initial_period_start
  # Retrieves a collection of subscription objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by initial period-start\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByInitialPeriodStart.html\&quot;}
  # @param lower_threshold The UTC DateTime specifying the start of the result period.
  # @param upper_threshold The UTC DateTime specifying the end of the result period.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-link to return.
  # @option opts [Integer] :records The maximum number of taxation-links to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscriptions_by_initial_period_start test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions_by_period_end
  # Retrieves a collection of subscription objects with period-end times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by period-end\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByPeriodEnd.html\&quot;}
  # @param lower_threshold The UTC DateTime specifying the start of the result period.
  # @param upper_threshold The UTC DateTime specifying the end of the result period.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-link to return.
  # @option opts [Integer] :records The maximum number of taxation-links to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscriptions_by_period_end test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions_by_period_start
  # Retrieves a collection of subscription objects with period-start times within the period specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by period-start\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionByPeriodStart.html\&quot;}
  # @param lower_threshold The UTC DateTime specifying the start of the result period.
  # @param upper_threshold The UTC DateTime specifying the end of the result period.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-link to return.
  # @option opts [Integer] :records The maximum number of taxation-links to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscriptions_by_period_start test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_subscriptions_by_successful_periods
  # Retrieves a collection of subscription objects whose successful periods count falls within the range specified by the lower-threshold and upper-threshold parameters. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Retrieve by successful period\&quot;,\&quot;response\&quot;:\&quot;getSubscriptionBySuccessfulPeriods.html\&quot;}
  # @param lower_threshold The lower threshold of the range
  # @param upper_threshold The upper threshold of the range.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first taxation-link to return.
  # @option opts [Integer] :records The maximum number of taxation-links to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @return [SubscriptionPagedMetadata]
  describe 'get_subscriptions_by_successful_periods test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_swagger_subscription
  # 
  # { \&quot;nickname\&quot; : \&quot;\&quot;,\&quot;response\&quot; : \&quot;\&quot;}
  # @param query_string The query string used to search.
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The starting index of the search results.
  # @option opts [Integer] :records The number of search results to return.
  # @option opts [String] :format The response format, either JSON or XML.
  # @option opts [BOOLEAN] :wildcard Toggle if we search for full words or whether a wildcard is used.
  # @option opts [BOOLEAN] :entity Is an entity returned with the search results.
  # @return [SwaggerTypeListSubs]
  describe 'get_swagger_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_timers_for_subscription
  # Retrieves a collection timer amendments for the specified subscription.. By default 10 values are returned. Records are returned in natural order.
  # {\&quot;nickname\&quot;:\&quot;Get Timers\&quot;,\&quot;response\&quot;:\&quot;getTimersforSubscription.html\&quot;}
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @option opts [Integer] :offset The offset from the first subscription to return.
  # @option opts [Integer] :records The maximum number of subscriptions to return.
  # @option opts [String] :order_by Specify a field used to order the result set.
  # @option opts [String] :order Ihe direction of any ordering, either ASC or DESC.
  # @option opts [BOOLEAN] :include_retired Whether retired timers should be returned.
  # @option opts [String] :state The state of the timer amendment
  # @option opts [String] :event The type of timer event
  # @return [TimerAmendment]
  describe 'get_timers_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for import_subscription
  # Import a subscription.
  # {\&quot;nickname\&quot;:\&quot;Import\&quot;,\&quot;request\&quot;:\&quot;importSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;importSubscription.html\&quot;}
  # @param request The request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'import_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for invoice_charges_on_subscription
  # Invoice any outstanding charges for the subscription.
  # {\&quot;nickname\&quot;:\&quot;Invoice Charges\&quot;,\&quot;request\&quot;:\&quot;invoiceChargesRequest.html\&quot;,\&quot;response\&quot;:\&quot;invoiceCharges.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param charge The charge request
  # @param [Hash] opts the optional parameters
  # @return [InvoicePagedMetadata]
  describe 'invoice_charges_on_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for migrate_subscription
  # Migrate the subscription to a new plan.
  # {\&quot;nickname\&quot;:\&quot;Migrate\&quot;,\&quot;request\&quot;:\&quot;migrateSubscriptionRequest.html\&quot;, \&quot;response\&quot;:\&quot;migrateSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param request The migration request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'migrate_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_coupon_from_subscription
  # Removes the coupon from the subscription.
  # {\&quot;nickname\&quot;:\&quot;Remove coupon\&quot;,\&quot;response\&quot;:\&quot;removeCouponResponse.html\&quot;}
  # @param subscription_id 
  # @param coupon_code 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [CouponPagedMetadata]
  describe 'remove_coupon_from_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_credit_from_subscription
  # Decrease the amount of credit available to the specified subscription.
  # {\&quot;nickname\&quot;:\&quot;Remove Credit\&quot;,\&quot;response\&quot;:\&quot;removeCreditForSubscription.html\&quot;}
  # @param subscription_id 
  # @param value &lt;p&gt;Either a credit note ID or a currency value.&lt;/p&gt;&lt;p&gt;If a credit note ID is provided any remaining credit will be removed.&lt;/p&gt;&lt;p&gt;If a decimal is provided this value will be removed from any credit available to the subscription. For example if the subscription is in USD setting the value as 10 will reduce credit by $10 (USD), setting 9.86  would reduce the credit by $9.86 (USD). The value will be reduced from any credit available.&lt;/p&gt;
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [CreditNotePagedMetadata]
  describe 'remove_credit_from_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_payment_method_from_subscription
  # Removes the specified payment method for the given subscription.
  # {\&quot;nickname\&quot;:\&quot;Remove payment-method\&quot;,\&quot;response\&quot;:\&quot;removePaymentMethod.html\&quot;,\&quot;request\&quot;:\&quot;removePaymentMethod.request.html\&quot;}
  # @param subscription_id 
  # @param payment_method_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [PaymentMethodPagedMetadata]
  describe 'remove_payment_method_from_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for remove_pricing_component_value_change_from_subscription
  # Discards from the subscription any scheduled changes in the value of the specified pricing-component.
  # {\&quot;nickname\&quot;:\&quot;Discard value changes\&quot;,\&quot;response\&quot;:\&quot;removePricingComponentValueChange.html\&quot;}
  # @param subscription_id 
  # @param pricing_component 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [PaymentMethodPagedMetadata]
  describe 'remove_pricing_component_value_change_from_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for resume_subscription
  # Resume the frozen subscription.
  # {\&quot;nickname\&quot;:\&quot;Resume\&quot;,\&quot;request\&quot;:\&quot;resumeSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;resumeSubscription.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param request The request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'resume_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for revive_subscription
  # Revives a cancelled subscription and returns it to its previous state
  # {\&quot;nickname\&quot;:\&quot;Revive subscription\&quot;,\&quot;request\&quot;:\&quot;reviveSubscriptionRequest.html\&quot;, \&quot;response\&quot;:\&quot;reviveSubscription.html\&quot;}
  # @param subscription_id 
  # @param request The revive request
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'revive_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_metadata_for_subscription
  # Remove any existing metadata keys and create the provided data.
  # {\&quot;nickname\&quot;:\&quot;Set on subscription\&quot;,\&quot;request\&quot;:\&quot;setSubscriptionMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;setSubscriptionMetadataResponse.html\&quot;}
  # @param metadata 
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [DynamicMetadata]
  describe 'set_metadata_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_pricing_component_value_on_subscription
  # Sets upon this subscription a new value for the specified pricing-component without performing an upgrade.
  # {\&quot;nickname\&quot;:\&quot;Set values\&quot;,\&quot;request\&quot;:\&quot;setPricingComponentValuesRequest.html\&quot;,\&quot;response\&quot;:\&quot;setPricingComponentValues.html\&quot;}
  # @param subscription_id ID of the subscription.
  # @param pricing_component_value The pricing-component-value request
  # @param [Hash] opts the optional parameters
  # @return [PricingComponentValuePagedMetadata]
  describe 'set_pricing_component_value_on_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_pricing_component_value_on_subscription_batch_update
  # Upgrades/downgrades this subscription to some new value for the specified pricing-component. This endpoint can do synchronous (immediate) and asynchronous (delayed) updates. A synchronous update will generate a charge/credit for an UPGRADE or DOWNGRADE. An asynchronous update will generate an amendment scheduled for the end of the billing period. By default each update is considered synchronous, you can make them asynchronous setting &#39;applyChangeNow&#39; to &#39;false&#39;.
  # {\&quot;nickname\&quot;:\&quot;Set values\&quot;,\&quot;request\&quot;:\&quot;setBatchPricingComponentValueRequest.html\&quot;,\&quot;response\&quot;:\&quot;setBatchPricingComponentValue.html\&quot;}
  # @param subscription_id ID of the subscription
  # @param request The batched update requests.
  # @param [Hash] opts the optional parameters
  # @return [UpdatePricingComponentValueResponsePagedMetadata]
  describe 'set_pricing_component_value_on_subscription_batch_update test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_pricing_component_value_on_subscription_v2
  # Upgrades/downgrades this subscription to some new value for the specified pricing-component.
  # {\&quot;nickname\&quot;:\&quot;Set value\&quot;,\&quot;request\&quot;:\&quot;setPricingComponentValueRequest.html\&quot;,\&quot;response\&quot;:\&quot;setPricingComponentValue.html\&quot;}
  # @param subscription_id 
  # @param pricing_component Name or ID of the pricing-component.
  # @param value The pricing-component-value request
  # @param [Hash] opts the optional parameters
  # @return [PricingComponentValueResponsePagedMetadata]
  describe 'set_pricing_component_value_on_subscription_v2 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_subscription
  # Update a subscription.
  # {\&quot;nickname\&quot;:\&quot;Update a subscription\&quot;,\&quot;request\&quot;:\&quot;updateSubscriptionRequest.html\&quot;,\&quot;response\&quot;:\&quot;updateSubscriptionResponse.html\&quot;}
  # @param subscription The subscription object to be updated.
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'update_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_subscription_v2
  # Update a subscription (V2).
  # {\&quot;nickname\&quot;:\&quot;Update subscription (V2)\&quot;,\&quot;response\&quot;:\&quot;updateSubscriptionViaHelper.html\&quot;,\&quot;request\&quot;:\&quot;updateSubscriptionViaHelper.request.html\&quot;}
  # @param request 
  # @param [Hash] opts the optional parameters
  # @return [SubscriptionPagedMetadata]
  describe 'update_subscription_v2 test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upsert_metadata_for_subscription
  # Update any existing metadata key-values and insert any new key-values, no keys will be removed.
  # {\&quot;nickname\&quot;:\&quot;Upsert on subscription\&quot;,\&quot;request\&quot;:\&quot;upsertSubscriptionMetadataRequest.html\&quot;,\&quot;response\&quot;:\&quot;upsertSubscriptionMetadataResponse.html\&quot;}
  # @param metadata 
  # @param subscription_id 
  # @param [Hash] opts the optional parameters
  # @option opts [Array<String>] :organizations A list of organization-IDs used to restrict the scope of API calls.
  # @return [DynamicMetadata]
  describe 'upsert_metadata_for_subscription test' do
    it "should work" do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
